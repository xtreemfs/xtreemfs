// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: xtreemfs/MRC.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "xtreemfs/MRC.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace xtreemfs {
namespace pbrpc {

namespace {

const ::google::protobuf::Descriptor* Stat_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Stat_reflection_ = NULL;
const ::google::protobuf::Descriptor* DirectoryEntry_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DirectoryEntry_reflection_ = NULL;
const ::google::protobuf::Descriptor* DirectoryEntries_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DirectoryEntries_reflection_ = NULL;
const ::google::protobuf::Descriptor* XAttr_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  XAttr_reflection_ = NULL;
const ::google::protobuf::Descriptor* Volume_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Volume_reflection_ = NULL;
const ::google::protobuf::Descriptor* Volumes_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Volumes_reflection_ = NULL;
const ::google::protobuf::Descriptor* StatVFS_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StatVFS_reflection_ = NULL;
const ::google::protobuf::Descriptor* fsetattrRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  fsetattrRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* getattrRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  getattrRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* getattrResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  getattrResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* getxattrRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  getxattrRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* getxattrResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  getxattrResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* linkRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  linkRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* listxattrRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  listxattrRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* listxattrResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  listxattrResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* mkdirRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mkdirRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* openRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  openRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* openResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  openResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* readdirRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  readdirRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* readlinkRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  readlinkRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* readlinkResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  readlinkResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* removexattrRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  removexattrRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* renameRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  renameRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* renameResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  renameResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* rmdirRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  rmdirRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* setattrRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  setattrRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* setxattrRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  setxattrRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* statvfsRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  statvfsRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* symlinkRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  symlinkRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* unlinkRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  unlinkRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* unlinkResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  unlinkResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* accessRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  accessRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* xtreemfs_check_file_existsRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  xtreemfs_check_file_existsRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* xtreemfs_check_file_existsResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  xtreemfs_check_file_existsResponse_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* xtreemfs_check_file_existsResponse_FILE_STATE_descriptor_ = NULL;
const ::google::protobuf::Descriptor* xtreemfs_dump_restore_databaseRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  xtreemfs_dump_restore_databaseRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* xtreemfs_get_suitable_osdsRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  xtreemfs_get_suitable_osdsRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* xtreemfs_get_suitable_osdsResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  xtreemfs_get_suitable_osdsResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* timestampResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  timestampResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* stringMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stringMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* xtreemfs_listdirRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  xtreemfs_listdirRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* xtreemfs_listdirResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  xtreemfs_listdirResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* xtreemfs_replica_addRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  xtreemfs_replica_addRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* xtreemfs_replica_listRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  xtreemfs_replica_listRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* xtreemfs_get_xlocsetRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  xtreemfs_get_xlocsetRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* xtreemfs_replica_removeRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  xtreemfs_replica_removeRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* xtreemfs_restore_fileRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  xtreemfs_restore_fileRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* xtreemfs_rmvolRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  xtreemfs_rmvolRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* xtreemfs_update_file_sizeRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  xtreemfs_update_file_sizeRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* xtreemfs_set_replica_update_policyRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  xtreemfs_set_replica_update_policyRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* xtreemfs_set_replica_update_policyResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  xtreemfs_set_replica_update_policyResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* xtreemfs_set_read_only_xattrRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  xtreemfs_set_read_only_xattrRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* xtreemfs_set_read_only_xattrResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  xtreemfs_set_read_only_xattrResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* xtreemfs_get_file_credentialsRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  xtreemfs_get_file_credentialsRequest_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Setattrs_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* XATTR_FLAGS_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ACCESS_FLAGS_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_xtreemfs_2fMRC_2eproto() {
  protobuf_AddDesc_xtreemfs_2fMRC_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "xtreemfs/MRC.proto");
  GOOGLE_CHECK(file != NULL);
  Stat_descriptor_ = file->message_type(0);
  static const int Stat_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stat, dev_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stat, ino_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stat, mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stat, nlink_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stat, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stat, group_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stat, size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stat, atime_ns_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stat, mtime_ns_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stat, ctime_ns_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stat, blksize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stat, etag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stat, truncate_epoch_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stat, attributes_),
  };
  Stat_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Stat_descriptor_,
      Stat::default_instance_,
      Stat_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stat, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stat, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Stat));
  DirectoryEntry_descriptor_ = file->message_type(1);
  static const int DirectoryEntry_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DirectoryEntry, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DirectoryEntry, stbuf_),
  };
  DirectoryEntry_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DirectoryEntry_descriptor_,
      DirectoryEntry::default_instance_,
      DirectoryEntry_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DirectoryEntry, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DirectoryEntry, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DirectoryEntry));
  DirectoryEntries_descriptor_ = file->message_type(2);
  static const int DirectoryEntries_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DirectoryEntries, entries_),
  };
  DirectoryEntries_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DirectoryEntries_descriptor_,
      DirectoryEntries::default_instance_,
      DirectoryEntries_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DirectoryEntries, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DirectoryEntries, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DirectoryEntries));
  XAttr_descriptor_ = file->message_type(3);
  static const int XAttr_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(XAttr, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(XAttr, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(XAttr, value_bytes_string_),
  };
  XAttr_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      XAttr_descriptor_,
      XAttr::default_instance_,
      XAttr_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(XAttr, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(XAttr, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(XAttr));
  Volume_descriptor_ = file->message_type(4);
  static const int Volume_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Volume, access_control_policy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Volume, default_striping_policy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Volume, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Volume, mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Volume, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Volume, owner_group_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Volume, owner_user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Volume, attrs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Volume, quota_),
  };
  Volume_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Volume_descriptor_,
      Volume::default_instance_,
      Volume_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Volume, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Volume, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Volume));
  Volumes_descriptor_ = file->message_type(5);
  static const int Volumes_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Volumes, volumes_),
  };
  Volumes_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Volumes_descriptor_,
      Volumes::default_instance_,
      Volumes_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Volumes, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Volumes, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Volumes));
  StatVFS_descriptor_ = file->message_type(6);
  static const int StatVFS_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatVFS, bsize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatVFS, bavail_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatVFS, bfree_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatVFS, blocks_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatVFS, fsid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatVFS, namemax_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatVFS, access_control_policy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatVFS, default_striping_policy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatVFS, etag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatVFS, mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatVFS, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatVFS, owner_group_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatVFS, owner_user_id_),
  };
  StatVFS_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StatVFS_descriptor_,
      StatVFS::default_instance_,
      StatVFS_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatVFS, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatVFS, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StatVFS));
  fsetattrRequest_descriptor_ = file->message_type(7);
  static const int fsetattrRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fsetattrRequest, stbuf_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fsetattrRequest, to_set_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fsetattrRequest, cap_),
  };
  fsetattrRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      fsetattrRequest_descriptor_,
      fsetattrRequest::default_instance_,
      fsetattrRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fsetattrRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fsetattrRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(fsetattrRequest));
  getattrRequest_descriptor_ = file->message_type(8);
  static const int getattrRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(getattrRequest, volume_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(getattrRequest, path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(getattrRequest, known_etag_),
  };
  getattrRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      getattrRequest_descriptor_,
      getattrRequest::default_instance_,
      getattrRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(getattrRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(getattrRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(getattrRequest));
  getattrResponse_descriptor_ = file->message_type(9);
  static const int getattrResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(getattrResponse, stbuf_),
  };
  getattrResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      getattrResponse_descriptor_,
      getattrResponse::default_instance_,
      getattrResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(getattrResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(getattrResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(getattrResponse));
  getxattrRequest_descriptor_ = file->message_type(10);
  static const int getxattrRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(getxattrRequest, volume_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(getxattrRequest, path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(getxattrRequest, name_),
  };
  getxattrRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      getxattrRequest_descriptor_,
      getxattrRequest::default_instance_,
      getxattrRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(getxattrRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(getxattrRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(getxattrRequest));
  getxattrResponse_descriptor_ = file->message_type(11);
  static const int getxattrResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(getxattrResponse, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(getxattrResponse, value_bytes_string_),
  };
  getxattrResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      getxattrResponse_descriptor_,
      getxattrResponse::default_instance_,
      getxattrResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(getxattrResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(getxattrResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(getxattrResponse));
  linkRequest_descriptor_ = file->message_type(12);
  static const int linkRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(linkRequest, volume_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(linkRequest, target_path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(linkRequest, link_path_),
  };
  linkRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      linkRequest_descriptor_,
      linkRequest::default_instance_,
      linkRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(linkRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(linkRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(linkRequest));
  listxattrRequest_descriptor_ = file->message_type(13);
  static const int listxattrRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(listxattrRequest, volume_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(listxattrRequest, path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(listxattrRequest, names_only_),
  };
  listxattrRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      listxattrRequest_descriptor_,
      listxattrRequest::default_instance_,
      listxattrRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(listxattrRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(listxattrRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(listxattrRequest));
  listxattrResponse_descriptor_ = file->message_type(14);
  static const int listxattrResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(listxattrResponse, xattrs_),
  };
  listxattrResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      listxattrResponse_descriptor_,
      listxattrResponse::default_instance_,
      listxattrResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(listxattrResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(listxattrResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(listxattrResponse));
  mkdirRequest_descriptor_ = file->message_type(15);
  static const int mkdirRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mkdirRequest, volume_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mkdirRequest, path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mkdirRequest, mode_),
  };
  mkdirRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mkdirRequest_descriptor_,
      mkdirRequest::default_instance_,
      mkdirRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mkdirRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mkdirRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mkdirRequest));
  openRequest_descriptor_ = file->message_type(16);
  static const int openRequest_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(openRequest, volume_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(openRequest, path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(openRequest, flags_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(openRequest, mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(openRequest, attributes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(openRequest, coordinates_),
  };
  openRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      openRequest_descriptor_,
      openRequest::default_instance_,
      openRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(openRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(openRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(openRequest));
  openResponse_descriptor_ = file->message_type(17);
  static const int openResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(openResponse, creds_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(openResponse, timestamp_s_),
  };
  openResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      openResponse_descriptor_,
      openResponse::default_instance_,
      openResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(openResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(openResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(openResponse));
  readdirRequest_descriptor_ = file->message_type(18);
  static const int readdirRequest_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(readdirRequest, volume_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(readdirRequest, path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(readdirRequest, known_etag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(readdirRequest, limit_directory_entries_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(readdirRequest, names_only_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(readdirRequest, seen_directory_entries_count_),
  };
  readdirRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      readdirRequest_descriptor_,
      readdirRequest::default_instance_,
      readdirRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(readdirRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(readdirRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(readdirRequest));
  readlinkRequest_descriptor_ = file->message_type(19);
  static const int readlinkRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(readlinkRequest, volume_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(readlinkRequest, path_),
  };
  readlinkRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      readlinkRequest_descriptor_,
      readlinkRequest::default_instance_,
      readlinkRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(readlinkRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(readlinkRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(readlinkRequest));
  readlinkResponse_descriptor_ = file->message_type(20);
  static const int readlinkResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(readlinkResponse, link_target_path_),
  };
  readlinkResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      readlinkResponse_descriptor_,
      readlinkResponse::default_instance_,
      readlinkResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(readlinkResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(readlinkResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(readlinkResponse));
  removexattrRequest_descriptor_ = file->message_type(21);
  static const int removexattrRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(removexattrRequest, volume_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(removexattrRequest, path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(removexattrRequest, name_),
  };
  removexattrRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      removexattrRequest_descriptor_,
      removexattrRequest::default_instance_,
      removexattrRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(removexattrRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(removexattrRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(removexattrRequest));
  renameRequest_descriptor_ = file->message_type(22);
  static const int renameRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(renameRequest, volume_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(renameRequest, source_path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(renameRequest, target_path_),
  };
  renameRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      renameRequest_descriptor_,
      renameRequest::default_instance_,
      renameRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(renameRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(renameRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(renameRequest));
  renameResponse_descriptor_ = file->message_type(23);
  static const int renameResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(renameResponse, timestamp_s_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(renameResponse, creds_),
  };
  renameResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      renameResponse_descriptor_,
      renameResponse::default_instance_,
      renameResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(renameResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(renameResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(renameResponse));
  rmdirRequest_descriptor_ = file->message_type(24);
  static const int rmdirRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rmdirRequest, volume_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rmdirRequest, path_),
  };
  rmdirRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      rmdirRequest_descriptor_,
      rmdirRequest::default_instance_,
      rmdirRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rmdirRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rmdirRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(rmdirRequest));
  setattrRequest_descriptor_ = file->message_type(25);
  static const int setattrRequest_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(setattrRequest, volume_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(setattrRequest, path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(setattrRequest, stbuf_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(setattrRequest, to_set_),
  };
  setattrRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      setattrRequest_descriptor_,
      setattrRequest::default_instance_,
      setattrRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(setattrRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(setattrRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(setattrRequest));
  setxattrRequest_descriptor_ = file->message_type(26);
  static const int setxattrRequest_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(setxattrRequest, volume_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(setxattrRequest, path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(setxattrRequest, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(setxattrRequest, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(setxattrRequest, value_bytes_string_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(setxattrRequest, flags_),
  };
  setxattrRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      setxattrRequest_descriptor_,
      setxattrRequest::default_instance_,
      setxattrRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(setxattrRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(setxattrRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(setxattrRequest));
  statvfsRequest_descriptor_ = file->message_type(27);
  static const int statvfsRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(statvfsRequest, volume_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(statvfsRequest, known_etag_),
  };
  statvfsRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      statvfsRequest_descriptor_,
      statvfsRequest::default_instance_,
      statvfsRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(statvfsRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(statvfsRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(statvfsRequest));
  symlinkRequest_descriptor_ = file->message_type(28);
  static const int symlinkRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(symlinkRequest, volume_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(symlinkRequest, target_path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(symlinkRequest, link_path_),
  };
  symlinkRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      symlinkRequest_descriptor_,
      symlinkRequest::default_instance_,
      symlinkRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(symlinkRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(symlinkRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(symlinkRequest));
  unlinkRequest_descriptor_ = file->message_type(29);
  static const int unlinkRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(unlinkRequest, volume_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(unlinkRequest, path_),
  };
  unlinkRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      unlinkRequest_descriptor_,
      unlinkRequest::default_instance_,
      unlinkRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(unlinkRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(unlinkRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(unlinkRequest));
  unlinkResponse_descriptor_ = file->message_type(30);
  static const int unlinkResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(unlinkResponse, timestamp_s_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(unlinkResponse, creds_),
  };
  unlinkResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      unlinkResponse_descriptor_,
      unlinkResponse::default_instance_,
      unlinkResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(unlinkResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(unlinkResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(unlinkResponse));
  accessRequest_descriptor_ = file->message_type(31);
  static const int accessRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(accessRequest, volume_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(accessRequest, path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(accessRequest, flags_),
  };
  accessRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      accessRequest_descriptor_,
      accessRequest::default_instance_,
      accessRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(accessRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(accessRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(accessRequest));
  xtreemfs_check_file_existsRequest_descriptor_ = file->message_type(32);
  static const int xtreemfs_check_file_existsRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(xtreemfs_check_file_existsRequest, volume_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(xtreemfs_check_file_existsRequest, file_ids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(xtreemfs_check_file_existsRequest, osd_uuid_),
  };
  xtreemfs_check_file_existsRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      xtreemfs_check_file_existsRequest_descriptor_,
      xtreemfs_check_file_existsRequest::default_instance_,
      xtreemfs_check_file_existsRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(xtreemfs_check_file_existsRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(xtreemfs_check_file_existsRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(xtreemfs_check_file_existsRequest));
  xtreemfs_check_file_existsResponse_descriptor_ = file->message_type(33);
  static const int xtreemfs_check_file_existsResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(xtreemfs_check_file_existsResponse, volume_exists_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(xtreemfs_check_file_existsResponse, file_states_),
  };
  xtreemfs_check_file_existsResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      xtreemfs_check_file_existsResponse_descriptor_,
      xtreemfs_check_file_existsResponse::default_instance_,
      xtreemfs_check_file_existsResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(xtreemfs_check_file_existsResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(xtreemfs_check_file_existsResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(xtreemfs_check_file_existsResponse));
  xtreemfs_check_file_existsResponse_FILE_STATE_descriptor_ = xtreemfs_check_file_existsResponse_descriptor_->enum_type(0);
  xtreemfs_dump_restore_databaseRequest_descriptor_ = file->message_type(34);
  static const int xtreemfs_dump_restore_databaseRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(xtreemfs_dump_restore_databaseRequest, dump_file_),
  };
  xtreemfs_dump_restore_databaseRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      xtreemfs_dump_restore_databaseRequest_descriptor_,
      xtreemfs_dump_restore_databaseRequest::default_instance_,
      xtreemfs_dump_restore_databaseRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(xtreemfs_dump_restore_databaseRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(xtreemfs_dump_restore_databaseRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(xtreemfs_dump_restore_databaseRequest));
  xtreemfs_get_suitable_osdsRequest_descriptor_ = file->message_type(35);
  static const int xtreemfs_get_suitable_osdsRequest_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(xtreemfs_get_suitable_osdsRequest, file_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(xtreemfs_get_suitable_osdsRequest, path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(xtreemfs_get_suitable_osdsRequest, volume_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(xtreemfs_get_suitable_osdsRequest, num_osds_),
  };
  xtreemfs_get_suitable_osdsRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      xtreemfs_get_suitable_osdsRequest_descriptor_,
      xtreemfs_get_suitable_osdsRequest::default_instance_,
      xtreemfs_get_suitable_osdsRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(xtreemfs_get_suitable_osdsRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(xtreemfs_get_suitable_osdsRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(xtreemfs_get_suitable_osdsRequest));
  xtreemfs_get_suitable_osdsResponse_descriptor_ = file->message_type(36);
  static const int xtreemfs_get_suitable_osdsResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(xtreemfs_get_suitable_osdsResponse, osd_uuids_),
  };
  xtreemfs_get_suitable_osdsResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      xtreemfs_get_suitable_osdsResponse_descriptor_,
      xtreemfs_get_suitable_osdsResponse::default_instance_,
      xtreemfs_get_suitable_osdsResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(xtreemfs_get_suitable_osdsResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(xtreemfs_get_suitable_osdsResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(xtreemfs_get_suitable_osdsResponse));
  timestampResponse_descriptor_ = file->message_type(37);
  static const int timestampResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(timestampResponse, timestamp_s_),
  };
  timestampResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      timestampResponse_descriptor_,
      timestampResponse::default_instance_,
      timestampResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(timestampResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(timestampResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(timestampResponse));
  stringMessage_descriptor_ = file->message_type(38);
  static const int stringMessage_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stringMessage, a_string_),
  };
  stringMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stringMessage_descriptor_,
      stringMessage::default_instance_,
      stringMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stringMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stringMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stringMessage));
  xtreemfs_listdirRequest_descriptor_ = file->message_type(39);
  static const int xtreemfs_listdirRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(xtreemfs_listdirRequest, path_),
  };
  xtreemfs_listdirRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      xtreemfs_listdirRequest_descriptor_,
      xtreemfs_listdirRequest::default_instance_,
      xtreemfs_listdirRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(xtreemfs_listdirRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(xtreemfs_listdirRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(xtreemfs_listdirRequest));
  xtreemfs_listdirResponse_descriptor_ = file->message_type(40);
  static const int xtreemfs_listdirResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(xtreemfs_listdirResponse, names_),
  };
  xtreemfs_listdirResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      xtreemfs_listdirResponse_descriptor_,
      xtreemfs_listdirResponse::default_instance_,
      xtreemfs_listdirResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(xtreemfs_listdirResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(xtreemfs_listdirResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(xtreemfs_listdirResponse));
  xtreemfs_replica_addRequest_descriptor_ = file->message_type(41);
  static const int xtreemfs_replica_addRequest_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(xtreemfs_replica_addRequest, file_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(xtreemfs_replica_addRequest, path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(xtreemfs_replica_addRequest, volume_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(xtreemfs_replica_addRequest, new_replica_),
  };
  xtreemfs_replica_addRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      xtreemfs_replica_addRequest_descriptor_,
      xtreemfs_replica_addRequest::default_instance_,
      xtreemfs_replica_addRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(xtreemfs_replica_addRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(xtreemfs_replica_addRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(xtreemfs_replica_addRequest));
  xtreemfs_replica_listRequest_descriptor_ = file->message_type(42);
  static const int xtreemfs_replica_listRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(xtreemfs_replica_listRequest, file_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(xtreemfs_replica_listRequest, path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(xtreemfs_replica_listRequest, volume_name_),
  };
  xtreemfs_replica_listRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      xtreemfs_replica_listRequest_descriptor_,
      xtreemfs_replica_listRequest::default_instance_,
      xtreemfs_replica_listRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(xtreemfs_replica_listRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(xtreemfs_replica_listRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(xtreemfs_replica_listRequest));
  xtreemfs_get_xlocsetRequest_descriptor_ = file->message_type(43);
  static const int xtreemfs_get_xlocsetRequest_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(xtreemfs_get_xlocsetRequest, file_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(xtreemfs_get_xlocsetRequest, path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(xtreemfs_get_xlocsetRequest, volume_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(xtreemfs_get_xlocsetRequest, xcap_),
  };
  xtreemfs_get_xlocsetRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      xtreemfs_get_xlocsetRequest_descriptor_,
      xtreemfs_get_xlocsetRequest::default_instance_,
      xtreemfs_get_xlocsetRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(xtreemfs_get_xlocsetRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(xtreemfs_get_xlocsetRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(xtreemfs_get_xlocsetRequest));
  xtreemfs_replica_removeRequest_descriptor_ = file->message_type(44);
  static const int xtreemfs_replica_removeRequest_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(xtreemfs_replica_removeRequest, file_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(xtreemfs_replica_removeRequest, path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(xtreemfs_replica_removeRequest, volume_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(xtreemfs_replica_removeRequest, osd_uuid_),
  };
  xtreemfs_replica_removeRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      xtreemfs_replica_removeRequest_descriptor_,
      xtreemfs_replica_removeRequest::default_instance_,
      xtreemfs_replica_removeRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(xtreemfs_replica_removeRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(xtreemfs_replica_removeRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(xtreemfs_replica_removeRequest));
  xtreemfs_restore_fileRequest_descriptor_ = file->message_type(45);
  static const int xtreemfs_restore_fileRequest_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(xtreemfs_restore_fileRequest, file_path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(xtreemfs_restore_fileRequest, file_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(xtreemfs_restore_fileRequest, file_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(xtreemfs_restore_fileRequest, osd_uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(xtreemfs_restore_fileRequest, stripe_size_),
  };
  xtreemfs_restore_fileRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      xtreemfs_restore_fileRequest_descriptor_,
      xtreemfs_restore_fileRequest::default_instance_,
      xtreemfs_restore_fileRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(xtreemfs_restore_fileRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(xtreemfs_restore_fileRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(xtreemfs_restore_fileRequest));
  xtreemfs_rmvolRequest_descriptor_ = file->message_type(46);
  static const int xtreemfs_rmvolRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(xtreemfs_rmvolRequest, volume_name_),
  };
  xtreemfs_rmvolRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      xtreemfs_rmvolRequest_descriptor_,
      xtreemfs_rmvolRequest::default_instance_,
      xtreemfs_rmvolRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(xtreemfs_rmvolRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(xtreemfs_rmvolRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(xtreemfs_rmvolRequest));
  xtreemfs_update_file_sizeRequest_descriptor_ = file->message_type(47);
  static const int xtreemfs_update_file_sizeRequest_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(xtreemfs_update_file_sizeRequest, xcap_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(xtreemfs_update_file_sizeRequest, osd_write_response_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(xtreemfs_update_file_sizeRequest, close_file_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(xtreemfs_update_file_sizeRequest, coordinates_),
  };
  xtreemfs_update_file_sizeRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      xtreemfs_update_file_sizeRequest_descriptor_,
      xtreemfs_update_file_sizeRequest::default_instance_,
      xtreemfs_update_file_sizeRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(xtreemfs_update_file_sizeRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(xtreemfs_update_file_sizeRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(xtreemfs_update_file_sizeRequest));
  xtreemfs_set_replica_update_policyRequest_descriptor_ = file->message_type(48);
  static const int xtreemfs_set_replica_update_policyRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(xtreemfs_set_replica_update_policyRequest, file_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(xtreemfs_set_replica_update_policyRequest, update_policy_),
  };
  xtreemfs_set_replica_update_policyRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      xtreemfs_set_replica_update_policyRequest_descriptor_,
      xtreemfs_set_replica_update_policyRequest::default_instance_,
      xtreemfs_set_replica_update_policyRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(xtreemfs_set_replica_update_policyRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(xtreemfs_set_replica_update_policyRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(xtreemfs_set_replica_update_policyRequest));
  xtreemfs_set_replica_update_policyResponse_descriptor_ = file->message_type(49);
  static const int xtreemfs_set_replica_update_policyResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(xtreemfs_set_replica_update_policyResponse, old_update_policy_),
  };
  xtreemfs_set_replica_update_policyResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      xtreemfs_set_replica_update_policyResponse_descriptor_,
      xtreemfs_set_replica_update_policyResponse::default_instance_,
      xtreemfs_set_replica_update_policyResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(xtreemfs_set_replica_update_policyResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(xtreemfs_set_replica_update_policyResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(xtreemfs_set_replica_update_policyResponse));
  xtreemfs_set_read_only_xattrRequest_descriptor_ = file->message_type(50);
  static const int xtreemfs_set_read_only_xattrRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(xtreemfs_set_read_only_xattrRequest, file_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(xtreemfs_set_read_only_xattrRequest, value_),
  };
  xtreemfs_set_read_only_xattrRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      xtreemfs_set_read_only_xattrRequest_descriptor_,
      xtreemfs_set_read_only_xattrRequest::default_instance_,
      xtreemfs_set_read_only_xattrRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(xtreemfs_set_read_only_xattrRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(xtreemfs_set_read_only_xattrRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(xtreemfs_set_read_only_xattrRequest));
  xtreemfs_set_read_only_xattrResponse_descriptor_ = file->message_type(51);
  static const int xtreemfs_set_read_only_xattrResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(xtreemfs_set_read_only_xattrResponse, was_set_),
  };
  xtreemfs_set_read_only_xattrResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      xtreemfs_set_read_only_xattrResponse_descriptor_,
      xtreemfs_set_read_only_xattrResponse::default_instance_,
      xtreemfs_set_read_only_xattrResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(xtreemfs_set_read_only_xattrResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(xtreemfs_set_read_only_xattrResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(xtreemfs_set_read_only_xattrResponse));
  xtreemfs_get_file_credentialsRequest_descriptor_ = file->message_type(52);
  static const int xtreemfs_get_file_credentialsRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(xtreemfs_get_file_credentialsRequest, file_id_),
  };
  xtreemfs_get_file_credentialsRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      xtreemfs_get_file_credentialsRequest_descriptor_,
      xtreemfs_get_file_credentialsRequest::default_instance_,
      xtreemfs_get_file_credentialsRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(xtreemfs_get_file_credentialsRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(xtreemfs_get_file_credentialsRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(xtreemfs_get_file_credentialsRequest));
  Setattrs_descriptor_ = file->enum_type(0);
  XATTR_FLAGS_descriptor_ = file->enum_type(1);
  ACCESS_FLAGS_descriptor_ = file->enum_type(2);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_xtreemfs_2fMRC_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Stat_descriptor_, &Stat::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DirectoryEntry_descriptor_, &DirectoryEntry::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DirectoryEntries_descriptor_, &DirectoryEntries::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    XAttr_descriptor_, &XAttr::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Volume_descriptor_, &Volume::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Volumes_descriptor_, &Volumes::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StatVFS_descriptor_, &StatVFS::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    fsetattrRequest_descriptor_, &fsetattrRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    getattrRequest_descriptor_, &getattrRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    getattrResponse_descriptor_, &getattrResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    getxattrRequest_descriptor_, &getxattrRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    getxattrResponse_descriptor_, &getxattrResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    linkRequest_descriptor_, &linkRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    listxattrRequest_descriptor_, &listxattrRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    listxattrResponse_descriptor_, &listxattrResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mkdirRequest_descriptor_, &mkdirRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    openRequest_descriptor_, &openRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    openResponse_descriptor_, &openResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    readdirRequest_descriptor_, &readdirRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    readlinkRequest_descriptor_, &readlinkRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    readlinkResponse_descriptor_, &readlinkResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    removexattrRequest_descriptor_, &removexattrRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    renameRequest_descriptor_, &renameRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    renameResponse_descriptor_, &renameResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    rmdirRequest_descriptor_, &rmdirRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    setattrRequest_descriptor_, &setattrRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    setxattrRequest_descriptor_, &setxattrRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    statvfsRequest_descriptor_, &statvfsRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    symlinkRequest_descriptor_, &symlinkRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    unlinkRequest_descriptor_, &unlinkRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    unlinkResponse_descriptor_, &unlinkResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    accessRequest_descriptor_, &accessRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    xtreemfs_check_file_existsRequest_descriptor_, &xtreemfs_check_file_existsRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    xtreemfs_check_file_existsResponse_descriptor_, &xtreemfs_check_file_existsResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    xtreemfs_dump_restore_databaseRequest_descriptor_, &xtreemfs_dump_restore_databaseRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    xtreemfs_get_suitable_osdsRequest_descriptor_, &xtreemfs_get_suitable_osdsRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    xtreemfs_get_suitable_osdsResponse_descriptor_, &xtreemfs_get_suitable_osdsResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    timestampResponse_descriptor_, &timestampResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stringMessage_descriptor_, &stringMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    xtreemfs_listdirRequest_descriptor_, &xtreemfs_listdirRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    xtreemfs_listdirResponse_descriptor_, &xtreemfs_listdirResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    xtreemfs_replica_addRequest_descriptor_, &xtreemfs_replica_addRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    xtreemfs_replica_listRequest_descriptor_, &xtreemfs_replica_listRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    xtreemfs_get_xlocsetRequest_descriptor_, &xtreemfs_get_xlocsetRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    xtreemfs_replica_removeRequest_descriptor_, &xtreemfs_replica_removeRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    xtreemfs_restore_fileRequest_descriptor_, &xtreemfs_restore_fileRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    xtreemfs_rmvolRequest_descriptor_, &xtreemfs_rmvolRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    xtreemfs_update_file_sizeRequest_descriptor_, &xtreemfs_update_file_sizeRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    xtreemfs_set_replica_update_policyRequest_descriptor_, &xtreemfs_set_replica_update_policyRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    xtreemfs_set_replica_update_policyResponse_descriptor_, &xtreemfs_set_replica_update_policyResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    xtreemfs_set_read_only_xattrRequest_descriptor_, &xtreemfs_set_read_only_xattrRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    xtreemfs_set_read_only_xattrResponse_descriptor_, &xtreemfs_set_read_only_xattrResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    xtreemfs_get_file_credentialsRequest_descriptor_, &xtreemfs_get_file_credentialsRequest::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_xtreemfs_2fMRC_2eproto() {
  delete Stat::default_instance_;
  delete Stat_reflection_;
  delete DirectoryEntry::default_instance_;
  delete DirectoryEntry_reflection_;
  delete DirectoryEntries::default_instance_;
  delete DirectoryEntries_reflection_;
  delete XAttr::default_instance_;
  delete XAttr_reflection_;
  delete Volume::default_instance_;
  delete Volume_reflection_;
  delete Volumes::default_instance_;
  delete Volumes_reflection_;
  delete StatVFS::default_instance_;
  delete StatVFS_reflection_;
  delete fsetattrRequest::default_instance_;
  delete fsetattrRequest_reflection_;
  delete getattrRequest::default_instance_;
  delete getattrRequest_reflection_;
  delete getattrResponse::default_instance_;
  delete getattrResponse_reflection_;
  delete getxattrRequest::default_instance_;
  delete getxattrRequest_reflection_;
  delete getxattrResponse::default_instance_;
  delete getxattrResponse_reflection_;
  delete linkRequest::default_instance_;
  delete linkRequest_reflection_;
  delete listxattrRequest::default_instance_;
  delete listxattrRequest_reflection_;
  delete listxattrResponse::default_instance_;
  delete listxattrResponse_reflection_;
  delete mkdirRequest::default_instance_;
  delete mkdirRequest_reflection_;
  delete openRequest::default_instance_;
  delete openRequest_reflection_;
  delete openResponse::default_instance_;
  delete openResponse_reflection_;
  delete readdirRequest::default_instance_;
  delete readdirRequest_reflection_;
  delete readlinkRequest::default_instance_;
  delete readlinkRequest_reflection_;
  delete readlinkResponse::default_instance_;
  delete readlinkResponse_reflection_;
  delete removexattrRequest::default_instance_;
  delete removexattrRequest_reflection_;
  delete renameRequest::default_instance_;
  delete renameRequest_reflection_;
  delete renameResponse::default_instance_;
  delete renameResponse_reflection_;
  delete rmdirRequest::default_instance_;
  delete rmdirRequest_reflection_;
  delete setattrRequest::default_instance_;
  delete setattrRequest_reflection_;
  delete setxattrRequest::default_instance_;
  delete setxattrRequest_reflection_;
  delete statvfsRequest::default_instance_;
  delete statvfsRequest_reflection_;
  delete symlinkRequest::default_instance_;
  delete symlinkRequest_reflection_;
  delete unlinkRequest::default_instance_;
  delete unlinkRequest_reflection_;
  delete unlinkResponse::default_instance_;
  delete unlinkResponse_reflection_;
  delete accessRequest::default_instance_;
  delete accessRequest_reflection_;
  delete xtreemfs_check_file_existsRequest::default_instance_;
  delete xtreemfs_check_file_existsRequest_reflection_;
  delete xtreemfs_check_file_existsResponse::default_instance_;
  delete xtreemfs_check_file_existsResponse_reflection_;
  delete xtreemfs_dump_restore_databaseRequest::default_instance_;
  delete xtreemfs_dump_restore_databaseRequest_reflection_;
  delete xtreemfs_get_suitable_osdsRequest::default_instance_;
  delete xtreemfs_get_suitable_osdsRequest_reflection_;
  delete xtreemfs_get_suitable_osdsResponse::default_instance_;
  delete xtreemfs_get_suitable_osdsResponse_reflection_;
  delete timestampResponse::default_instance_;
  delete timestampResponse_reflection_;
  delete stringMessage::default_instance_;
  delete stringMessage_reflection_;
  delete xtreemfs_listdirRequest::default_instance_;
  delete xtreemfs_listdirRequest_reflection_;
  delete xtreemfs_listdirResponse::default_instance_;
  delete xtreemfs_listdirResponse_reflection_;
  delete xtreemfs_replica_addRequest::default_instance_;
  delete xtreemfs_replica_addRequest_reflection_;
  delete xtreemfs_replica_listRequest::default_instance_;
  delete xtreemfs_replica_listRequest_reflection_;
  delete xtreemfs_get_xlocsetRequest::default_instance_;
  delete xtreemfs_get_xlocsetRequest_reflection_;
  delete xtreemfs_replica_removeRequest::default_instance_;
  delete xtreemfs_replica_removeRequest_reflection_;
  delete xtreemfs_restore_fileRequest::default_instance_;
  delete xtreemfs_restore_fileRequest_reflection_;
  delete xtreemfs_rmvolRequest::default_instance_;
  delete xtreemfs_rmvolRequest_reflection_;
  delete xtreemfs_update_file_sizeRequest::default_instance_;
  delete xtreemfs_update_file_sizeRequest_reflection_;
  delete xtreemfs_set_replica_update_policyRequest::default_instance_;
  delete xtreemfs_set_replica_update_policyRequest_reflection_;
  delete xtreemfs_set_replica_update_policyResponse::default_instance_;
  delete xtreemfs_set_replica_update_policyResponse_reflection_;
  delete xtreemfs_set_read_only_xattrRequest::default_instance_;
  delete xtreemfs_set_read_only_xattrRequest_reflection_;
  delete xtreemfs_set_read_only_xattrResponse::default_instance_;
  delete xtreemfs_set_read_only_xattrResponse_reflection_;
  delete xtreemfs_get_file_credentialsRequest::default_instance_;
  delete xtreemfs_get_file_credentialsRequest_reflection_;
}

void protobuf_AddDesc_xtreemfs_2fMRC_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::xtreemfs::pbrpc::protobuf_AddDesc_include_2fPBRPC_2eproto();
  ::xtreemfs::pbrpc::protobuf_AddDesc_include_2fCommon_2eproto();
  ::xtreemfs::pbrpc::protobuf_AddDesc_xtreemfs_2fGlobalTypes_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022xtreemfs/MRC.proto\022\016xtreemfs.pbrpc\032\023in"
    "clude/PBRPC.proto\032\024include/Common.proto\032"
    "\032xtreemfs/GlobalTypes.proto\"\357\001\n\004Stat\022\013\n\003"
    "dev\030\001 \002(\006\022\013\n\003ino\030\002 \002(\006\022\014\n\004mode\030\003 \002(\007\022\r\n\005"
    "nlink\030\004 \002(\007\022\017\n\007user_id\030\005 \002(\t\022\020\n\010group_id"
    "\030\006 \002(\t\022\014\n\004size\030\007 \002(\006\022\020\n\010atime_ns\030\010 \002(\006\022\020"
    "\n\010mtime_ns\030\t \002(\006\022\020\n\010ctime_ns\030\n \002(\006\022\017\n\007bl"
    "ksize\030\013 \002(\007\022\014\n\004etag\030\014 \001(\006\022\026\n\016truncate_ep"
    "och\030\r \002(\007\022\022\n\nattributes\030\016 \001(\007\"C\n\016Directo"
    "ryEntry\022\014\n\004name\030\001 \002(\t\022#\n\005stbuf\030\002 \001(\0132\024.x"
    "treemfs.pbrpc.Stat\"C\n\020DirectoryEntries\022/"
    "\n\007entries\030\001 \003(\0132\036.xtreemfs.pbrpc.Directo"
    "ryEntry\"@\n\005XAttr\022\014\n\004name\030\001 \002(\t\022\r\n\005value\030"
    "\002 \001(\t\022\032\n\022value_bytes_string\030\003 \001(\014\"\244\002\n\006Vo"
    "lume\022F\n\025access_control_policy\030\001 \002(\0162\'.xt"
    "reemfs.pbrpc.AccessControlPolicyType\022\?\n\027"
    "default_striping_policy\030\002 \002(\0132\036.xtreemfs"
    ".pbrpc.StripingPolicy\022\n\n\002id\030\003 \002(\t\022\014\n\004mod"
    "e\030\004 \002(\007\022\014\n\004name\030\005 \002(\t\022\026\n\016owner_group_id\030"
    "\006 \002(\t\022\025\n\rowner_user_id\030\007 \002(\t\022+\n\005attrs\030\010 "
    "\003(\0132\034.xtreemfs.pbrpc.KeyValuePair\022\r\n\005quo"
    "ta\030\t \001(\006\"2\n\007Volumes\022\'\n\007volumes\030\001 \003(\0132\026.x"
    "treemfs.pbrpc.Volume\"\310\002\n\007StatVFS\022\r\n\005bsiz"
    "e\030\001 \002(\007\022\016\n\006bavail\030\002 \002(\006\022\r\n\005bfree\030\r \001(\006\022\016"
    "\n\006blocks\030\003 \002(\006\022\014\n\004fsid\030\004 \002(\t\022\017\n\007namemax\030"
    "\005 \002(\007\022F\n\025access_control_policy\030\006 \002(\0162\'.x"
    "treemfs.pbrpc.AccessControlPolicyType\022\?\n"
    "\027default_striping_policy\030\007 \002(\0132\036.xtreemf"
    "s.pbrpc.StripingPolicy\022\014\n\004etag\030\010 \002(\006\022\014\n\004"
    "mode\030\t \002(\007\022\014\n\004name\030\n \002(\t\022\026\n\016owner_group_"
    "id\030\013 \002(\t\022\025\n\rowner_user_id\030\014 \002(\t\"i\n\017fseta"
    "ttrRequest\022#\n\005stbuf\030\001 \002(\0132\024.xtreemfs.pbr"
    "pc.Stat\022\016\n\006to_set\030\002 \002(\007\022!\n\003cap\030\003 \002(\0132\024.x"
    "treemfs.pbrpc.XCap\"G\n\016getattrRequest\022\023\n\013"
    "volume_name\030\001 \002(\t\022\014\n\004path\030\002 \002(\t\022\022\n\nknown"
    "_etag\030\003 \002(\006\"6\n\017getattrResponse\022#\n\005stbuf\030"
    "\001 \001(\0132\024.xtreemfs.pbrpc.Stat\"B\n\017getxattrR"
    "equest\022\023\n\013volume_name\030\001 \002(\t\022\014\n\004path\030\002 \002("
    "\t\022\014\n\004name\030\003 \002(\t\"=\n\020getxattrResponse\022\r\n\005v"
    "alue\030\001 \002(\t\022\032\n\022value_bytes_string\030\002 \001(\014\"J"
    "\n\013linkRequest\022\023\n\013volume_name\030\001 \002(\t\022\023\n\013ta"
    "rget_path\030\002 \002(\t\022\021\n\tlink_path\030\003 \002(\t\"I\n\020li"
    "stxattrRequest\022\023\n\013volume_name\030\001 \002(\t\022\014\n\004p"
    "ath\030\002 \002(\t\022\022\n\nnames_only\030\003 \002(\010\":\n\021listxat"
    "trResponse\022%\n\006xattrs\030\001 \003(\0132\025.xtreemfs.pb"
    "rpc.XAttr\"\?\n\014mkdirRequest\022\023\n\013volume_name"
    "\030\001 \002(\t\022\014\n\004path\030\002 \002(\t\022\014\n\004mode\030\003 \002(\007\"\232\001\n\013o"
    "penRequest\022\023\n\013volume_name\030\001 \002(\t\022\014\n\004path\030"
    "\002 \002(\t\022\r\n\005flags\030\003 \002(\007\022\014\n\004mode\030\004 \002(\007\022\022\n\nat"
    "tributes\030\005 \002(\007\0227\n\013coordinates\030\006 \001(\0132\".xt"
    "reemfs.pbrpc.VivaldiCoordinates\"S\n\014openR"
    "esponse\022.\n\005creds\030\001 \002(\0132\037.xtreemfs.pbrpc."
    "FileCredentials\022\023\n\013timestamp_s\030\002 \002(\007\"\250\001\n"
    "\016readdirRequest\022\023\n\013volume_name\030\001 \002(\t\022\014\n\004"
    "path\030\002 \002(\t\022\022\n\nknown_etag\030\003 \002(\006\022%\n\035limit_"
    "directory_entries_count\030\004 \002(\007\022\022\n\nnames_o"
    "nly\030\005 \002(\010\022$\n\034seen_directory_entries_coun"
    "t\030\006 \002(\006\"4\n\017readlinkRequest\022\023\n\013volume_nam"
    "e\030\001 \002(\t\022\014\n\004path\030\002 \002(\t\",\n\020readlinkRespons"
    "e\022\030\n\020link_target_path\030\001 \003(\t\"E\n\022removexat"
    "trRequest\022\023\n\013volume_name\030\001 \002(\t\022\014\n\004path\030\002"
    " \002(\t\022\014\n\004name\030\003 \002(\t\"N\n\rrenameRequest\022\023\n\013v"
    "olume_name\030\001 \002(\t\022\023\n\013source_path\030\002 \002(\t\022\023\n"
    "\013target_path\030\003 \002(\t\"U\n\016renameResponse\022\023\n\013"
    "timestamp_s\030\001 \002(\007\022.\n\005creds\030\002 \001(\0132\037.xtree"
    "mfs.pbrpc.FileCredentials\"1\n\014rmdirReques"
    "t\022\023\n\013volume_name\030\001 \002(\t\022\014\n\004path\030\002 \002(\t\"h\n\016"
    "setattrRequest\022\023\n\013volume_name\030\001 \002(\t\022\014\n\004p"
    "ath\030\002 \002(\t\022#\n\005stbuf\030\003 \002(\0132\024.xtreemfs.pbrp"
    "c.Stat\022\016\n\006to_set\030\004 \002(\007\"|\n\017setxattrReques"
    "t\022\023\n\013volume_name\030\001 \002(\t\022\014\n\004path\030\002 \002(\t\022\014\n\004"
    "name\030\003 \002(\t\022\r\n\005value\030\004 \002(\t\022\032\n\022value_bytes"
    "_string\030\006 \001(\014\022\r\n\005flags\030\005 \002(\007\"9\n\016statvfsR"
    "equest\022\023\n\013volume_name\030\001 \002(\t\022\022\n\nknown_eta"
    "g\030\005 \002(\006\"M\n\016symlinkRequest\022\023\n\013volume_name"
    "\030\001 \002(\t\022\023\n\013target_path\030\002 \002(\t\022\021\n\tlink_path"
    "\030\003 \002(\t\"2\n\runlinkRequest\022\023\n\013volume_name\030\001"
    " \002(\t\022\014\n\004path\030\002 \002(\t\"U\n\016unlinkResponse\022\023\n\013"
    "timestamp_s\030\001 \002(\007\022.\n\005creds\030\002 \001(\0132\037.xtree"
    "mfs.pbrpc.FileCredentials\"A\n\raccessReque"
    "st\022\023\n\013volume_name\030\001 \002(\t\022\014\n\004path\030\002 \002(\t\022\r\n"
    "\005flags\030\003 \002(\007\"Z\n!xtreemfs_check_file_exis"
    "tsRequest\022\021\n\tvolume_id\030\001 \002(\t\022\020\n\010file_ids"
    "\030\002 \003(\t\022\020\n\010osd_uuid\030\003 \002(\t\"\315\001\n\"xtreemfs_ch"
    "eck_file_existsResponse\022\025\n\rvolume_exists"
    "\030\001 \002(\010\022V\n\013file_states\030\002 \003(\0162=.xtreemfs.p"
    "brpc.xtreemfs_check_file_existsResponse."
    "FILE_STATEB\002\020\001\"8\n\nFILE_STATE\022\013\n\007DELETED\020"
    "\000\022\016\n\nREGISTERED\020\001\022\r\n\tABANDONED\020\002\":\n%xtre"
    "emfs_dump_restore_databaseRequest\022\021\n\tdum"
    "p_file\030\001 \002(\t\"i\n!xtreemfs_get_suitable_os"
    "dsRequest\022\017\n\007file_id\030\001 \001(\t\022\014\n\004path\030\003 \001(\t"
    "\022\023\n\013volume_name\030\004 \001(\t\022\020\n\010num_osds\030\002 \002(\007\""
    "7\n\"xtreemfs_get_suitable_osdsResponse\022\021\n"
    "\tosd_uuids\030\001 \003(\t\"(\n\021timestampResponse\022\023\n"
    "\013timestamp_s\030\001 \002(\007\"!\n\rstringMessage\022\020\n\010a"
    "_string\030\001 \002(\t\"\'\n\027xtreemfs_listdirRequest"
    "\022\014\n\004path\030\001 \002(\t\")\n\030xtreemfs_listdirRespon"
    "se\022\r\n\005names\030\001 \003(\t\"\177\n\033xtreemfs_replica_ad"
    "dRequest\022\017\n\007file_id\030\001 \001(\t\022\014\n\004path\030\003 \001(\t\022"
    "\023\n\013volume_name\030\004 \001(\t\022,\n\013new_replica\030\002 \002("
    "\0132\027.xtreemfs.pbrpc.Replica\"R\n\034xtreemfs_r"
    "eplica_listRequest\022\017\n\007file_id\030\001 \001(\t\022\014\n\004p"
    "ath\030\002 \001(\t\022\023\n\013volume_name\030\003 \001(\t\"u\n\033xtreem"
    "fs_get_xlocsetRequest\022\017\n\007file_id\030\001 \001(\t\022\014"
    "\n\004path\030\002 \001(\t\022\023\n\013volume_name\030\003 \001(\t\022\"\n\004xca"
    "p\030\004 \001(\0132\024.xtreemfs.pbrpc.XCap\"f\n\036xtreemf"
    "s_replica_removeRequest\022\017\n\007file_id\030\001 \001(\t"
    "\022\014\n\004path\030\003 \001(\t\022\023\n\013volume_name\030\004 \001(\t\022\020\n\010o"
    "sd_uuid\030\002 \002(\t\"|\n\034xtreemfs_restore_fileRe"
    "quest\022\021\n\tfile_path\030\001 \002(\t\022\017\n\007file_id\030\002 \002("
    "\t\022\021\n\tfile_size\030\003 \002(\006\022\020\n\010osd_uuid\030\004 \002(\t\022\023"
    "\n\013stripe_size\030\005 \002(\007\",\n\025xtreemfs_rmvolReq"
    "uest\022\023\n\013volume_name\030\001 \002(\t\"\321\001\n xtreemfs_u"
    "pdate_file_sizeRequest\022\"\n\004xcap\030\001 \002(\0132\024.x"
    "treemfs.pbrpc.XCap\022<\n\022osd_write_response"
    "\030\002 \002(\0132 .xtreemfs.pbrpc.OSDWriteResponse"
    "\022\022\n\nclose_file\030\003 \001(\010\0227\n\013coordinates\030\004 \001("
    "\0132\".xtreemfs.pbrpc.VivaldiCoordinates\"S\n"
    ")xtreemfs_set_replica_update_policyReque"
    "st\022\017\n\007file_id\030\001 \002(\t\022\025\n\rupdate_policy\030\002 \002"
    "(\t\"G\n*xtreemfs_set_replica_update_policy"
    "Response\022\031\n\021old_update_policy\030\001 \002(\t\"E\n#x"
    "treemfs_set_read_only_xattrRequest\022\017\n\007fi"
    "le_id\030\001 \002(\t\022\r\n\005value\030\002 \002(\010\"7\n$xtreemfs_s"
    "et_read_only_xattrResponse\022\017\n\007was_set\030\001 "
    "\002(\010\"7\n$xtreemfs_get_file_credentialsRequ"
    "est\022\017\n\007file_id\030\001 \002(\t*\242\001\n\010Setattrs\022\020\n\014SET"
    "ATTR_MODE\020\001\022\017\n\013SETATTR_UID\020\002\022\017\n\013SETATTR_"
    "GID\020\004\022\020\n\014SETATTR_SIZE\020\010\022\021\n\rSETATTR_ATIME"
    "\020\020\022\021\n\rSETATTR_MTIME\020 \022\021\n\rSETATTR_CTIME\020@"
    "\022\027\n\022SETATTR_ATTRIBUTES\020\200\001*>\n\013XATTR_FLAGS"
    "\022\026\n\022XATTR_FLAGS_CREATE\020\001\022\027\n\023XATTR_FLAGS_"
    "REPLACE\020\002*j\n\014ACCESS_FLAGS\022\025\n\021ACCESS_FLAG"
    "S_F_OK\020\000\022\025\n\021ACCESS_FLAGS_X_OK\020\001\022\025\n\021ACCES"
    "S_FLAGS_W_OK\020\002\022\025\n\021ACCESS_FLAGS_R_OK\020\0042\203 "
    "\n\nMRCService\022S\n\010fsetattr\022\037.xtreemfs.pbrp"
    "c.fsetattrRequest\032\035.xtreemfs.pbrpc.empty"
    "Response\"\007\215\265\030\002\000\000\000\022@\n\tftruncate\022\024.xtreemf"
    "s.pbrpc.XCap\032\024.xtreemfs.pbrpc.XCap\"\007\215\265\030\003"
    "\000\000\000\022S\n\007getattr\022\036.xtreemfs.pbrpc.getattrR"
    "equest\032\037.xtreemfs.pbrpc.getattrResponse\""
    "\007\215\265\030\004\000\000\000\022V\n\010getxattr\022\037.xtreemfs.pbrpc.ge"
    "txattrRequest\032 .xtreemfs.pbrpc.getxattrR"
    "esponse\"\007\215\265\030\005\000\000\000\022O\n\004link\022\033.xtreemfs.pbrp"
    "c.linkRequest\032!.xtreemfs.pbrpc.timestamp"
    "Response\"\007\215\265\030\006\000\000\000\022Y\n\tlistxattr\022 .xtreemf"
    "s.pbrpc.listxattrRequest\032!.xtreemfs.pbrp"
    "c.listxattrResponse\"\007\215\265\030\007\000\000\000\022Q\n\005mkdir\022\034."
    "xtreemfs.pbrpc.mkdirRequest\032!.xtreemfs.p"
    "brpc.timestampResponse\"\007\215\265\030\010\000\000\000\022J\n\004open\022"
    "\033.xtreemfs.pbrpc.openRequest\032\034.xtreemfs."
    "pbrpc.openResponse\"\007\215\265\030\t\000\000\000\022T\n\007readdir\022\036"
    ".xtreemfs.pbrpc.readdirRequest\032 .xtreemf"
    "s.pbrpc.DirectoryEntries\"\007\215\265\030\n\000\000\000\022V\n\010rea"
    "dlink\022\037.xtreemfs.pbrpc.readlinkRequest\032 "
    ".xtreemfs.pbrpc.readlinkResponse\"\007\215\265\030\013\000\000"
    "\000\022]\n\013removexattr\022\".xtreemfs.pbrpc.remove"
    "xattrRequest\032!.xtreemfs.pbrpc.timestampR"
    "esponse\"\007\215\265\030\014\000\000\000\022P\n\006rename\022\035.xtreemfs.pb"
    "rpc.renameRequest\032\036.xtreemfs.pbrpc.renam"
    "eResponse\"\007\215\265\030\r\000\000\000\022Q\n\005rmdir\022\034.xtreemfs.p"
    "brpc.rmdirRequest\032!.xtreemfs.pbrpc.times"
    "tampResponse\"\007\215\265\030\016\000\000\000\022U\n\007setattr\022\036.xtree"
    "mfs.pbrpc.setattrRequest\032!.xtreemfs.pbrp"
    "c.timestampResponse\"\007\215\265\030\017\000\000\000\022W\n\010setxattr"
    "\022\037.xtreemfs.pbrpc.setxattrRequest\032!.xtre"
    "emfs.pbrpc.timestampResponse\"\007\215\265\030\020\000\000\000\022K\n"
    "\007statvfs\022\036.xtreemfs.pbrpc.statvfsRequest"
    "\032\027.xtreemfs.pbrpc.StatVFS\"\007\215\265\030\021\000\000\000\022U\n\007sy"
    "mlink\022\036.xtreemfs.pbrpc.symlinkRequest\032!."
    "xtreemfs.pbrpc.timestampResponse\"\007\215\265\030\022\000\000"
    "\000\022P\n\006unlink\022\035.xtreemfs.pbrpc.unlinkReque"
    "st\032\036.xtreemfs.pbrpc.unlinkResponse\"\007\215\265\030\023"
    "\000\000\000\022O\n\006access\022\035.xtreemfs.pbrpc.accessReq"
    "uest\032\035.xtreemfs.pbrpc.emptyResponse\"\007\215\265\030"
    "\024\000\000\000\022[\n\023xtreemfs_checkpoint\022\034.xtreemfs.p"
    "brpc.emptyRequest\032\035.xtreemfs.pbrpc.empty"
    "Response\"\007\215\265\030\036\000\000\000\022\214\001\n\032xtreemfs_check_fil"
    "e_exists\0221.xtreemfs.pbrpc.xtreemfs_check"
    "_file_existsRequest\0322.xtreemfs.pbrpc.xtr"
    "eemfs_check_file_existsResponse\"\007\215\265\030\037\000\000\000"
    "\022w\n\026xtreemfs_dump_database\0225.xtreemfs.pb"
    "rpc.xtreemfs_dump_restore_databaseReques"
    "t\032\035.xtreemfs.pbrpc.emptyResponse\"\007\215\265\030 \000\000"
    "\000\022\214\001\n\032xtreemfs_get_suitable_osds\0221.xtree"
    "mfs.pbrpc.xtreemfs_get_suitable_osdsRequ"
    "est\0322.xtreemfs.pbrpc.xtreemfs_get_suitab"
    "le_osdsResponse\"\007\215\265\030!\000\000\000\022`\n\027xtreemfs_int"
    "ernal_debug\022\035.xtreemfs.pbrpc.stringMessa"
    "ge\032\035.xtreemfs.pbrpc.stringMessage\"\007\215\265\030\"\000"
    "\000\000\022n\n\020xtreemfs_listdir\022\'.xtreemfs.pbrpc."
    "xtreemfs_listdirRequest\032(.xtreemfs.pbrpc"
    ".xtreemfs_listdirResponse\"\007\215\265\030#\000\000\000\022P\n\016xt"
    "reemfs_lsvol\022\034.xtreemfs.pbrpc.emptyReque"
    "st\032\027.xtreemfs.pbrpc.Volumes\"\007\215\265\030$\000\000\000\022P\n\016"
    "xtreemfs_mkvol\022\026.xtreemfs.pbrpc.Volume\032\035"
    ".xtreemfs.pbrpc.emptyResponse\"\007\215\265\030/\000\000\000\022P"
    "\n\031xtreemfs_renew_capability\022\024.xtreemfs.p"
    "brpc.XCap\032\024.xtreemfs.pbrpc.XCap\"\007\215\265\030%\000\000\000"
    "\022f\n\036xtreemfs_replication_to_master\022\034.xtr"
    "eemfs.pbrpc.emptyRequest\032\035.xtreemfs.pbrp"
    "c.emptyResponse\"\007\215\265\030&\000\000\000\022k\n\024xtreemfs_rep"
    "lica_add\022+.xtreemfs.pbrpc.xtreemfs_repli"
    "ca_addRequest\032\035.xtreemfs.pbrpc.emptyResp"
    "onse\"\007\215\265\030\'\000\000\000\022h\n\025xtreemfs_replica_list\022,"
    ".xtreemfs.pbrpc.xtreemfs_replica_listReq"
    "uest\032\030.xtreemfs.pbrpc.Replicas\"\007\215\265\030(\000\000\000\022"
    "s\n\027xtreemfs_replica_remove\022..xtreemfs.pb"
    "rpc.xtreemfs_replica_removeRequest\032\037.xtr"
    "eemfs.pbrpc.FileCredentials\"\007\215\265\030)\000\000\000\022z\n\031"
    "xtreemfs_restore_database\0225.xtreemfs.pbr"
    "pc.xtreemfs_dump_restore_databaseRequest"
    "\032\035.xtreemfs.pbrpc.emptyResponse\"\007\215\265\030*\000\000\000"
    "\022m\n\025xtreemfs_restore_file\022,.xtreemfs.pbr"
    "pc.xtreemfs_restore_fileRequest\032\035.xtreem"
    "fs.pbrpc.emptyResponse\"\007\215\265\030+\000\000\000\022_\n\016xtree"
    "mfs_rmvol\022%.xtreemfs.pbrpc.xtreemfs_rmvo"
    "lRequest\032\035.xtreemfs.pbrpc.emptyResponse\""
    "\007\215\265\030,\000\000\000\022Y\n\021xtreemfs_shutdown\022\034.xtreemfs"
    ".pbrpc.emptyRequest\032\035.xtreemfs.pbrpc.emp"
    "tyResponse\"\007\215\265\030-\000\000\000\022y\n\031xtreemfs_update_f"
    "ile_size\0220.xtreemfs.pbrpc.xtreemfs_updat"
    "e_file_sizeRequest\032!.xtreemfs.pbrpc.time"
    "stampResponse\"\007\215\265\030.\000\000\000\022\244\001\n\"xtreemfs_set_"
    "replica_update_policy\0229.xtreemfs.pbrpc.x"
    "treemfs_set_replica_update_policyRequest"
    "\032:.xtreemfs.pbrpc.xtreemfs_set_replica_u"
    "pdate_policyResponse\"\007\215\265\0300\000\000\000\022\222\001\n\034xtreem"
    "fs_set_read_only_xattr\0223.xtreemfs.pbrpc."
    "xtreemfs_set_read_only_xattrRequest\0324.xt"
    "reemfs.pbrpc.xtreemfs_set_read_only_xatt"
    "rResponse\"\007\215\265\0301\000\000\000\022\177\n\035xtreemfs_get_file_"
    "credentials\0224.xtreemfs.pbrpc.xtreemfs_ge"
    "t_file_credentialsRequest\032\037.xtreemfs.pbr"
    "pc.FileCredentials\"\007\215\265\0302\000\000\000\022e\n\024xtreemfs_"
    "get_xlocset\022+.xtreemfs.pbrpc.xtreemfs_ge"
    "t_xlocsetRequest\032\027.xtreemfs.pbrpc.XLocSe"
    "t\"\007\215\265\0303\000\000\000\032\007\225\265\030!N\000\000B(\n&org.xtreemfs.pbrp"
    "c.generatedinterfaces", 9581);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "xtreemfs/MRC.proto", &protobuf_RegisterTypes);
  Stat::default_instance_ = new Stat();
  DirectoryEntry::default_instance_ = new DirectoryEntry();
  DirectoryEntries::default_instance_ = new DirectoryEntries();
  XAttr::default_instance_ = new XAttr();
  Volume::default_instance_ = new Volume();
  Volumes::default_instance_ = new Volumes();
  StatVFS::default_instance_ = new StatVFS();
  fsetattrRequest::default_instance_ = new fsetattrRequest();
  getattrRequest::default_instance_ = new getattrRequest();
  getattrResponse::default_instance_ = new getattrResponse();
  getxattrRequest::default_instance_ = new getxattrRequest();
  getxattrResponse::default_instance_ = new getxattrResponse();
  linkRequest::default_instance_ = new linkRequest();
  listxattrRequest::default_instance_ = new listxattrRequest();
  listxattrResponse::default_instance_ = new listxattrResponse();
  mkdirRequest::default_instance_ = new mkdirRequest();
  openRequest::default_instance_ = new openRequest();
  openResponse::default_instance_ = new openResponse();
  readdirRequest::default_instance_ = new readdirRequest();
  readlinkRequest::default_instance_ = new readlinkRequest();
  readlinkResponse::default_instance_ = new readlinkResponse();
  removexattrRequest::default_instance_ = new removexattrRequest();
  renameRequest::default_instance_ = new renameRequest();
  renameResponse::default_instance_ = new renameResponse();
  rmdirRequest::default_instance_ = new rmdirRequest();
  setattrRequest::default_instance_ = new setattrRequest();
  setxattrRequest::default_instance_ = new setxattrRequest();
  statvfsRequest::default_instance_ = new statvfsRequest();
  symlinkRequest::default_instance_ = new symlinkRequest();
  unlinkRequest::default_instance_ = new unlinkRequest();
  unlinkResponse::default_instance_ = new unlinkResponse();
  accessRequest::default_instance_ = new accessRequest();
  xtreemfs_check_file_existsRequest::default_instance_ = new xtreemfs_check_file_existsRequest();
  xtreemfs_check_file_existsResponse::default_instance_ = new xtreemfs_check_file_existsResponse();
  xtreemfs_dump_restore_databaseRequest::default_instance_ = new xtreemfs_dump_restore_databaseRequest();
  xtreemfs_get_suitable_osdsRequest::default_instance_ = new xtreemfs_get_suitable_osdsRequest();
  xtreemfs_get_suitable_osdsResponse::default_instance_ = new xtreemfs_get_suitable_osdsResponse();
  timestampResponse::default_instance_ = new timestampResponse();
  stringMessage::default_instance_ = new stringMessage();
  xtreemfs_listdirRequest::default_instance_ = new xtreemfs_listdirRequest();
  xtreemfs_listdirResponse::default_instance_ = new xtreemfs_listdirResponse();
  xtreemfs_replica_addRequest::default_instance_ = new xtreemfs_replica_addRequest();
  xtreemfs_replica_listRequest::default_instance_ = new xtreemfs_replica_listRequest();
  xtreemfs_get_xlocsetRequest::default_instance_ = new xtreemfs_get_xlocsetRequest();
  xtreemfs_replica_removeRequest::default_instance_ = new xtreemfs_replica_removeRequest();
  xtreemfs_restore_fileRequest::default_instance_ = new xtreemfs_restore_fileRequest();
  xtreemfs_rmvolRequest::default_instance_ = new xtreemfs_rmvolRequest();
  xtreemfs_update_file_sizeRequest::default_instance_ = new xtreemfs_update_file_sizeRequest();
  xtreemfs_set_replica_update_policyRequest::default_instance_ = new xtreemfs_set_replica_update_policyRequest();
  xtreemfs_set_replica_update_policyResponse::default_instance_ = new xtreemfs_set_replica_update_policyResponse();
  xtreemfs_set_read_only_xattrRequest::default_instance_ = new xtreemfs_set_read_only_xattrRequest();
  xtreemfs_set_read_only_xattrResponse::default_instance_ = new xtreemfs_set_read_only_xattrResponse();
  xtreemfs_get_file_credentialsRequest::default_instance_ = new xtreemfs_get_file_credentialsRequest();
  Stat::default_instance_->InitAsDefaultInstance();
  DirectoryEntry::default_instance_->InitAsDefaultInstance();
  DirectoryEntries::default_instance_->InitAsDefaultInstance();
  XAttr::default_instance_->InitAsDefaultInstance();
  Volume::default_instance_->InitAsDefaultInstance();
  Volumes::default_instance_->InitAsDefaultInstance();
  StatVFS::default_instance_->InitAsDefaultInstance();
  fsetattrRequest::default_instance_->InitAsDefaultInstance();
  getattrRequest::default_instance_->InitAsDefaultInstance();
  getattrResponse::default_instance_->InitAsDefaultInstance();
  getxattrRequest::default_instance_->InitAsDefaultInstance();
  getxattrResponse::default_instance_->InitAsDefaultInstance();
  linkRequest::default_instance_->InitAsDefaultInstance();
  listxattrRequest::default_instance_->InitAsDefaultInstance();
  listxattrResponse::default_instance_->InitAsDefaultInstance();
  mkdirRequest::default_instance_->InitAsDefaultInstance();
  openRequest::default_instance_->InitAsDefaultInstance();
  openResponse::default_instance_->InitAsDefaultInstance();
  readdirRequest::default_instance_->InitAsDefaultInstance();
  readlinkRequest::default_instance_->InitAsDefaultInstance();
  readlinkResponse::default_instance_->InitAsDefaultInstance();
  removexattrRequest::default_instance_->InitAsDefaultInstance();
  renameRequest::default_instance_->InitAsDefaultInstance();
  renameResponse::default_instance_->InitAsDefaultInstance();
  rmdirRequest::default_instance_->InitAsDefaultInstance();
  setattrRequest::default_instance_->InitAsDefaultInstance();
  setxattrRequest::default_instance_->InitAsDefaultInstance();
  statvfsRequest::default_instance_->InitAsDefaultInstance();
  symlinkRequest::default_instance_->InitAsDefaultInstance();
  unlinkRequest::default_instance_->InitAsDefaultInstance();
  unlinkResponse::default_instance_->InitAsDefaultInstance();
  accessRequest::default_instance_->InitAsDefaultInstance();
  xtreemfs_check_file_existsRequest::default_instance_->InitAsDefaultInstance();
  xtreemfs_check_file_existsResponse::default_instance_->InitAsDefaultInstance();
  xtreemfs_dump_restore_databaseRequest::default_instance_->InitAsDefaultInstance();
  xtreemfs_get_suitable_osdsRequest::default_instance_->InitAsDefaultInstance();
  xtreemfs_get_suitable_osdsResponse::default_instance_->InitAsDefaultInstance();
  timestampResponse::default_instance_->InitAsDefaultInstance();
  stringMessage::default_instance_->InitAsDefaultInstance();
  xtreemfs_listdirRequest::default_instance_->InitAsDefaultInstance();
  xtreemfs_listdirResponse::default_instance_->InitAsDefaultInstance();
  xtreemfs_replica_addRequest::default_instance_->InitAsDefaultInstance();
  xtreemfs_replica_listRequest::default_instance_->InitAsDefaultInstance();
  xtreemfs_get_xlocsetRequest::default_instance_->InitAsDefaultInstance();
  xtreemfs_replica_removeRequest::default_instance_->InitAsDefaultInstance();
  xtreemfs_restore_fileRequest::default_instance_->InitAsDefaultInstance();
  xtreemfs_rmvolRequest::default_instance_->InitAsDefaultInstance();
  xtreemfs_update_file_sizeRequest::default_instance_->InitAsDefaultInstance();
  xtreemfs_set_replica_update_policyRequest::default_instance_->InitAsDefaultInstance();
  xtreemfs_set_replica_update_policyResponse::default_instance_->InitAsDefaultInstance();
  xtreemfs_set_read_only_xattrRequest::default_instance_->InitAsDefaultInstance();
  xtreemfs_set_read_only_xattrResponse::default_instance_->InitAsDefaultInstance();
  xtreemfs_get_file_credentialsRequest::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_xtreemfs_2fMRC_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_xtreemfs_2fMRC_2eproto {
  StaticDescriptorInitializer_xtreemfs_2fMRC_2eproto() {
    protobuf_AddDesc_xtreemfs_2fMRC_2eproto();
  }
} static_descriptor_initializer_xtreemfs_2fMRC_2eproto_;
const ::google::protobuf::EnumDescriptor* Setattrs_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Setattrs_descriptor_;
}
bool Setattrs_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 4:
    case 8:
    case 16:
    case 32:
    case 64:
    case 128:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* XATTR_FLAGS_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return XATTR_FLAGS_descriptor_;
}
bool XATTR_FLAGS_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ACCESS_FLAGS_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ACCESS_FLAGS_descriptor_;
}
bool ACCESS_FLAGS_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 4:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int Stat::kDevFieldNumber;
const int Stat::kInoFieldNumber;
const int Stat::kModeFieldNumber;
const int Stat::kNlinkFieldNumber;
const int Stat::kUserIdFieldNumber;
const int Stat::kGroupIdFieldNumber;
const int Stat::kSizeFieldNumber;
const int Stat::kAtimeNsFieldNumber;
const int Stat::kMtimeNsFieldNumber;
const int Stat::kCtimeNsFieldNumber;
const int Stat::kBlksizeFieldNumber;
const int Stat::kEtagFieldNumber;
const int Stat::kTruncateEpochFieldNumber;
const int Stat::kAttributesFieldNumber;
#endif  // !_MSC_VER

Stat::Stat()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Stat::InitAsDefaultInstance() {
}

Stat::Stat(const Stat& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Stat::SharedCtor() {
  _cached_size_ = 0;
  dev_ = GOOGLE_ULONGLONG(0);
  ino_ = GOOGLE_ULONGLONG(0);
  mode_ = 0u;
  nlink_ = 0u;
  user_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  group_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  size_ = GOOGLE_ULONGLONG(0);
  atime_ns_ = GOOGLE_ULONGLONG(0);
  mtime_ns_ = GOOGLE_ULONGLONG(0);
  ctime_ns_ = GOOGLE_ULONGLONG(0);
  blksize_ = 0u;
  etag_ = GOOGLE_ULONGLONG(0);
  truncate_epoch_ = 0u;
  attributes_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Stat::~Stat() {
  SharedDtor();
}

void Stat::SharedDtor() {
  if (user_id_ != &::google::protobuf::internal::kEmptyString) {
    delete user_id_;
  }
  if (group_id_ != &::google::protobuf::internal::kEmptyString) {
    delete group_id_;
  }
  if (this != default_instance_) {
  }
}

void Stat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Stat::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Stat_descriptor_;
}

const Stat& Stat::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_xtreemfs_2fMRC_2eproto();
  return *default_instance_;
}

Stat* Stat::default_instance_ = NULL;

Stat* Stat::New() const {
  return new Stat;
}

void Stat::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    dev_ = GOOGLE_ULONGLONG(0);
    ino_ = GOOGLE_ULONGLONG(0);
    mode_ = 0u;
    nlink_ = 0u;
    if (has_user_id()) {
      if (user_id_ != &::google::protobuf::internal::kEmptyString) {
        user_id_->clear();
      }
    }
    if (has_group_id()) {
      if (group_id_ != &::google::protobuf::internal::kEmptyString) {
        group_id_->clear();
      }
    }
    size_ = GOOGLE_ULONGLONG(0);
    atime_ns_ = GOOGLE_ULONGLONG(0);
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    mtime_ns_ = GOOGLE_ULONGLONG(0);
    ctime_ns_ = GOOGLE_ULONGLONG(0);
    blksize_ = 0u;
    etag_ = GOOGLE_ULONGLONG(0);
    truncate_epoch_ = 0u;
    attributes_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Stat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed64 dev = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &dev_)));
          set_has_dev();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_ino;
        break;
      }

      // required fixed64 ino = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_ino:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &ino_)));
          set_has_ino();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_mode;
        break;
      }

      // required fixed32 mode = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_mode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &mode_)));
          set_has_mode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_nlink;
        break;
      }

      // required fixed32 nlink = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_nlink:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &nlink_)));
          set_has_nlink();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_user_id;
        break;
      }

      // required string user_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->user_id().data(), this->user_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_group_id;
        break;
      }

      // required string group_id = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_group_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_group_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->group_id().data(), this->group_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(57)) goto parse_size;
        break;
      }

      // required fixed64 size = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &size_)));
          set_has_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(65)) goto parse_atime_ns;
        break;
      }

      // required fixed64 atime_ns = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_atime_ns:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &atime_ns_)));
          set_has_atime_ns();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(73)) goto parse_mtime_ns;
        break;
      }

      // required fixed64 mtime_ns = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_mtime_ns:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &mtime_ns_)));
          set_has_mtime_ns();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(81)) goto parse_ctime_ns;
        break;
      }

      // required fixed64 ctime_ns = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_ctime_ns:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &ctime_ns_)));
          set_has_ctime_ns();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(93)) goto parse_blksize;
        break;
      }

      // required fixed32 blksize = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_blksize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &blksize_)));
          set_has_blksize();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(97)) goto parse_etag;
        break;
      }

      // optional fixed64 etag = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_etag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &etag_)));
          set_has_etag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(109)) goto parse_truncate_epoch;
        break;
      }

      // required fixed32 truncate_epoch = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_truncate_epoch:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &truncate_epoch_)));
          set_has_truncate_epoch();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(117)) goto parse_attributes;
        break;
      }

      // optional fixed32 attributes = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_attributes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &attributes_)));
          set_has_attributes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Stat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed64 dev = 1;
  if (has_dev()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->dev(), output);
  }

  // required fixed64 ino = 2;
  if (has_ino()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->ino(), output);
  }

  // required fixed32 mode = 3;
  if (has_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(3, this->mode(), output);
  }

  // required fixed32 nlink = 4;
  if (has_nlink()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(4, this->nlink(), output);
  }

  // required string user_id = 5;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user_id().data(), this->user_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->user_id(), output);
  }

  // required string group_id = 6;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->group_id().data(), this->group_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->group_id(), output);
  }

  // required fixed64 size = 7;
  if (has_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(7, this->size(), output);
  }

  // required fixed64 atime_ns = 8;
  if (has_atime_ns()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(8, this->atime_ns(), output);
  }

  // required fixed64 mtime_ns = 9;
  if (has_mtime_ns()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(9, this->mtime_ns(), output);
  }

  // required fixed64 ctime_ns = 10;
  if (has_ctime_ns()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(10, this->ctime_ns(), output);
  }

  // required fixed32 blksize = 11;
  if (has_blksize()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(11, this->blksize(), output);
  }

  // optional fixed64 etag = 12;
  if (has_etag()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(12, this->etag(), output);
  }

  // required fixed32 truncate_epoch = 13;
  if (has_truncate_epoch()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(13, this->truncate_epoch(), output);
  }

  // optional fixed32 attributes = 14;
  if (has_attributes()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(14, this->attributes(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Stat::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed64 dev = 1;
  if (has_dev()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->dev(), target);
  }

  // required fixed64 ino = 2;
  if (has_ino()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->ino(), target);
  }

  // required fixed32 mode = 3;
  if (has_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(3, this->mode(), target);
  }

  // required fixed32 nlink = 4;
  if (has_nlink()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(4, this->nlink(), target);
  }

  // required string user_id = 5;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user_id().data(), this->user_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->user_id(), target);
  }

  // required string group_id = 6;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->group_id().data(), this->group_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->group_id(), target);
  }

  // required fixed64 size = 7;
  if (has_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(7, this->size(), target);
  }

  // required fixed64 atime_ns = 8;
  if (has_atime_ns()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(8, this->atime_ns(), target);
  }

  // required fixed64 mtime_ns = 9;
  if (has_mtime_ns()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(9, this->mtime_ns(), target);
  }

  // required fixed64 ctime_ns = 10;
  if (has_ctime_ns()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(10, this->ctime_ns(), target);
  }

  // required fixed32 blksize = 11;
  if (has_blksize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(11, this->blksize(), target);
  }

  // optional fixed64 etag = 12;
  if (has_etag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(12, this->etag(), target);
  }

  // required fixed32 truncate_epoch = 13;
  if (has_truncate_epoch()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(13, this->truncate_epoch(), target);
  }

  // optional fixed32 attributes = 14;
  if (has_attributes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(14, this->attributes(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Stat::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed64 dev = 1;
    if (has_dev()) {
      total_size += 1 + 8;
    }

    // required fixed64 ino = 2;
    if (has_ino()) {
      total_size += 1 + 8;
    }

    // required fixed32 mode = 3;
    if (has_mode()) {
      total_size += 1 + 4;
    }

    // required fixed32 nlink = 4;
    if (has_nlink()) {
      total_size += 1 + 4;
    }

    // required string user_id = 5;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user_id());
    }

    // required string group_id = 6;
    if (has_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->group_id());
    }

    // required fixed64 size = 7;
    if (has_size()) {
      total_size += 1 + 8;
    }

    // required fixed64 atime_ns = 8;
    if (has_atime_ns()) {
      total_size += 1 + 8;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required fixed64 mtime_ns = 9;
    if (has_mtime_ns()) {
      total_size += 1 + 8;
    }

    // required fixed64 ctime_ns = 10;
    if (has_ctime_ns()) {
      total_size += 1 + 8;
    }

    // required fixed32 blksize = 11;
    if (has_blksize()) {
      total_size += 1 + 4;
    }

    // optional fixed64 etag = 12;
    if (has_etag()) {
      total_size += 1 + 8;
    }

    // required fixed32 truncate_epoch = 13;
    if (has_truncate_epoch()) {
      total_size += 1 + 4;
    }

    // optional fixed32 attributes = 14;
    if (has_attributes()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Stat::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Stat* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Stat*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Stat::MergeFrom(const Stat& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dev()) {
      set_dev(from.dev());
    }
    if (from.has_ino()) {
      set_ino(from.ino());
    }
    if (from.has_mode()) {
      set_mode(from.mode());
    }
    if (from.has_nlink()) {
      set_nlink(from.nlink());
    }
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_group_id()) {
      set_group_id(from.group_id());
    }
    if (from.has_size()) {
      set_size(from.size());
    }
    if (from.has_atime_ns()) {
      set_atime_ns(from.atime_ns());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_mtime_ns()) {
      set_mtime_ns(from.mtime_ns());
    }
    if (from.has_ctime_ns()) {
      set_ctime_ns(from.ctime_ns());
    }
    if (from.has_blksize()) {
      set_blksize(from.blksize());
    }
    if (from.has_etag()) {
      set_etag(from.etag());
    }
    if (from.has_truncate_epoch()) {
      set_truncate_epoch(from.truncate_epoch());
    }
    if (from.has_attributes()) {
      set_attributes(from.attributes());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Stat::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Stat::CopyFrom(const Stat& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Stat::IsInitialized() const {
  if ((_has_bits_[0] & 0x000017ff) != 0x000017ff) return false;

  return true;
}

void Stat::Swap(Stat* other) {
  if (other != this) {
    std::swap(dev_, other->dev_);
    std::swap(ino_, other->ino_);
    std::swap(mode_, other->mode_);
    std::swap(nlink_, other->nlink_);
    std::swap(user_id_, other->user_id_);
    std::swap(group_id_, other->group_id_);
    std::swap(size_, other->size_);
    std::swap(atime_ns_, other->atime_ns_);
    std::swap(mtime_ns_, other->mtime_ns_);
    std::swap(ctime_ns_, other->ctime_ns_);
    std::swap(blksize_, other->blksize_);
    std::swap(etag_, other->etag_);
    std::swap(truncate_epoch_, other->truncate_epoch_);
    std::swap(attributes_, other->attributes_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Stat::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Stat_descriptor_;
  metadata.reflection = Stat_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DirectoryEntry::kNameFieldNumber;
const int DirectoryEntry::kStbufFieldNumber;
#endif  // !_MSC_VER

DirectoryEntry::DirectoryEntry()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DirectoryEntry::InitAsDefaultInstance() {
  stbuf_ = const_cast< ::xtreemfs::pbrpc::Stat*>(&::xtreemfs::pbrpc::Stat::default_instance());
}

DirectoryEntry::DirectoryEntry(const DirectoryEntry& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DirectoryEntry::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  stbuf_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DirectoryEntry::~DirectoryEntry() {
  SharedDtor();
}

void DirectoryEntry::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
    delete stbuf_;
  }
}

void DirectoryEntry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DirectoryEntry::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DirectoryEntry_descriptor_;
}

const DirectoryEntry& DirectoryEntry::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_xtreemfs_2fMRC_2eproto();
  return *default_instance_;
}

DirectoryEntry* DirectoryEntry::default_instance_ = NULL;

DirectoryEntry* DirectoryEntry::New() const {
  return new DirectoryEntry;
}

void DirectoryEntry::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_stbuf()) {
      if (stbuf_ != NULL) stbuf_->::xtreemfs::pbrpc::Stat::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DirectoryEntry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_stbuf;
        break;
      }

      // optional .xtreemfs.pbrpc.Stat stbuf = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stbuf:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stbuf()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DirectoryEntry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // optional .xtreemfs.pbrpc.Stat stbuf = 2;
  if (has_stbuf()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->stbuf(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DirectoryEntry::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional .xtreemfs.pbrpc.Stat stbuf = 2;
  if (has_stbuf()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->stbuf(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DirectoryEntry::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional .xtreemfs.pbrpc.Stat stbuf = 2;
    if (has_stbuf()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->stbuf());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DirectoryEntry::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DirectoryEntry* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DirectoryEntry*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DirectoryEntry::MergeFrom(const DirectoryEntry& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_stbuf()) {
      mutable_stbuf()->::xtreemfs::pbrpc::Stat::MergeFrom(from.stbuf());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DirectoryEntry::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DirectoryEntry::CopyFrom(const DirectoryEntry& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DirectoryEntry::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_stbuf()) {
    if (!this->stbuf().IsInitialized()) return false;
  }
  return true;
}

void DirectoryEntry::Swap(DirectoryEntry* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(stbuf_, other->stbuf_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DirectoryEntry::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DirectoryEntry_descriptor_;
  metadata.reflection = DirectoryEntry_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DirectoryEntries::kEntriesFieldNumber;
#endif  // !_MSC_VER

DirectoryEntries::DirectoryEntries()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DirectoryEntries::InitAsDefaultInstance() {
}

DirectoryEntries::DirectoryEntries(const DirectoryEntries& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DirectoryEntries::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DirectoryEntries::~DirectoryEntries() {
  SharedDtor();
}

void DirectoryEntries::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DirectoryEntries::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DirectoryEntries::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DirectoryEntries_descriptor_;
}

const DirectoryEntries& DirectoryEntries::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_xtreemfs_2fMRC_2eproto();
  return *default_instance_;
}

DirectoryEntries* DirectoryEntries::default_instance_ = NULL;

DirectoryEntries* DirectoryEntries::New() const {
  return new DirectoryEntries;
}

void DirectoryEntries::Clear() {
  entries_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DirectoryEntries::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .xtreemfs.pbrpc.DirectoryEntry entries = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_entries:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_entries()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_entries;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DirectoryEntries::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .xtreemfs.pbrpc.DirectoryEntry entries = 1;
  for (int i = 0; i < this->entries_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->entries(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DirectoryEntries::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .xtreemfs.pbrpc.DirectoryEntry entries = 1;
  for (int i = 0; i < this->entries_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->entries(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DirectoryEntries::ByteSize() const {
  int total_size = 0;

  // repeated .xtreemfs.pbrpc.DirectoryEntry entries = 1;
  total_size += 1 * this->entries_size();
  for (int i = 0; i < this->entries_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->entries(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DirectoryEntries::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DirectoryEntries* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DirectoryEntries*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DirectoryEntries::MergeFrom(const DirectoryEntries& from) {
  GOOGLE_CHECK_NE(&from, this);
  entries_.MergeFrom(from.entries_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DirectoryEntries::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DirectoryEntries::CopyFrom(const DirectoryEntries& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DirectoryEntries::IsInitialized() const {

  for (int i = 0; i < entries_size(); i++) {
    if (!this->entries(i).IsInitialized()) return false;
  }
  return true;
}

void DirectoryEntries::Swap(DirectoryEntries* other) {
  if (other != this) {
    entries_.Swap(&other->entries_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DirectoryEntries::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DirectoryEntries_descriptor_;
  metadata.reflection = DirectoryEntries_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int XAttr::kNameFieldNumber;
const int XAttr::kValueFieldNumber;
const int XAttr::kValueBytesStringFieldNumber;
#endif  // !_MSC_VER

XAttr::XAttr()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void XAttr::InitAsDefaultInstance() {
}

XAttr::XAttr(const XAttr& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void XAttr::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  value_bytes_string_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

XAttr::~XAttr() {
  SharedDtor();
}

void XAttr::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    delete value_;
  }
  if (value_bytes_string_ != &::google::protobuf::internal::kEmptyString) {
    delete value_bytes_string_;
  }
  if (this != default_instance_) {
  }
}

void XAttr::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* XAttr::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return XAttr_descriptor_;
}

const XAttr& XAttr::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_xtreemfs_2fMRC_2eproto();
  return *default_instance_;
}

XAttr* XAttr::default_instance_ = NULL;

XAttr* XAttr::New() const {
  return new XAttr;
}

void XAttr::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_value()) {
      if (value_ != &::google::protobuf::internal::kEmptyString) {
        value_->clear();
      }
    }
    if (has_value_bytes_string()) {
      if (value_bytes_string_ != &::google::protobuf::internal::kEmptyString) {
        value_bytes_string_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool XAttr::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }

      // optional string value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->value().data(), this->value().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_value_bytes_string;
        break;
      }

      // optional bytes value_bytes_string = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_value_bytes_string:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_value_bytes_string()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void XAttr::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // optional string value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->value(), output);
  }

  // optional bytes value_bytes_string = 3;
  if (has_value_bytes_string()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->value_bytes_string(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* XAttr::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional string value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->value(), target);
  }

  // optional bytes value_bytes_string = 3;
  if (has_value_bytes_string()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->value_bytes_string(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int XAttr::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->value());
    }

    // optional bytes value_bytes_string = 3;
    if (has_value_bytes_string()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->value_bytes_string());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void XAttr::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const XAttr* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const XAttr*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void XAttr::MergeFrom(const XAttr& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
    if (from.has_value_bytes_string()) {
      set_value_bytes_string(from.value_bytes_string());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void XAttr::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void XAttr::CopyFrom(const XAttr& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool XAttr::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void XAttr::Swap(XAttr* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(value_, other->value_);
    std::swap(value_bytes_string_, other->value_bytes_string_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata XAttr::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = XAttr_descriptor_;
  metadata.reflection = XAttr_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Volume::kAccessControlPolicyFieldNumber;
const int Volume::kDefaultStripingPolicyFieldNumber;
const int Volume::kIdFieldNumber;
const int Volume::kModeFieldNumber;
const int Volume::kNameFieldNumber;
const int Volume::kOwnerGroupIdFieldNumber;
const int Volume::kOwnerUserIdFieldNumber;
const int Volume::kAttrsFieldNumber;
const int Volume::kQuotaFieldNumber;
#endif  // !_MSC_VER

Volume::Volume()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Volume::InitAsDefaultInstance() {
  default_striping_policy_ = const_cast< ::xtreemfs::pbrpc::StripingPolicy*>(&::xtreemfs::pbrpc::StripingPolicy::default_instance());
}

Volume::Volume(const Volume& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Volume::SharedCtor() {
  _cached_size_ = 0;
  access_control_policy_ = 1;
  default_striping_policy_ = NULL;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  mode_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  owner_group_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  owner_user_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  quota_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Volume::~Volume() {
  SharedDtor();
}

void Volume::SharedDtor() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (owner_group_id_ != &::google::protobuf::internal::kEmptyString) {
    delete owner_group_id_;
  }
  if (owner_user_id_ != &::google::protobuf::internal::kEmptyString) {
    delete owner_user_id_;
  }
  if (this != default_instance_) {
    delete default_striping_policy_;
  }
}

void Volume::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Volume::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Volume_descriptor_;
}

const Volume& Volume::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_xtreemfs_2fMRC_2eproto();
  return *default_instance_;
}

Volume* Volume::default_instance_ = NULL;

Volume* Volume::New() const {
  return new Volume;
}

void Volume::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    access_control_policy_ = 1;
    if (has_default_striping_policy()) {
      if (default_striping_policy_ != NULL) default_striping_policy_->::xtreemfs::pbrpc::StripingPolicy::Clear();
    }
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::kEmptyString) {
        id_->clear();
      }
    }
    mode_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_owner_group_id()) {
      if (owner_group_id_ != &::google::protobuf::internal::kEmptyString) {
        owner_group_id_->clear();
      }
    }
    if (has_owner_user_id()) {
      if (owner_user_id_ != &::google::protobuf::internal::kEmptyString) {
        owner_user_id_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    quota_ = GOOGLE_ULONGLONG(0);
  }
  attrs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Volume::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .xtreemfs.pbrpc.AccessControlPolicyType access_control_policy = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::xtreemfs::pbrpc::AccessControlPolicyType_IsValid(value)) {
            set_access_control_policy(static_cast< ::xtreemfs::pbrpc::AccessControlPolicyType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_default_striping_policy;
        break;
      }

      // required .xtreemfs.pbrpc.StripingPolicy default_striping_policy = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_default_striping_policy:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_default_striping_policy()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_id;
        break;
      }

      // required string id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_mode;
        break;
      }

      // required fixed32 mode = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_mode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &mode_)));
          set_has_mode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_name;
        break;
      }

      // required string name = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_owner_group_id;
        break;
      }

      // required string owner_group_id = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_owner_group_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_owner_group_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->owner_group_id().data(), this->owner_group_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_owner_user_id;
        break;
      }

      // required string owner_user_id = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_owner_user_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_owner_user_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->owner_user_id().data(), this->owner_user_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_attrs;
        break;
      }

      // repeated .xtreemfs.pbrpc.KeyValuePair attrs = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_attrs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_attrs()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_attrs;
        if (input->ExpectTag(73)) goto parse_quota;
        break;
      }

      // optional fixed64 quota = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_quota:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &quota_)));
          set_has_quota();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Volume::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .xtreemfs.pbrpc.AccessControlPolicyType access_control_policy = 1;
  if (has_access_control_policy()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->access_control_policy(), output);
  }

  // required .xtreemfs.pbrpc.StripingPolicy default_striping_policy = 2;
  if (has_default_striping_policy()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->default_striping_policy(), output);
  }

  // required string id = 3;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->id(), output);
  }

  // required fixed32 mode = 4;
  if (has_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(4, this->mode(), output);
  }

  // required string name = 5;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->name(), output);
  }

  // required string owner_group_id = 6;
  if (has_owner_group_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->owner_group_id().data(), this->owner_group_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->owner_group_id(), output);
  }

  // required string owner_user_id = 7;
  if (has_owner_user_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->owner_user_id().data(), this->owner_user_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->owner_user_id(), output);
  }

  // repeated .xtreemfs.pbrpc.KeyValuePair attrs = 8;
  for (int i = 0; i < this->attrs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->attrs(i), output);
  }

  // optional fixed64 quota = 9;
  if (has_quota()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(9, this->quota(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Volume::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .xtreemfs.pbrpc.AccessControlPolicyType access_control_policy = 1;
  if (has_access_control_policy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->access_control_policy(), target);
  }

  // required .xtreemfs.pbrpc.StripingPolicy default_striping_policy = 2;
  if (has_default_striping_policy()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->default_striping_policy(), target);
  }

  // required string id = 3;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->id(), target);
  }

  // required fixed32 mode = 4;
  if (has_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(4, this->mode(), target);
  }

  // required string name = 5;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->name(), target);
  }

  // required string owner_group_id = 6;
  if (has_owner_group_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->owner_group_id().data(), this->owner_group_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->owner_group_id(), target);
  }

  // required string owner_user_id = 7;
  if (has_owner_user_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->owner_user_id().data(), this->owner_user_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->owner_user_id(), target);
  }

  // repeated .xtreemfs.pbrpc.KeyValuePair attrs = 8;
  for (int i = 0; i < this->attrs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->attrs(i), target);
  }

  // optional fixed64 quota = 9;
  if (has_quota()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(9, this->quota(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Volume::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .xtreemfs.pbrpc.AccessControlPolicyType access_control_policy = 1;
    if (has_access_control_policy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->access_control_policy());
    }

    // required .xtreemfs.pbrpc.StripingPolicy default_striping_policy = 2;
    if (has_default_striping_policy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->default_striping_policy());
    }

    // required string id = 3;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // required fixed32 mode = 4;
    if (has_mode()) {
      total_size += 1 + 4;
    }

    // required string name = 5;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required string owner_group_id = 6;
    if (has_owner_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->owner_group_id());
    }

    // required string owner_user_id = 7;
    if (has_owner_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->owner_user_id());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional fixed64 quota = 9;
    if (has_quota()) {
      total_size += 1 + 8;
    }

  }
  // repeated .xtreemfs.pbrpc.KeyValuePair attrs = 8;
  total_size += 1 * this->attrs_size();
  for (int i = 0; i < this->attrs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->attrs(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Volume::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Volume* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Volume*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Volume::MergeFrom(const Volume& from) {
  GOOGLE_CHECK_NE(&from, this);
  attrs_.MergeFrom(from.attrs_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_access_control_policy()) {
      set_access_control_policy(from.access_control_policy());
    }
    if (from.has_default_striping_policy()) {
      mutable_default_striping_policy()->::xtreemfs::pbrpc::StripingPolicy::MergeFrom(from.default_striping_policy());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_mode()) {
      set_mode(from.mode());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_owner_group_id()) {
      set_owner_group_id(from.owner_group_id());
    }
    if (from.has_owner_user_id()) {
      set_owner_user_id(from.owner_user_id());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_quota()) {
      set_quota(from.quota());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Volume::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Volume::CopyFrom(const Volume& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Volume::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;

  if (has_default_striping_policy()) {
    if (!this->default_striping_policy().IsInitialized()) return false;
  }
  for (int i = 0; i < attrs_size(); i++) {
    if (!this->attrs(i).IsInitialized()) return false;
  }
  return true;
}

void Volume::Swap(Volume* other) {
  if (other != this) {
    std::swap(access_control_policy_, other->access_control_policy_);
    std::swap(default_striping_policy_, other->default_striping_policy_);
    std::swap(id_, other->id_);
    std::swap(mode_, other->mode_);
    std::swap(name_, other->name_);
    std::swap(owner_group_id_, other->owner_group_id_);
    std::swap(owner_user_id_, other->owner_user_id_);
    attrs_.Swap(&other->attrs_);
    std::swap(quota_, other->quota_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Volume::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Volume_descriptor_;
  metadata.reflection = Volume_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Volumes::kVolumesFieldNumber;
#endif  // !_MSC_VER

Volumes::Volumes()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Volumes::InitAsDefaultInstance() {
}

Volumes::Volumes(const Volumes& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Volumes::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Volumes::~Volumes() {
  SharedDtor();
}

void Volumes::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Volumes::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Volumes::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Volumes_descriptor_;
}

const Volumes& Volumes::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_xtreemfs_2fMRC_2eproto();
  return *default_instance_;
}

Volumes* Volumes::default_instance_ = NULL;

Volumes* Volumes::New() const {
  return new Volumes;
}

void Volumes::Clear() {
  volumes_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Volumes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .xtreemfs.pbrpc.Volume volumes = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_volumes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_volumes()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_volumes;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Volumes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .xtreemfs.pbrpc.Volume volumes = 1;
  for (int i = 0; i < this->volumes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->volumes(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Volumes::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .xtreemfs.pbrpc.Volume volumes = 1;
  for (int i = 0; i < this->volumes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->volumes(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Volumes::ByteSize() const {
  int total_size = 0;

  // repeated .xtreemfs.pbrpc.Volume volumes = 1;
  total_size += 1 * this->volumes_size();
  for (int i = 0; i < this->volumes_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->volumes(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Volumes::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Volumes* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Volumes*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Volumes::MergeFrom(const Volumes& from) {
  GOOGLE_CHECK_NE(&from, this);
  volumes_.MergeFrom(from.volumes_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Volumes::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Volumes::CopyFrom(const Volumes& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Volumes::IsInitialized() const {

  for (int i = 0; i < volumes_size(); i++) {
    if (!this->volumes(i).IsInitialized()) return false;
  }
  return true;
}

void Volumes::Swap(Volumes* other) {
  if (other != this) {
    volumes_.Swap(&other->volumes_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Volumes::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Volumes_descriptor_;
  metadata.reflection = Volumes_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StatVFS::kBsizeFieldNumber;
const int StatVFS::kBavailFieldNumber;
const int StatVFS::kBfreeFieldNumber;
const int StatVFS::kBlocksFieldNumber;
const int StatVFS::kFsidFieldNumber;
const int StatVFS::kNamemaxFieldNumber;
const int StatVFS::kAccessControlPolicyFieldNumber;
const int StatVFS::kDefaultStripingPolicyFieldNumber;
const int StatVFS::kEtagFieldNumber;
const int StatVFS::kModeFieldNumber;
const int StatVFS::kNameFieldNumber;
const int StatVFS::kOwnerGroupIdFieldNumber;
const int StatVFS::kOwnerUserIdFieldNumber;
#endif  // !_MSC_VER

StatVFS::StatVFS()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StatVFS::InitAsDefaultInstance() {
  default_striping_policy_ = const_cast< ::xtreemfs::pbrpc::StripingPolicy*>(&::xtreemfs::pbrpc::StripingPolicy::default_instance());
}

StatVFS::StatVFS(const StatVFS& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StatVFS::SharedCtor() {
  _cached_size_ = 0;
  bsize_ = 0u;
  bavail_ = GOOGLE_ULONGLONG(0);
  bfree_ = GOOGLE_ULONGLONG(0);
  blocks_ = GOOGLE_ULONGLONG(0);
  fsid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  namemax_ = 0u;
  access_control_policy_ = 1;
  default_striping_policy_ = NULL;
  etag_ = GOOGLE_ULONGLONG(0);
  mode_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  owner_group_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  owner_user_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StatVFS::~StatVFS() {
  SharedDtor();
}

void StatVFS::SharedDtor() {
  if (fsid_ != &::google::protobuf::internal::kEmptyString) {
    delete fsid_;
  }
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (owner_group_id_ != &::google::protobuf::internal::kEmptyString) {
    delete owner_group_id_;
  }
  if (owner_user_id_ != &::google::protobuf::internal::kEmptyString) {
    delete owner_user_id_;
  }
  if (this != default_instance_) {
    delete default_striping_policy_;
  }
}

void StatVFS::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StatVFS::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StatVFS_descriptor_;
}

const StatVFS& StatVFS::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_xtreemfs_2fMRC_2eproto();
  return *default_instance_;
}

StatVFS* StatVFS::default_instance_ = NULL;

StatVFS* StatVFS::New() const {
  return new StatVFS;
}

void StatVFS::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    bsize_ = 0u;
    bavail_ = GOOGLE_ULONGLONG(0);
    bfree_ = GOOGLE_ULONGLONG(0);
    blocks_ = GOOGLE_ULONGLONG(0);
    if (has_fsid()) {
      if (fsid_ != &::google::protobuf::internal::kEmptyString) {
        fsid_->clear();
      }
    }
    namemax_ = 0u;
    access_control_policy_ = 1;
    if (has_default_striping_policy()) {
      if (default_striping_policy_ != NULL) default_striping_policy_->::xtreemfs::pbrpc::StripingPolicy::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    etag_ = GOOGLE_ULONGLONG(0);
    mode_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_owner_group_id()) {
      if (owner_group_id_ != &::google::protobuf::internal::kEmptyString) {
        owner_group_id_->clear();
      }
    }
    if (has_owner_user_id()) {
      if (owner_user_id_ != &::google::protobuf::internal::kEmptyString) {
        owner_user_id_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StatVFS::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed32 bsize = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &bsize_)));
          set_has_bsize();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_bavail;
        break;
      }

      // required fixed64 bavail = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_bavail:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &bavail_)));
          set_has_bavail();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_blocks;
        break;
      }

      // required fixed64 blocks = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_blocks:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &blocks_)));
          set_has_blocks();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_fsid;
        break;
      }

      // required string fsid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fsid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fsid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->fsid().data(), this->fsid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_namemax;
        break;
      }

      // required fixed32 namemax = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_namemax:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &namemax_)));
          set_has_namemax();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_access_control_policy;
        break;
      }

      // required .xtreemfs.pbrpc.AccessControlPolicyType access_control_policy = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_access_control_policy:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::xtreemfs::pbrpc::AccessControlPolicyType_IsValid(value)) {
            set_access_control_policy(static_cast< ::xtreemfs::pbrpc::AccessControlPolicyType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_default_striping_policy;
        break;
      }

      // required .xtreemfs.pbrpc.StripingPolicy default_striping_policy = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_default_striping_policy:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_default_striping_policy()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(65)) goto parse_etag;
        break;
      }

      // required fixed64 etag = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_etag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &etag_)));
          set_has_etag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(77)) goto parse_mode;
        break;
      }

      // required fixed32 mode = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_mode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &mode_)));
          set_has_mode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_name;
        break;
      }

      // required string name = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_owner_group_id;
        break;
      }

      // required string owner_group_id = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_owner_group_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_owner_group_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->owner_group_id().data(), this->owner_group_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_owner_user_id;
        break;
      }

      // required string owner_user_id = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_owner_user_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_owner_user_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->owner_user_id().data(), this->owner_user_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(105)) goto parse_bfree;
        break;
      }

      // optional fixed64 bfree = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_bfree:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &bfree_)));
          set_has_bfree();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StatVFS::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed32 bsize = 1;
  if (has_bsize()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(1, this->bsize(), output);
  }

  // required fixed64 bavail = 2;
  if (has_bavail()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->bavail(), output);
  }

  // required fixed64 blocks = 3;
  if (has_blocks()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(3, this->blocks(), output);
  }

  // required string fsid = 4;
  if (has_fsid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->fsid().data(), this->fsid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->fsid(), output);
  }

  // required fixed32 namemax = 5;
  if (has_namemax()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(5, this->namemax(), output);
  }

  // required .xtreemfs.pbrpc.AccessControlPolicyType access_control_policy = 6;
  if (has_access_control_policy()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->access_control_policy(), output);
  }

  // required .xtreemfs.pbrpc.StripingPolicy default_striping_policy = 7;
  if (has_default_striping_policy()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->default_striping_policy(), output);
  }

  // required fixed64 etag = 8;
  if (has_etag()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(8, this->etag(), output);
  }

  // required fixed32 mode = 9;
  if (has_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(9, this->mode(), output);
  }

  // required string name = 10;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->name(), output);
  }

  // required string owner_group_id = 11;
  if (has_owner_group_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->owner_group_id().data(), this->owner_group_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->owner_group_id(), output);
  }

  // required string owner_user_id = 12;
  if (has_owner_user_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->owner_user_id().data(), this->owner_user_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->owner_user_id(), output);
  }

  // optional fixed64 bfree = 13;
  if (has_bfree()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(13, this->bfree(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StatVFS::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed32 bsize = 1;
  if (has_bsize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(1, this->bsize(), target);
  }

  // required fixed64 bavail = 2;
  if (has_bavail()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->bavail(), target);
  }

  // required fixed64 blocks = 3;
  if (has_blocks()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(3, this->blocks(), target);
  }

  // required string fsid = 4;
  if (has_fsid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->fsid().data(), this->fsid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->fsid(), target);
  }

  // required fixed32 namemax = 5;
  if (has_namemax()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(5, this->namemax(), target);
  }

  // required .xtreemfs.pbrpc.AccessControlPolicyType access_control_policy = 6;
  if (has_access_control_policy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->access_control_policy(), target);
  }

  // required .xtreemfs.pbrpc.StripingPolicy default_striping_policy = 7;
  if (has_default_striping_policy()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->default_striping_policy(), target);
  }

  // required fixed64 etag = 8;
  if (has_etag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(8, this->etag(), target);
  }

  // required fixed32 mode = 9;
  if (has_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(9, this->mode(), target);
  }

  // required string name = 10;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->name(), target);
  }

  // required string owner_group_id = 11;
  if (has_owner_group_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->owner_group_id().data(), this->owner_group_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->owner_group_id(), target);
  }

  // required string owner_user_id = 12;
  if (has_owner_user_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->owner_user_id().data(), this->owner_user_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->owner_user_id(), target);
  }

  // optional fixed64 bfree = 13;
  if (has_bfree()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(13, this->bfree(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StatVFS::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed32 bsize = 1;
    if (has_bsize()) {
      total_size += 1 + 4;
    }

    // required fixed64 bavail = 2;
    if (has_bavail()) {
      total_size += 1 + 8;
    }

    // optional fixed64 bfree = 13;
    if (has_bfree()) {
      total_size += 1 + 8;
    }

    // required fixed64 blocks = 3;
    if (has_blocks()) {
      total_size += 1 + 8;
    }

    // required string fsid = 4;
    if (has_fsid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fsid());
    }

    // required fixed32 namemax = 5;
    if (has_namemax()) {
      total_size += 1 + 4;
    }

    // required .xtreemfs.pbrpc.AccessControlPolicyType access_control_policy = 6;
    if (has_access_control_policy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->access_control_policy());
    }

    // required .xtreemfs.pbrpc.StripingPolicy default_striping_policy = 7;
    if (has_default_striping_policy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->default_striping_policy());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required fixed64 etag = 8;
    if (has_etag()) {
      total_size += 1 + 8;
    }

    // required fixed32 mode = 9;
    if (has_mode()) {
      total_size += 1 + 4;
    }

    // required string name = 10;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required string owner_group_id = 11;
    if (has_owner_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->owner_group_id());
    }

    // required string owner_user_id = 12;
    if (has_owner_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->owner_user_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StatVFS::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StatVFS* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StatVFS*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StatVFS::MergeFrom(const StatVFS& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bsize()) {
      set_bsize(from.bsize());
    }
    if (from.has_bavail()) {
      set_bavail(from.bavail());
    }
    if (from.has_bfree()) {
      set_bfree(from.bfree());
    }
    if (from.has_blocks()) {
      set_blocks(from.blocks());
    }
    if (from.has_fsid()) {
      set_fsid(from.fsid());
    }
    if (from.has_namemax()) {
      set_namemax(from.namemax());
    }
    if (from.has_access_control_policy()) {
      set_access_control_policy(from.access_control_policy());
    }
    if (from.has_default_striping_policy()) {
      mutable_default_striping_policy()->::xtreemfs::pbrpc::StripingPolicy::MergeFrom(from.default_striping_policy());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_etag()) {
      set_etag(from.etag());
    }
    if (from.has_mode()) {
      set_mode(from.mode());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_owner_group_id()) {
      set_owner_group_id(from.owner_group_id());
    }
    if (from.has_owner_user_id()) {
      set_owner_user_id(from.owner_user_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StatVFS::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StatVFS::CopyFrom(const StatVFS& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StatVFS::IsInitialized() const {
  if ((_has_bits_[0] & 0x00001ffb) != 0x00001ffb) return false;

  if (has_default_striping_policy()) {
    if (!this->default_striping_policy().IsInitialized()) return false;
  }
  return true;
}

void StatVFS::Swap(StatVFS* other) {
  if (other != this) {
    std::swap(bsize_, other->bsize_);
    std::swap(bavail_, other->bavail_);
    std::swap(bfree_, other->bfree_);
    std::swap(blocks_, other->blocks_);
    std::swap(fsid_, other->fsid_);
    std::swap(namemax_, other->namemax_);
    std::swap(access_control_policy_, other->access_control_policy_);
    std::swap(default_striping_policy_, other->default_striping_policy_);
    std::swap(etag_, other->etag_);
    std::swap(mode_, other->mode_);
    std::swap(name_, other->name_);
    std::swap(owner_group_id_, other->owner_group_id_);
    std::swap(owner_user_id_, other->owner_user_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StatVFS::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StatVFS_descriptor_;
  metadata.reflection = StatVFS_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int fsetattrRequest::kStbufFieldNumber;
const int fsetattrRequest::kToSetFieldNumber;
const int fsetattrRequest::kCapFieldNumber;
#endif  // !_MSC_VER

fsetattrRequest::fsetattrRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void fsetattrRequest::InitAsDefaultInstance() {
  stbuf_ = const_cast< ::xtreemfs::pbrpc::Stat*>(&::xtreemfs::pbrpc::Stat::default_instance());
  cap_ = const_cast< ::xtreemfs::pbrpc::XCap*>(&::xtreemfs::pbrpc::XCap::default_instance());
}

fsetattrRequest::fsetattrRequest(const fsetattrRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void fsetattrRequest::SharedCtor() {
  _cached_size_ = 0;
  stbuf_ = NULL;
  to_set_ = 0u;
  cap_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

fsetattrRequest::~fsetattrRequest() {
  SharedDtor();
}

void fsetattrRequest::SharedDtor() {
  if (this != default_instance_) {
    delete stbuf_;
    delete cap_;
  }
}

void fsetattrRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* fsetattrRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return fsetattrRequest_descriptor_;
}

const fsetattrRequest& fsetattrRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_xtreemfs_2fMRC_2eproto();
  return *default_instance_;
}

fsetattrRequest* fsetattrRequest::default_instance_ = NULL;

fsetattrRequest* fsetattrRequest::New() const {
  return new fsetattrRequest;
}

void fsetattrRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_stbuf()) {
      if (stbuf_ != NULL) stbuf_->::xtreemfs::pbrpc::Stat::Clear();
    }
    to_set_ = 0u;
    if (has_cap()) {
      if (cap_ != NULL) cap_->::xtreemfs::pbrpc::XCap::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool fsetattrRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .xtreemfs.pbrpc.Stat stbuf = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stbuf()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_to_set;
        break;
      }

      // required fixed32 to_set = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_to_set:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &to_set_)));
          set_has_to_set();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_cap;
        break;
      }

      // required .xtreemfs.pbrpc.XCap cap = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cap:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cap()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void fsetattrRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .xtreemfs.pbrpc.Stat stbuf = 1;
  if (has_stbuf()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->stbuf(), output);
  }

  // required fixed32 to_set = 2;
  if (has_to_set()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(2, this->to_set(), output);
  }

  // required .xtreemfs.pbrpc.XCap cap = 3;
  if (has_cap()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->cap(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* fsetattrRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .xtreemfs.pbrpc.Stat stbuf = 1;
  if (has_stbuf()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->stbuf(), target);
  }

  // required fixed32 to_set = 2;
  if (has_to_set()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(2, this->to_set(), target);
  }

  // required .xtreemfs.pbrpc.XCap cap = 3;
  if (has_cap()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->cap(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int fsetattrRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .xtreemfs.pbrpc.Stat stbuf = 1;
    if (has_stbuf()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->stbuf());
    }

    // required fixed32 to_set = 2;
    if (has_to_set()) {
      total_size += 1 + 4;
    }

    // required .xtreemfs.pbrpc.XCap cap = 3;
    if (has_cap()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cap());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void fsetattrRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const fsetattrRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const fsetattrRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void fsetattrRequest::MergeFrom(const fsetattrRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_stbuf()) {
      mutable_stbuf()->::xtreemfs::pbrpc::Stat::MergeFrom(from.stbuf());
    }
    if (from.has_to_set()) {
      set_to_set(from.to_set());
    }
    if (from.has_cap()) {
      mutable_cap()->::xtreemfs::pbrpc::XCap::MergeFrom(from.cap());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void fsetattrRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void fsetattrRequest::CopyFrom(const fsetattrRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool fsetattrRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_stbuf()) {
    if (!this->stbuf().IsInitialized()) return false;
  }
  if (has_cap()) {
    if (!this->cap().IsInitialized()) return false;
  }
  return true;
}

void fsetattrRequest::Swap(fsetattrRequest* other) {
  if (other != this) {
    std::swap(stbuf_, other->stbuf_);
    std::swap(to_set_, other->to_set_);
    std::swap(cap_, other->cap_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata fsetattrRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = fsetattrRequest_descriptor_;
  metadata.reflection = fsetattrRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int getattrRequest::kVolumeNameFieldNumber;
const int getattrRequest::kPathFieldNumber;
const int getattrRequest::kKnownEtagFieldNumber;
#endif  // !_MSC_VER

getattrRequest::getattrRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void getattrRequest::InitAsDefaultInstance() {
}

getattrRequest::getattrRequest(const getattrRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void getattrRequest::SharedCtor() {
  _cached_size_ = 0;
  volume_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  known_etag_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

getattrRequest::~getattrRequest() {
  SharedDtor();
}

void getattrRequest::SharedDtor() {
  if (volume_name_ != &::google::protobuf::internal::kEmptyString) {
    delete volume_name_;
  }
  if (path_ != &::google::protobuf::internal::kEmptyString) {
    delete path_;
  }
  if (this != default_instance_) {
  }
}

void getattrRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* getattrRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return getattrRequest_descriptor_;
}

const getattrRequest& getattrRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_xtreemfs_2fMRC_2eproto();
  return *default_instance_;
}

getattrRequest* getattrRequest::default_instance_ = NULL;

getattrRequest* getattrRequest::New() const {
  return new getattrRequest;
}

void getattrRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_volume_name()) {
      if (volume_name_ != &::google::protobuf::internal::kEmptyString) {
        volume_name_->clear();
      }
    }
    if (has_path()) {
      if (path_ != &::google::protobuf::internal::kEmptyString) {
        path_->clear();
      }
    }
    known_etag_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool getattrRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string volume_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_volume_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->volume_name().data(), this->volume_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_path;
        break;
      }

      // required string path = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->path().data(), this->path().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_known_etag;
        break;
      }

      // required fixed64 known_etag = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_known_etag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &known_etag_)));
          set_has_known_etag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void getattrRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string volume_name = 1;
  if (has_volume_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->volume_name().data(), this->volume_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->volume_name(), output);
  }

  // required string path = 2;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->path(), output);
  }

  // required fixed64 known_etag = 3;
  if (has_known_etag()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(3, this->known_etag(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* getattrRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string volume_name = 1;
  if (has_volume_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->volume_name().data(), this->volume_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->volume_name(), target);
  }

  // required string path = 2;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->path(), target);
  }

  // required fixed64 known_etag = 3;
  if (has_known_etag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(3, this->known_etag(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int getattrRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string volume_name = 1;
    if (has_volume_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->volume_name());
    }

    // required string path = 2;
    if (has_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->path());
    }

    // required fixed64 known_etag = 3;
    if (has_known_etag()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void getattrRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const getattrRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const getattrRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void getattrRequest::MergeFrom(const getattrRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_volume_name()) {
      set_volume_name(from.volume_name());
    }
    if (from.has_path()) {
      set_path(from.path());
    }
    if (from.has_known_etag()) {
      set_known_etag(from.known_etag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void getattrRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void getattrRequest::CopyFrom(const getattrRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool getattrRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void getattrRequest::Swap(getattrRequest* other) {
  if (other != this) {
    std::swap(volume_name_, other->volume_name_);
    std::swap(path_, other->path_);
    std::swap(known_etag_, other->known_etag_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata getattrRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = getattrRequest_descriptor_;
  metadata.reflection = getattrRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int getattrResponse::kStbufFieldNumber;
#endif  // !_MSC_VER

getattrResponse::getattrResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void getattrResponse::InitAsDefaultInstance() {
  stbuf_ = const_cast< ::xtreemfs::pbrpc::Stat*>(&::xtreemfs::pbrpc::Stat::default_instance());
}

getattrResponse::getattrResponse(const getattrResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void getattrResponse::SharedCtor() {
  _cached_size_ = 0;
  stbuf_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

getattrResponse::~getattrResponse() {
  SharedDtor();
}

void getattrResponse::SharedDtor() {
  if (this != default_instance_) {
    delete stbuf_;
  }
}

void getattrResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* getattrResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return getattrResponse_descriptor_;
}

const getattrResponse& getattrResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_xtreemfs_2fMRC_2eproto();
  return *default_instance_;
}

getattrResponse* getattrResponse::default_instance_ = NULL;

getattrResponse* getattrResponse::New() const {
  return new getattrResponse;
}

void getattrResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_stbuf()) {
      if (stbuf_ != NULL) stbuf_->::xtreemfs::pbrpc::Stat::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool getattrResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .xtreemfs.pbrpc.Stat stbuf = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stbuf()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void getattrResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .xtreemfs.pbrpc.Stat stbuf = 1;
  if (has_stbuf()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->stbuf(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* getattrResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .xtreemfs.pbrpc.Stat stbuf = 1;
  if (has_stbuf()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->stbuf(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int getattrResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .xtreemfs.pbrpc.Stat stbuf = 1;
    if (has_stbuf()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->stbuf());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void getattrResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const getattrResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const getattrResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void getattrResponse::MergeFrom(const getattrResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_stbuf()) {
      mutable_stbuf()->::xtreemfs::pbrpc::Stat::MergeFrom(from.stbuf());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void getattrResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void getattrResponse::CopyFrom(const getattrResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool getattrResponse::IsInitialized() const {

  if (has_stbuf()) {
    if (!this->stbuf().IsInitialized()) return false;
  }
  return true;
}

void getattrResponse::Swap(getattrResponse* other) {
  if (other != this) {
    std::swap(stbuf_, other->stbuf_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata getattrResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = getattrResponse_descriptor_;
  metadata.reflection = getattrResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int getxattrRequest::kVolumeNameFieldNumber;
const int getxattrRequest::kPathFieldNumber;
const int getxattrRequest::kNameFieldNumber;
#endif  // !_MSC_VER

getxattrRequest::getxattrRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void getxattrRequest::InitAsDefaultInstance() {
}

getxattrRequest::getxattrRequest(const getxattrRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void getxattrRequest::SharedCtor() {
  _cached_size_ = 0;
  volume_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

getxattrRequest::~getxattrRequest() {
  SharedDtor();
}

void getxattrRequest::SharedDtor() {
  if (volume_name_ != &::google::protobuf::internal::kEmptyString) {
    delete volume_name_;
  }
  if (path_ != &::google::protobuf::internal::kEmptyString) {
    delete path_;
  }
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void getxattrRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* getxattrRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return getxattrRequest_descriptor_;
}

const getxattrRequest& getxattrRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_xtreemfs_2fMRC_2eproto();
  return *default_instance_;
}

getxattrRequest* getxattrRequest::default_instance_ = NULL;

getxattrRequest* getxattrRequest::New() const {
  return new getxattrRequest;
}

void getxattrRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_volume_name()) {
      if (volume_name_ != &::google::protobuf::internal::kEmptyString) {
        volume_name_->clear();
      }
    }
    if (has_path()) {
      if (path_ != &::google::protobuf::internal::kEmptyString) {
        path_->clear();
      }
    }
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool getxattrRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string volume_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_volume_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->volume_name().data(), this->volume_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_path;
        break;
      }

      // required string path = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->path().data(), this->path().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // required string name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void getxattrRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string volume_name = 1;
  if (has_volume_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->volume_name().data(), this->volume_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->volume_name(), output);
  }

  // required string path = 2;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->path(), output);
  }

  // required string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* getxattrRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string volume_name = 1;
  if (has_volume_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->volume_name().data(), this->volume_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->volume_name(), target);
  }

  // required string path = 2;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->path(), target);
  }

  // required string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int getxattrRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string volume_name = 1;
    if (has_volume_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->volume_name());
    }

    // required string path = 2;
    if (has_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->path());
    }

    // required string name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void getxattrRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const getxattrRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const getxattrRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void getxattrRequest::MergeFrom(const getxattrRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_volume_name()) {
      set_volume_name(from.volume_name());
    }
    if (from.has_path()) {
      set_path(from.path());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void getxattrRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void getxattrRequest::CopyFrom(const getxattrRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool getxattrRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void getxattrRequest::Swap(getxattrRequest* other) {
  if (other != this) {
    std::swap(volume_name_, other->volume_name_);
    std::swap(path_, other->path_);
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata getxattrRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = getxattrRequest_descriptor_;
  metadata.reflection = getxattrRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int getxattrResponse::kValueFieldNumber;
const int getxattrResponse::kValueBytesStringFieldNumber;
#endif  // !_MSC_VER

getxattrResponse::getxattrResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void getxattrResponse::InitAsDefaultInstance() {
}

getxattrResponse::getxattrResponse(const getxattrResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void getxattrResponse::SharedCtor() {
  _cached_size_ = 0;
  value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  value_bytes_string_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

getxattrResponse::~getxattrResponse() {
  SharedDtor();
}

void getxattrResponse::SharedDtor() {
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    delete value_;
  }
  if (value_bytes_string_ != &::google::protobuf::internal::kEmptyString) {
    delete value_bytes_string_;
  }
  if (this != default_instance_) {
  }
}

void getxattrResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* getxattrResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return getxattrResponse_descriptor_;
}

const getxattrResponse& getxattrResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_xtreemfs_2fMRC_2eproto();
  return *default_instance_;
}

getxattrResponse* getxattrResponse::default_instance_ = NULL;

getxattrResponse* getxattrResponse::New() const {
  return new getxattrResponse;
}

void getxattrResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_value()) {
      if (value_ != &::google::protobuf::internal::kEmptyString) {
        value_->clear();
      }
    }
    if (has_value_bytes_string()) {
      if (value_bytes_string_ != &::google::protobuf::internal::kEmptyString) {
        value_bytes_string_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool getxattrResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string value = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->value().data(), this->value().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_value_bytes_string;
        break;
      }

      // optional bytes value_bytes_string = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_value_bytes_string:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_value_bytes_string()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void getxattrResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string value = 1;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->value(), output);
  }

  // optional bytes value_bytes_string = 2;
  if (has_value_bytes_string()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->value_bytes_string(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* getxattrResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string value = 1;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->value(), target);
  }

  // optional bytes value_bytes_string = 2;
  if (has_value_bytes_string()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->value_bytes_string(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int getxattrResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string value = 1;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->value());
    }

    // optional bytes value_bytes_string = 2;
    if (has_value_bytes_string()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->value_bytes_string());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void getxattrResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const getxattrResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const getxattrResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void getxattrResponse::MergeFrom(const getxattrResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_value()) {
      set_value(from.value());
    }
    if (from.has_value_bytes_string()) {
      set_value_bytes_string(from.value_bytes_string());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void getxattrResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void getxattrResponse::CopyFrom(const getxattrResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool getxattrResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void getxattrResponse::Swap(getxattrResponse* other) {
  if (other != this) {
    std::swap(value_, other->value_);
    std::swap(value_bytes_string_, other->value_bytes_string_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata getxattrResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = getxattrResponse_descriptor_;
  metadata.reflection = getxattrResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int linkRequest::kVolumeNameFieldNumber;
const int linkRequest::kTargetPathFieldNumber;
const int linkRequest::kLinkPathFieldNumber;
#endif  // !_MSC_VER

linkRequest::linkRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void linkRequest::InitAsDefaultInstance() {
}

linkRequest::linkRequest(const linkRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void linkRequest::SharedCtor() {
  _cached_size_ = 0;
  volume_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  target_path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  link_path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

linkRequest::~linkRequest() {
  SharedDtor();
}

void linkRequest::SharedDtor() {
  if (volume_name_ != &::google::protobuf::internal::kEmptyString) {
    delete volume_name_;
  }
  if (target_path_ != &::google::protobuf::internal::kEmptyString) {
    delete target_path_;
  }
  if (link_path_ != &::google::protobuf::internal::kEmptyString) {
    delete link_path_;
  }
  if (this != default_instance_) {
  }
}

void linkRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* linkRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return linkRequest_descriptor_;
}

const linkRequest& linkRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_xtreemfs_2fMRC_2eproto();
  return *default_instance_;
}

linkRequest* linkRequest::default_instance_ = NULL;

linkRequest* linkRequest::New() const {
  return new linkRequest;
}

void linkRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_volume_name()) {
      if (volume_name_ != &::google::protobuf::internal::kEmptyString) {
        volume_name_->clear();
      }
    }
    if (has_target_path()) {
      if (target_path_ != &::google::protobuf::internal::kEmptyString) {
        target_path_->clear();
      }
    }
    if (has_link_path()) {
      if (link_path_ != &::google::protobuf::internal::kEmptyString) {
        link_path_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool linkRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string volume_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_volume_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->volume_name().data(), this->volume_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_target_path;
        break;
      }

      // required string target_path = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_target_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_target_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->target_path().data(), this->target_path().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_link_path;
        break;
      }

      // required string link_path = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_link_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_link_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->link_path().data(), this->link_path().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void linkRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string volume_name = 1;
  if (has_volume_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->volume_name().data(), this->volume_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->volume_name(), output);
  }

  // required string target_path = 2;
  if (has_target_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->target_path().data(), this->target_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->target_path(), output);
  }

  // required string link_path = 3;
  if (has_link_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->link_path().data(), this->link_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->link_path(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* linkRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string volume_name = 1;
  if (has_volume_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->volume_name().data(), this->volume_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->volume_name(), target);
  }

  // required string target_path = 2;
  if (has_target_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->target_path().data(), this->target_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->target_path(), target);
  }

  // required string link_path = 3;
  if (has_link_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->link_path().data(), this->link_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->link_path(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int linkRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string volume_name = 1;
    if (has_volume_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->volume_name());
    }

    // required string target_path = 2;
    if (has_target_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->target_path());
    }

    // required string link_path = 3;
    if (has_link_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->link_path());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void linkRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const linkRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const linkRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void linkRequest::MergeFrom(const linkRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_volume_name()) {
      set_volume_name(from.volume_name());
    }
    if (from.has_target_path()) {
      set_target_path(from.target_path());
    }
    if (from.has_link_path()) {
      set_link_path(from.link_path());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void linkRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void linkRequest::CopyFrom(const linkRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool linkRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void linkRequest::Swap(linkRequest* other) {
  if (other != this) {
    std::swap(volume_name_, other->volume_name_);
    std::swap(target_path_, other->target_path_);
    std::swap(link_path_, other->link_path_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata linkRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = linkRequest_descriptor_;
  metadata.reflection = linkRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int listxattrRequest::kVolumeNameFieldNumber;
const int listxattrRequest::kPathFieldNumber;
const int listxattrRequest::kNamesOnlyFieldNumber;
#endif  // !_MSC_VER

listxattrRequest::listxattrRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void listxattrRequest::InitAsDefaultInstance() {
}

listxattrRequest::listxattrRequest(const listxattrRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void listxattrRequest::SharedCtor() {
  _cached_size_ = 0;
  volume_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  names_only_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

listxattrRequest::~listxattrRequest() {
  SharedDtor();
}

void listxattrRequest::SharedDtor() {
  if (volume_name_ != &::google::protobuf::internal::kEmptyString) {
    delete volume_name_;
  }
  if (path_ != &::google::protobuf::internal::kEmptyString) {
    delete path_;
  }
  if (this != default_instance_) {
  }
}

void listxattrRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* listxattrRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return listxattrRequest_descriptor_;
}

const listxattrRequest& listxattrRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_xtreemfs_2fMRC_2eproto();
  return *default_instance_;
}

listxattrRequest* listxattrRequest::default_instance_ = NULL;

listxattrRequest* listxattrRequest::New() const {
  return new listxattrRequest;
}

void listxattrRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_volume_name()) {
      if (volume_name_ != &::google::protobuf::internal::kEmptyString) {
        volume_name_->clear();
      }
    }
    if (has_path()) {
      if (path_ != &::google::protobuf::internal::kEmptyString) {
        path_->clear();
      }
    }
    names_only_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool listxattrRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string volume_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_volume_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->volume_name().data(), this->volume_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_path;
        break;
      }

      // required string path = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->path().data(), this->path().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_names_only;
        break;
      }

      // required bool names_only = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_names_only:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &names_only_)));
          set_has_names_only();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void listxattrRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string volume_name = 1;
  if (has_volume_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->volume_name().data(), this->volume_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->volume_name(), output);
  }

  // required string path = 2;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->path(), output);
  }

  // required bool names_only = 3;
  if (has_names_only()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->names_only(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* listxattrRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string volume_name = 1;
  if (has_volume_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->volume_name().data(), this->volume_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->volume_name(), target);
  }

  // required string path = 2;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->path(), target);
  }

  // required bool names_only = 3;
  if (has_names_only()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->names_only(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int listxattrRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string volume_name = 1;
    if (has_volume_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->volume_name());
    }

    // required string path = 2;
    if (has_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->path());
    }

    // required bool names_only = 3;
    if (has_names_only()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void listxattrRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const listxattrRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const listxattrRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void listxattrRequest::MergeFrom(const listxattrRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_volume_name()) {
      set_volume_name(from.volume_name());
    }
    if (from.has_path()) {
      set_path(from.path());
    }
    if (from.has_names_only()) {
      set_names_only(from.names_only());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void listxattrRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void listxattrRequest::CopyFrom(const listxattrRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool listxattrRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void listxattrRequest::Swap(listxattrRequest* other) {
  if (other != this) {
    std::swap(volume_name_, other->volume_name_);
    std::swap(path_, other->path_);
    std::swap(names_only_, other->names_only_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata listxattrRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = listxattrRequest_descriptor_;
  metadata.reflection = listxattrRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int listxattrResponse::kXattrsFieldNumber;
#endif  // !_MSC_VER

listxattrResponse::listxattrResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void listxattrResponse::InitAsDefaultInstance() {
}

listxattrResponse::listxattrResponse(const listxattrResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void listxattrResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

listxattrResponse::~listxattrResponse() {
  SharedDtor();
}

void listxattrResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void listxattrResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* listxattrResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return listxattrResponse_descriptor_;
}

const listxattrResponse& listxattrResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_xtreemfs_2fMRC_2eproto();
  return *default_instance_;
}

listxattrResponse* listxattrResponse::default_instance_ = NULL;

listxattrResponse* listxattrResponse::New() const {
  return new listxattrResponse;
}

void listxattrResponse::Clear() {
  xattrs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool listxattrResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .xtreemfs.pbrpc.XAttr xattrs = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_xattrs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_xattrs()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_xattrs;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void listxattrResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .xtreemfs.pbrpc.XAttr xattrs = 1;
  for (int i = 0; i < this->xattrs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->xattrs(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* listxattrResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .xtreemfs.pbrpc.XAttr xattrs = 1;
  for (int i = 0; i < this->xattrs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->xattrs(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int listxattrResponse::ByteSize() const {
  int total_size = 0;

  // repeated .xtreemfs.pbrpc.XAttr xattrs = 1;
  total_size += 1 * this->xattrs_size();
  for (int i = 0; i < this->xattrs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->xattrs(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void listxattrResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const listxattrResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const listxattrResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void listxattrResponse::MergeFrom(const listxattrResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  xattrs_.MergeFrom(from.xattrs_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void listxattrResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void listxattrResponse::CopyFrom(const listxattrResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool listxattrResponse::IsInitialized() const {

  for (int i = 0; i < xattrs_size(); i++) {
    if (!this->xattrs(i).IsInitialized()) return false;
  }
  return true;
}

void listxattrResponse::Swap(listxattrResponse* other) {
  if (other != this) {
    xattrs_.Swap(&other->xattrs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata listxattrResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = listxattrResponse_descriptor_;
  metadata.reflection = listxattrResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int mkdirRequest::kVolumeNameFieldNumber;
const int mkdirRequest::kPathFieldNumber;
const int mkdirRequest::kModeFieldNumber;
#endif  // !_MSC_VER

mkdirRequest::mkdirRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void mkdirRequest::InitAsDefaultInstance() {
}

mkdirRequest::mkdirRequest(const mkdirRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void mkdirRequest::SharedCtor() {
  _cached_size_ = 0;
  volume_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  mode_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mkdirRequest::~mkdirRequest() {
  SharedDtor();
}

void mkdirRequest::SharedDtor() {
  if (volume_name_ != &::google::protobuf::internal::kEmptyString) {
    delete volume_name_;
  }
  if (path_ != &::google::protobuf::internal::kEmptyString) {
    delete path_;
  }
  if (this != default_instance_) {
  }
}

void mkdirRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mkdirRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mkdirRequest_descriptor_;
}

const mkdirRequest& mkdirRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_xtreemfs_2fMRC_2eproto();
  return *default_instance_;
}

mkdirRequest* mkdirRequest::default_instance_ = NULL;

mkdirRequest* mkdirRequest::New() const {
  return new mkdirRequest;
}

void mkdirRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_volume_name()) {
      if (volume_name_ != &::google::protobuf::internal::kEmptyString) {
        volume_name_->clear();
      }
    }
    if (has_path()) {
      if (path_ != &::google::protobuf::internal::kEmptyString) {
        path_->clear();
      }
    }
    mode_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mkdirRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string volume_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_volume_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->volume_name().data(), this->volume_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_path;
        break;
      }

      // required string path = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->path().data(), this->path().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_mode;
        break;
      }

      // required fixed32 mode = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_mode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &mode_)));
          set_has_mode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void mkdirRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string volume_name = 1;
  if (has_volume_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->volume_name().data(), this->volume_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->volume_name(), output);
  }

  // required string path = 2;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->path(), output);
  }

  // required fixed32 mode = 3;
  if (has_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(3, this->mode(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* mkdirRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string volume_name = 1;
  if (has_volume_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->volume_name().data(), this->volume_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->volume_name(), target);
  }

  // required string path = 2;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->path(), target);
  }

  // required fixed32 mode = 3;
  if (has_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(3, this->mode(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int mkdirRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string volume_name = 1;
    if (has_volume_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->volume_name());
    }

    // required string path = 2;
    if (has_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->path());
    }

    // required fixed32 mode = 3;
    if (has_mode()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mkdirRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mkdirRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mkdirRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mkdirRequest::MergeFrom(const mkdirRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_volume_name()) {
      set_volume_name(from.volume_name());
    }
    if (from.has_path()) {
      set_path(from.path());
    }
    if (from.has_mode()) {
      set_mode(from.mode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mkdirRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mkdirRequest::CopyFrom(const mkdirRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mkdirRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void mkdirRequest::Swap(mkdirRequest* other) {
  if (other != this) {
    std::swap(volume_name_, other->volume_name_);
    std::swap(path_, other->path_);
    std::swap(mode_, other->mode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mkdirRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mkdirRequest_descriptor_;
  metadata.reflection = mkdirRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int openRequest::kVolumeNameFieldNumber;
const int openRequest::kPathFieldNumber;
const int openRequest::kFlagsFieldNumber;
const int openRequest::kModeFieldNumber;
const int openRequest::kAttributesFieldNumber;
const int openRequest::kCoordinatesFieldNumber;
#endif  // !_MSC_VER

openRequest::openRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void openRequest::InitAsDefaultInstance() {
  coordinates_ = const_cast< ::xtreemfs::pbrpc::VivaldiCoordinates*>(&::xtreemfs::pbrpc::VivaldiCoordinates::default_instance());
}

openRequest::openRequest(const openRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void openRequest::SharedCtor() {
  _cached_size_ = 0;
  volume_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  flags_ = 0u;
  mode_ = 0u;
  attributes_ = 0u;
  coordinates_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

openRequest::~openRequest() {
  SharedDtor();
}

void openRequest::SharedDtor() {
  if (volume_name_ != &::google::protobuf::internal::kEmptyString) {
    delete volume_name_;
  }
  if (path_ != &::google::protobuf::internal::kEmptyString) {
    delete path_;
  }
  if (this != default_instance_) {
    delete coordinates_;
  }
}

void openRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* openRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return openRequest_descriptor_;
}

const openRequest& openRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_xtreemfs_2fMRC_2eproto();
  return *default_instance_;
}

openRequest* openRequest::default_instance_ = NULL;

openRequest* openRequest::New() const {
  return new openRequest;
}

void openRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_volume_name()) {
      if (volume_name_ != &::google::protobuf::internal::kEmptyString) {
        volume_name_->clear();
      }
    }
    if (has_path()) {
      if (path_ != &::google::protobuf::internal::kEmptyString) {
        path_->clear();
      }
    }
    flags_ = 0u;
    mode_ = 0u;
    attributes_ = 0u;
    if (has_coordinates()) {
      if (coordinates_ != NULL) coordinates_->::xtreemfs::pbrpc::VivaldiCoordinates::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool openRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string volume_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_volume_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->volume_name().data(), this->volume_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_path;
        break;
      }

      // required string path = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->path().data(), this->path().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_flags;
        break;
      }

      // required fixed32 flags = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_flags:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &flags_)));
          set_has_flags();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_mode;
        break;
      }

      // required fixed32 mode = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_mode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &mode_)));
          set_has_mode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_attributes;
        break;
      }

      // required fixed32 attributes = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_attributes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &attributes_)));
          set_has_attributes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_coordinates;
        break;
      }

      // optional .xtreemfs.pbrpc.VivaldiCoordinates coordinates = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_coordinates:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_coordinates()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void openRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string volume_name = 1;
  if (has_volume_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->volume_name().data(), this->volume_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->volume_name(), output);
  }

  // required string path = 2;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->path(), output);
  }

  // required fixed32 flags = 3;
  if (has_flags()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(3, this->flags(), output);
  }

  // required fixed32 mode = 4;
  if (has_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(4, this->mode(), output);
  }

  // required fixed32 attributes = 5;
  if (has_attributes()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(5, this->attributes(), output);
  }

  // optional .xtreemfs.pbrpc.VivaldiCoordinates coordinates = 6;
  if (has_coordinates()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->coordinates(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* openRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string volume_name = 1;
  if (has_volume_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->volume_name().data(), this->volume_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->volume_name(), target);
  }

  // required string path = 2;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->path(), target);
  }

  // required fixed32 flags = 3;
  if (has_flags()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(3, this->flags(), target);
  }

  // required fixed32 mode = 4;
  if (has_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(4, this->mode(), target);
  }

  // required fixed32 attributes = 5;
  if (has_attributes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(5, this->attributes(), target);
  }

  // optional .xtreemfs.pbrpc.VivaldiCoordinates coordinates = 6;
  if (has_coordinates()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->coordinates(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int openRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string volume_name = 1;
    if (has_volume_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->volume_name());
    }

    // required string path = 2;
    if (has_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->path());
    }

    // required fixed32 flags = 3;
    if (has_flags()) {
      total_size += 1 + 4;
    }

    // required fixed32 mode = 4;
    if (has_mode()) {
      total_size += 1 + 4;
    }

    // required fixed32 attributes = 5;
    if (has_attributes()) {
      total_size += 1 + 4;
    }

    // optional .xtreemfs.pbrpc.VivaldiCoordinates coordinates = 6;
    if (has_coordinates()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->coordinates());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void openRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const openRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const openRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void openRequest::MergeFrom(const openRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_volume_name()) {
      set_volume_name(from.volume_name());
    }
    if (from.has_path()) {
      set_path(from.path());
    }
    if (from.has_flags()) {
      set_flags(from.flags());
    }
    if (from.has_mode()) {
      set_mode(from.mode());
    }
    if (from.has_attributes()) {
      set_attributes(from.attributes());
    }
    if (from.has_coordinates()) {
      mutable_coordinates()->::xtreemfs::pbrpc::VivaldiCoordinates::MergeFrom(from.coordinates());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void openRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void openRequest::CopyFrom(const openRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool openRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  if (has_coordinates()) {
    if (!this->coordinates().IsInitialized()) return false;
  }
  return true;
}

void openRequest::Swap(openRequest* other) {
  if (other != this) {
    std::swap(volume_name_, other->volume_name_);
    std::swap(path_, other->path_);
    std::swap(flags_, other->flags_);
    std::swap(mode_, other->mode_);
    std::swap(attributes_, other->attributes_);
    std::swap(coordinates_, other->coordinates_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata openRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = openRequest_descriptor_;
  metadata.reflection = openRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int openResponse::kCredsFieldNumber;
const int openResponse::kTimestampSFieldNumber;
#endif  // !_MSC_VER

openResponse::openResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void openResponse::InitAsDefaultInstance() {
  creds_ = const_cast< ::xtreemfs::pbrpc::FileCredentials*>(&::xtreemfs::pbrpc::FileCredentials::default_instance());
}

openResponse::openResponse(const openResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void openResponse::SharedCtor() {
  _cached_size_ = 0;
  creds_ = NULL;
  timestamp_s_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

openResponse::~openResponse() {
  SharedDtor();
}

void openResponse::SharedDtor() {
  if (this != default_instance_) {
    delete creds_;
  }
}

void openResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* openResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return openResponse_descriptor_;
}

const openResponse& openResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_xtreemfs_2fMRC_2eproto();
  return *default_instance_;
}

openResponse* openResponse::default_instance_ = NULL;

openResponse* openResponse::New() const {
  return new openResponse;
}

void openResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_creds()) {
      if (creds_ != NULL) creds_->::xtreemfs::pbrpc::FileCredentials::Clear();
    }
    timestamp_s_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool openResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .xtreemfs.pbrpc.FileCredentials creds = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_creds()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_timestamp_s;
        break;
      }

      // required fixed32 timestamp_s = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_timestamp_s:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &timestamp_s_)));
          set_has_timestamp_s();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void openResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .xtreemfs.pbrpc.FileCredentials creds = 1;
  if (has_creds()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->creds(), output);
  }

  // required fixed32 timestamp_s = 2;
  if (has_timestamp_s()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(2, this->timestamp_s(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* openResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .xtreemfs.pbrpc.FileCredentials creds = 1;
  if (has_creds()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->creds(), target);
  }

  // required fixed32 timestamp_s = 2;
  if (has_timestamp_s()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(2, this->timestamp_s(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int openResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .xtreemfs.pbrpc.FileCredentials creds = 1;
    if (has_creds()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->creds());
    }

    // required fixed32 timestamp_s = 2;
    if (has_timestamp_s()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void openResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const openResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const openResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void openResponse::MergeFrom(const openResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_creds()) {
      mutable_creds()->::xtreemfs::pbrpc::FileCredentials::MergeFrom(from.creds());
    }
    if (from.has_timestamp_s()) {
      set_timestamp_s(from.timestamp_s());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void openResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void openResponse::CopyFrom(const openResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool openResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_creds()) {
    if (!this->creds().IsInitialized()) return false;
  }
  return true;
}

void openResponse::Swap(openResponse* other) {
  if (other != this) {
    std::swap(creds_, other->creds_);
    std::swap(timestamp_s_, other->timestamp_s_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata openResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = openResponse_descriptor_;
  metadata.reflection = openResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int readdirRequest::kVolumeNameFieldNumber;
const int readdirRequest::kPathFieldNumber;
const int readdirRequest::kKnownEtagFieldNumber;
const int readdirRequest::kLimitDirectoryEntriesCountFieldNumber;
const int readdirRequest::kNamesOnlyFieldNumber;
const int readdirRequest::kSeenDirectoryEntriesCountFieldNumber;
#endif  // !_MSC_VER

readdirRequest::readdirRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void readdirRequest::InitAsDefaultInstance() {
}

readdirRequest::readdirRequest(const readdirRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void readdirRequest::SharedCtor() {
  _cached_size_ = 0;
  volume_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  known_etag_ = GOOGLE_ULONGLONG(0);
  limit_directory_entries_count_ = 0u;
  names_only_ = false;
  seen_directory_entries_count_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

readdirRequest::~readdirRequest() {
  SharedDtor();
}

void readdirRequest::SharedDtor() {
  if (volume_name_ != &::google::protobuf::internal::kEmptyString) {
    delete volume_name_;
  }
  if (path_ != &::google::protobuf::internal::kEmptyString) {
    delete path_;
  }
  if (this != default_instance_) {
  }
}

void readdirRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* readdirRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return readdirRequest_descriptor_;
}

const readdirRequest& readdirRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_xtreemfs_2fMRC_2eproto();
  return *default_instance_;
}

readdirRequest* readdirRequest::default_instance_ = NULL;

readdirRequest* readdirRequest::New() const {
  return new readdirRequest;
}

void readdirRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_volume_name()) {
      if (volume_name_ != &::google::protobuf::internal::kEmptyString) {
        volume_name_->clear();
      }
    }
    if (has_path()) {
      if (path_ != &::google::protobuf::internal::kEmptyString) {
        path_->clear();
      }
    }
    known_etag_ = GOOGLE_ULONGLONG(0);
    limit_directory_entries_count_ = 0u;
    names_only_ = false;
    seen_directory_entries_count_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool readdirRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string volume_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_volume_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->volume_name().data(), this->volume_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_path;
        break;
      }

      // required string path = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->path().data(), this->path().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_known_etag;
        break;
      }

      // required fixed64 known_etag = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_known_etag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &known_etag_)));
          set_has_known_etag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_limit_directory_entries_count;
        break;
      }

      // required fixed32 limit_directory_entries_count = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_limit_directory_entries_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &limit_directory_entries_count_)));
          set_has_limit_directory_entries_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_names_only;
        break;
      }

      // required bool names_only = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_names_only:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &names_only_)));
          set_has_names_only();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(49)) goto parse_seen_directory_entries_count;
        break;
      }

      // required fixed64 seen_directory_entries_count = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_seen_directory_entries_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &seen_directory_entries_count_)));
          set_has_seen_directory_entries_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void readdirRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string volume_name = 1;
  if (has_volume_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->volume_name().data(), this->volume_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->volume_name(), output);
  }

  // required string path = 2;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->path(), output);
  }

  // required fixed64 known_etag = 3;
  if (has_known_etag()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(3, this->known_etag(), output);
  }

  // required fixed32 limit_directory_entries_count = 4;
  if (has_limit_directory_entries_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(4, this->limit_directory_entries_count(), output);
  }

  // required bool names_only = 5;
  if (has_names_only()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->names_only(), output);
  }

  // required fixed64 seen_directory_entries_count = 6;
  if (has_seen_directory_entries_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(6, this->seen_directory_entries_count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* readdirRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string volume_name = 1;
  if (has_volume_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->volume_name().data(), this->volume_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->volume_name(), target);
  }

  // required string path = 2;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->path(), target);
  }

  // required fixed64 known_etag = 3;
  if (has_known_etag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(3, this->known_etag(), target);
  }

  // required fixed32 limit_directory_entries_count = 4;
  if (has_limit_directory_entries_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(4, this->limit_directory_entries_count(), target);
  }

  // required bool names_only = 5;
  if (has_names_only()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->names_only(), target);
  }

  // required fixed64 seen_directory_entries_count = 6;
  if (has_seen_directory_entries_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(6, this->seen_directory_entries_count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int readdirRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string volume_name = 1;
    if (has_volume_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->volume_name());
    }

    // required string path = 2;
    if (has_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->path());
    }

    // required fixed64 known_etag = 3;
    if (has_known_etag()) {
      total_size += 1 + 8;
    }

    // required fixed32 limit_directory_entries_count = 4;
    if (has_limit_directory_entries_count()) {
      total_size += 1 + 4;
    }

    // required bool names_only = 5;
    if (has_names_only()) {
      total_size += 1 + 1;
    }

    // required fixed64 seen_directory_entries_count = 6;
    if (has_seen_directory_entries_count()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void readdirRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const readdirRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const readdirRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void readdirRequest::MergeFrom(const readdirRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_volume_name()) {
      set_volume_name(from.volume_name());
    }
    if (from.has_path()) {
      set_path(from.path());
    }
    if (from.has_known_etag()) {
      set_known_etag(from.known_etag());
    }
    if (from.has_limit_directory_entries_count()) {
      set_limit_directory_entries_count(from.limit_directory_entries_count());
    }
    if (from.has_names_only()) {
      set_names_only(from.names_only());
    }
    if (from.has_seen_directory_entries_count()) {
      set_seen_directory_entries_count(from.seen_directory_entries_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void readdirRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void readdirRequest::CopyFrom(const readdirRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool readdirRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void readdirRequest::Swap(readdirRequest* other) {
  if (other != this) {
    std::swap(volume_name_, other->volume_name_);
    std::swap(path_, other->path_);
    std::swap(known_etag_, other->known_etag_);
    std::swap(limit_directory_entries_count_, other->limit_directory_entries_count_);
    std::swap(names_only_, other->names_only_);
    std::swap(seen_directory_entries_count_, other->seen_directory_entries_count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata readdirRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = readdirRequest_descriptor_;
  metadata.reflection = readdirRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int readlinkRequest::kVolumeNameFieldNumber;
const int readlinkRequest::kPathFieldNumber;
#endif  // !_MSC_VER

readlinkRequest::readlinkRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void readlinkRequest::InitAsDefaultInstance() {
}

readlinkRequest::readlinkRequest(const readlinkRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void readlinkRequest::SharedCtor() {
  _cached_size_ = 0;
  volume_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

readlinkRequest::~readlinkRequest() {
  SharedDtor();
}

void readlinkRequest::SharedDtor() {
  if (volume_name_ != &::google::protobuf::internal::kEmptyString) {
    delete volume_name_;
  }
  if (path_ != &::google::protobuf::internal::kEmptyString) {
    delete path_;
  }
  if (this != default_instance_) {
  }
}

void readlinkRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* readlinkRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return readlinkRequest_descriptor_;
}

const readlinkRequest& readlinkRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_xtreemfs_2fMRC_2eproto();
  return *default_instance_;
}

readlinkRequest* readlinkRequest::default_instance_ = NULL;

readlinkRequest* readlinkRequest::New() const {
  return new readlinkRequest;
}

void readlinkRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_volume_name()) {
      if (volume_name_ != &::google::protobuf::internal::kEmptyString) {
        volume_name_->clear();
      }
    }
    if (has_path()) {
      if (path_ != &::google::protobuf::internal::kEmptyString) {
        path_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool readlinkRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string volume_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_volume_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->volume_name().data(), this->volume_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_path;
        break;
      }

      // required string path = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->path().data(), this->path().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void readlinkRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string volume_name = 1;
  if (has_volume_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->volume_name().data(), this->volume_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->volume_name(), output);
  }

  // required string path = 2;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->path(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* readlinkRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string volume_name = 1;
  if (has_volume_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->volume_name().data(), this->volume_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->volume_name(), target);
  }

  // required string path = 2;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->path(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int readlinkRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string volume_name = 1;
    if (has_volume_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->volume_name());
    }

    // required string path = 2;
    if (has_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->path());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void readlinkRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const readlinkRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const readlinkRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void readlinkRequest::MergeFrom(const readlinkRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_volume_name()) {
      set_volume_name(from.volume_name());
    }
    if (from.has_path()) {
      set_path(from.path());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void readlinkRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void readlinkRequest::CopyFrom(const readlinkRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool readlinkRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void readlinkRequest::Swap(readlinkRequest* other) {
  if (other != this) {
    std::swap(volume_name_, other->volume_name_);
    std::swap(path_, other->path_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata readlinkRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = readlinkRequest_descriptor_;
  metadata.reflection = readlinkRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int readlinkResponse::kLinkTargetPathFieldNumber;
#endif  // !_MSC_VER

readlinkResponse::readlinkResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void readlinkResponse::InitAsDefaultInstance() {
}

readlinkResponse::readlinkResponse(const readlinkResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void readlinkResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

readlinkResponse::~readlinkResponse() {
  SharedDtor();
}

void readlinkResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void readlinkResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* readlinkResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return readlinkResponse_descriptor_;
}

const readlinkResponse& readlinkResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_xtreemfs_2fMRC_2eproto();
  return *default_instance_;
}

readlinkResponse* readlinkResponse::default_instance_ = NULL;

readlinkResponse* readlinkResponse::New() const {
  return new readlinkResponse;
}

void readlinkResponse::Clear() {
  link_target_path_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool readlinkResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string link_target_path = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_link_target_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_link_target_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->link_target_path(this->link_target_path_size() - 1).data(),
            this->link_target_path(this->link_target_path_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_link_target_path;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void readlinkResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated string link_target_path = 1;
  for (int i = 0; i < this->link_target_path_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->link_target_path(i).data(), this->link_target_path(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->link_target_path(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* readlinkResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated string link_target_path = 1;
  for (int i = 0; i < this->link_target_path_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->link_target_path(i).data(), this->link_target_path(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->link_target_path(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int readlinkResponse::ByteSize() const {
  int total_size = 0;

  // repeated string link_target_path = 1;
  total_size += 1 * this->link_target_path_size();
  for (int i = 0; i < this->link_target_path_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->link_target_path(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void readlinkResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const readlinkResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const readlinkResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void readlinkResponse::MergeFrom(const readlinkResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  link_target_path_.MergeFrom(from.link_target_path_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void readlinkResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void readlinkResponse::CopyFrom(const readlinkResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool readlinkResponse::IsInitialized() const {

  return true;
}

void readlinkResponse::Swap(readlinkResponse* other) {
  if (other != this) {
    link_target_path_.Swap(&other->link_target_path_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata readlinkResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = readlinkResponse_descriptor_;
  metadata.reflection = readlinkResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int removexattrRequest::kVolumeNameFieldNumber;
const int removexattrRequest::kPathFieldNumber;
const int removexattrRequest::kNameFieldNumber;
#endif  // !_MSC_VER

removexattrRequest::removexattrRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void removexattrRequest::InitAsDefaultInstance() {
}

removexattrRequest::removexattrRequest(const removexattrRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void removexattrRequest::SharedCtor() {
  _cached_size_ = 0;
  volume_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

removexattrRequest::~removexattrRequest() {
  SharedDtor();
}

void removexattrRequest::SharedDtor() {
  if (volume_name_ != &::google::protobuf::internal::kEmptyString) {
    delete volume_name_;
  }
  if (path_ != &::google::protobuf::internal::kEmptyString) {
    delete path_;
  }
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void removexattrRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* removexattrRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return removexattrRequest_descriptor_;
}

const removexattrRequest& removexattrRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_xtreemfs_2fMRC_2eproto();
  return *default_instance_;
}

removexattrRequest* removexattrRequest::default_instance_ = NULL;

removexattrRequest* removexattrRequest::New() const {
  return new removexattrRequest;
}

void removexattrRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_volume_name()) {
      if (volume_name_ != &::google::protobuf::internal::kEmptyString) {
        volume_name_->clear();
      }
    }
    if (has_path()) {
      if (path_ != &::google::protobuf::internal::kEmptyString) {
        path_->clear();
      }
    }
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool removexattrRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string volume_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_volume_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->volume_name().data(), this->volume_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_path;
        break;
      }

      // required string path = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->path().data(), this->path().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // required string name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void removexattrRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string volume_name = 1;
  if (has_volume_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->volume_name().data(), this->volume_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->volume_name(), output);
  }

  // required string path = 2;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->path(), output);
  }

  // required string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* removexattrRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string volume_name = 1;
  if (has_volume_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->volume_name().data(), this->volume_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->volume_name(), target);
  }

  // required string path = 2;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->path(), target);
  }

  // required string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int removexattrRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string volume_name = 1;
    if (has_volume_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->volume_name());
    }

    // required string path = 2;
    if (has_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->path());
    }

    // required string name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void removexattrRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const removexattrRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const removexattrRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void removexattrRequest::MergeFrom(const removexattrRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_volume_name()) {
      set_volume_name(from.volume_name());
    }
    if (from.has_path()) {
      set_path(from.path());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void removexattrRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void removexattrRequest::CopyFrom(const removexattrRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool removexattrRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void removexattrRequest::Swap(removexattrRequest* other) {
  if (other != this) {
    std::swap(volume_name_, other->volume_name_);
    std::swap(path_, other->path_);
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata removexattrRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = removexattrRequest_descriptor_;
  metadata.reflection = removexattrRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int renameRequest::kVolumeNameFieldNumber;
const int renameRequest::kSourcePathFieldNumber;
const int renameRequest::kTargetPathFieldNumber;
#endif  // !_MSC_VER

renameRequest::renameRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void renameRequest::InitAsDefaultInstance() {
}

renameRequest::renameRequest(const renameRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void renameRequest::SharedCtor() {
  _cached_size_ = 0;
  volume_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  source_path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  target_path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

renameRequest::~renameRequest() {
  SharedDtor();
}

void renameRequest::SharedDtor() {
  if (volume_name_ != &::google::protobuf::internal::kEmptyString) {
    delete volume_name_;
  }
  if (source_path_ != &::google::protobuf::internal::kEmptyString) {
    delete source_path_;
  }
  if (target_path_ != &::google::protobuf::internal::kEmptyString) {
    delete target_path_;
  }
  if (this != default_instance_) {
  }
}

void renameRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* renameRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return renameRequest_descriptor_;
}

const renameRequest& renameRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_xtreemfs_2fMRC_2eproto();
  return *default_instance_;
}

renameRequest* renameRequest::default_instance_ = NULL;

renameRequest* renameRequest::New() const {
  return new renameRequest;
}

void renameRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_volume_name()) {
      if (volume_name_ != &::google::protobuf::internal::kEmptyString) {
        volume_name_->clear();
      }
    }
    if (has_source_path()) {
      if (source_path_ != &::google::protobuf::internal::kEmptyString) {
        source_path_->clear();
      }
    }
    if (has_target_path()) {
      if (target_path_ != &::google::protobuf::internal::kEmptyString) {
        target_path_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool renameRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string volume_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_volume_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->volume_name().data(), this->volume_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_source_path;
        break;
      }

      // required string source_path = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_source_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_source_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->source_path().data(), this->source_path().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_target_path;
        break;
      }

      // required string target_path = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_target_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_target_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->target_path().data(), this->target_path().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void renameRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string volume_name = 1;
  if (has_volume_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->volume_name().data(), this->volume_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->volume_name(), output);
  }

  // required string source_path = 2;
  if (has_source_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->source_path().data(), this->source_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->source_path(), output);
  }

  // required string target_path = 3;
  if (has_target_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->target_path().data(), this->target_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->target_path(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* renameRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string volume_name = 1;
  if (has_volume_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->volume_name().data(), this->volume_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->volume_name(), target);
  }

  // required string source_path = 2;
  if (has_source_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->source_path().data(), this->source_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->source_path(), target);
  }

  // required string target_path = 3;
  if (has_target_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->target_path().data(), this->target_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->target_path(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int renameRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string volume_name = 1;
    if (has_volume_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->volume_name());
    }

    // required string source_path = 2;
    if (has_source_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->source_path());
    }

    // required string target_path = 3;
    if (has_target_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->target_path());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void renameRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const renameRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const renameRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void renameRequest::MergeFrom(const renameRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_volume_name()) {
      set_volume_name(from.volume_name());
    }
    if (from.has_source_path()) {
      set_source_path(from.source_path());
    }
    if (from.has_target_path()) {
      set_target_path(from.target_path());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void renameRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void renameRequest::CopyFrom(const renameRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool renameRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void renameRequest::Swap(renameRequest* other) {
  if (other != this) {
    std::swap(volume_name_, other->volume_name_);
    std::swap(source_path_, other->source_path_);
    std::swap(target_path_, other->target_path_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata renameRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = renameRequest_descriptor_;
  metadata.reflection = renameRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int renameResponse::kTimestampSFieldNumber;
const int renameResponse::kCredsFieldNumber;
#endif  // !_MSC_VER

renameResponse::renameResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void renameResponse::InitAsDefaultInstance() {
  creds_ = const_cast< ::xtreemfs::pbrpc::FileCredentials*>(&::xtreemfs::pbrpc::FileCredentials::default_instance());
}

renameResponse::renameResponse(const renameResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void renameResponse::SharedCtor() {
  _cached_size_ = 0;
  timestamp_s_ = 0u;
  creds_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

renameResponse::~renameResponse() {
  SharedDtor();
}

void renameResponse::SharedDtor() {
  if (this != default_instance_) {
    delete creds_;
  }
}

void renameResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* renameResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return renameResponse_descriptor_;
}

const renameResponse& renameResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_xtreemfs_2fMRC_2eproto();
  return *default_instance_;
}

renameResponse* renameResponse::default_instance_ = NULL;

renameResponse* renameResponse::New() const {
  return new renameResponse;
}

void renameResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    timestamp_s_ = 0u;
    if (has_creds()) {
      if (creds_ != NULL) creds_->::xtreemfs::pbrpc::FileCredentials::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool renameResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed32 timestamp_s = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &timestamp_s_)));
          set_has_timestamp_s();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_creds;
        break;
      }

      // optional .xtreemfs.pbrpc.FileCredentials creds = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_creds:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_creds()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void renameResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed32 timestamp_s = 1;
  if (has_timestamp_s()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(1, this->timestamp_s(), output);
  }

  // optional .xtreemfs.pbrpc.FileCredentials creds = 2;
  if (has_creds()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->creds(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* renameResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed32 timestamp_s = 1;
  if (has_timestamp_s()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(1, this->timestamp_s(), target);
  }

  // optional .xtreemfs.pbrpc.FileCredentials creds = 2;
  if (has_creds()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->creds(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int renameResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed32 timestamp_s = 1;
    if (has_timestamp_s()) {
      total_size += 1 + 4;
    }

    // optional .xtreemfs.pbrpc.FileCredentials creds = 2;
    if (has_creds()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->creds());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void renameResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const renameResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const renameResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void renameResponse::MergeFrom(const renameResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_timestamp_s()) {
      set_timestamp_s(from.timestamp_s());
    }
    if (from.has_creds()) {
      mutable_creds()->::xtreemfs::pbrpc::FileCredentials::MergeFrom(from.creds());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void renameResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void renameResponse::CopyFrom(const renameResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool renameResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_creds()) {
    if (!this->creds().IsInitialized()) return false;
  }
  return true;
}

void renameResponse::Swap(renameResponse* other) {
  if (other != this) {
    std::swap(timestamp_s_, other->timestamp_s_);
    std::swap(creds_, other->creds_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata renameResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = renameResponse_descriptor_;
  metadata.reflection = renameResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int rmdirRequest::kVolumeNameFieldNumber;
const int rmdirRequest::kPathFieldNumber;
#endif  // !_MSC_VER

rmdirRequest::rmdirRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void rmdirRequest::InitAsDefaultInstance() {
}

rmdirRequest::rmdirRequest(const rmdirRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void rmdirRequest::SharedCtor() {
  _cached_size_ = 0;
  volume_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

rmdirRequest::~rmdirRequest() {
  SharedDtor();
}

void rmdirRequest::SharedDtor() {
  if (volume_name_ != &::google::protobuf::internal::kEmptyString) {
    delete volume_name_;
  }
  if (path_ != &::google::protobuf::internal::kEmptyString) {
    delete path_;
  }
  if (this != default_instance_) {
  }
}

void rmdirRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* rmdirRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return rmdirRequest_descriptor_;
}

const rmdirRequest& rmdirRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_xtreemfs_2fMRC_2eproto();
  return *default_instance_;
}

rmdirRequest* rmdirRequest::default_instance_ = NULL;

rmdirRequest* rmdirRequest::New() const {
  return new rmdirRequest;
}

void rmdirRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_volume_name()) {
      if (volume_name_ != &::google::protobuf::internal::kEmptyString) {
        volume_name_->clear();
      }
    }
    if (has_path()) {
      if (path_ != &::google::protobuf::internal::kEmptyString) {
        path_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool rmdirRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string volume_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_volume_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->volume_name().data(), this->volume_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_path;
        break;
      }

      // required string path = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->path().data(), this->path().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void rmdirRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string volume_name = 1;
  if (has_volume_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->volume_name().data(), this->volume_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->volume_name(), output);
  }

  // required string path = 2;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->path(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* rmdirRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string volume_name = 1;
  if (has_volume_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->volume_name().data(), this->volume_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->volume_name(), target);
  }

  // required string path = 2;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->path(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int rmdirRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string volume_name = 1;
    if (has_volume_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->volume_name());
    }

    // required string path = 2;
    if (has_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->path());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void rmdirRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const rmdirRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const rmdirRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void rmdirRequest::MergeFrom(const rmdirRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_volume_name()) {
      set_volume_name(from.volume_name());
    }
    if (from.has_path()) {
      set_path(from.path());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void rmdirRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void rmdirRequest::CopyFrom(const rmdirRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool rmdirRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void rmdirRequest::Swap(rmdirRequest* other) {
  if (other != this) {
    std::swap(volume_name_, other->volume_name_);
    std::swap(path_, other->path_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata rmdirRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = rmdirRequest_descriptor_;
  metadata.reflection = rmdirRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int setattrRequest::kVolumeNameFieldNumber;
const int setattrRequest::kPathFieldNumber;
const int setattrRequest::kStbufFieldNumber;
const int setattrRequest::kToSetFieldNumber;
#endif  // !_MSC_VER

setattrRequest::setattrRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void setattrRequest::InitAsDefaultInstance() {
  stbuf_ = const_cast< ::xtreemfs::pbrpc::Stat*>(&::xtreemfs::pbrpc::Stat::default_instance());
}

setattrRequest::setattrRequest(const setattrRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void setattrRequest::SharedCtor() {
  _cached_size_ = 0;
  volume_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  stbuf_ = NULL;
  to_set_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

setattrRequest::~setattrRequest() {
  SharedDtor();
}

void setattrRequest::SharedDtor() {
  if (volume_name_ != &::google::protobuf::internal::kEmptyString) {
    delete volume_name_;
  }
  if (path_ != &::google::protobuf::internal::kEmptyString) {
    delete path_;
  }
  if (this != default_instance_) {
    delete stbuf_;
  }
}

void setattrRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* setattrRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return setattrRequest_descriptor_;
}

const setattrRequest& setattrRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_xtreemfs_2fMRC_2eproto();
  return *default_instance_;
}

setattrRequest* setattrRequest::default_instance_ = NULL;

setattrRequest* setattrRequest::New() const {
  return new setattrRequest;
}

void setattrRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_volume_name()) {
      if (volume_name_ != &::google::protobuf::internal::kEmptyString) {
        volume_name_->clear();
      }
    }
    if (has_path()) {
      if (path_ != &::google::protobuf::internal::kEmptyString) {
        path_->clear();
      }
    }
    if (has_stbuf()) {
      if (stbuf_ != NULL) stbuf_->::xtreemfs::pbrpc::Stat::Clear();
    }
    to_set_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool setattrRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string volume_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_volume_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->volume_name().data(), this->volume_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_path;
        break;
      }

      // required string path = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->path().data(), this->path().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_stbuf;
        break;
      }

      // required .xtreemfs.pbrpc.Stat stbuf = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stbuf:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stbuf()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_to_set;
        break;
      }

      // required fixed32 to_set = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_to_set:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &to_set_)));
          set_has_to_set();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void setattrRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string volume_name = 1;
  if (has_volume_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->volume_name().data(), this->volume_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->volume_name(), output);
  }

  // required string path = 2;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->path(), output);
  }

  // required .xtreemfs.pbrpc.Stat stbuf = 3;
  if (has_stbuf()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->stbuf(), output);
  }

  // required fixed32 to_set = 4;
  if (has_to_set()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(4, this->to_set(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* setattrRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string volume_name = 1;
  if (has_volume_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->volume_name().data(), this->volume_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->volume_name(), target);
  }

  // required string path = 2;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->path(), target);
  }

  // required .xtreemfs.pbrpc.Stat stbuf = 3;
  if (has_stbuf()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->stbuf(), target);
  }

  // required fixed32 to_set = 4;
  if (has_to_set()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(4, this->to_set(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int setattrRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string volume_name = 1;
    if (has_volume_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->volume_name());
    }

    // required string path = 2;
    if (has_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->path());
    }

    // required .xtreemfs.pbrpc.Stat stbuf = 3;
    if (has_stbuf()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->stbuf());
    }

    // required fixed32 to_set = 4;
    if (has_to_set()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void setattrRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const setattrRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const setattrRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void setattrRequest::MergeFrom(const setattrRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_volume_name()) {
      set_volume_name(from.volume_name());
    }
    if (from.has_path()) {
      set_path(from.path());
    }
    if (from.has_stbuf()) {
      mutable_stbuf()->::xtreemfs::pbrpc::Stat::MergeFrom(from.stbuf());
    }
    if (from.has_to_set()) {
      set_to_set(from.to_set());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void setattrRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void setattrRequest::CopyFrom(const setattrRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool setattrRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  if (has_stbuf()) {
    if (!this->stbuf().IsInitialized()) return false;
  }
  return true;
}

void setattrRequest::Swap(setattrRequest* other) {
  if (other != this) {
    std::swap(volume_name_, other->volume_name_);
    std::swap(path_, other->path_);
    std::swap(stbuf_, other->stbuf_);
    std::swap(to_set_, other->to_set_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata setattrRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = setattrRequest_descriptor_;
  metadata.reflection = setattrRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int setxattrRequest::kVolumeNameFieldNumber;
const int setxattrRequest::kPathFieldNumber;
const int setxattrRequest::kNameFieldNumber;
const int setxattrRequest::kValueFieldNumber;
const int setxattrRequest::kValueBytesStringFieldNumber;
const int setxattrRequest::kFlagsFieldNumber;
#endif  // !_MSC_VER

setxattrRequest::setxattrRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void setxattrRequest::InitAsDefaultInstance() {
}

setxattrRequest::setxattrRequest(const setxattrRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void setxattrRequest::SharedCtor() {
  _cached_size_ = 0;
  volume_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  value_bytes_string_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  flags_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

setxattrRequest::~setxattrRequest() {
  SharedDtor();
}

void setxattrRequest::SharedDtor() {
  if (volume_name_ != &::google::protobuf::internal::kEmptyString) {
    delete volume_name_;
  }
  if (path_ != &::google::protobuf::internal::kEmptyString) {
    delete path_;
  }
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    delete value_;
  }
  if (value_bytes_string_ != &::google::protobuf::internal::kEmptyString) {
    delete value_bytes_string_;
  }
  if (this != default_instance_) {
  }
}

void setxattrRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* setxattrRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return setxattrRequest_descriptor_;
}

const setxattrRequest& setxattrRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_xtreemfs_2fMRC_2eproto();
  return *default_instance_;
}

setxattrRequest* setxattrRequest::default_instance_ = NULL;

setxattrRequest* setxattrRequest::New() const {
  return new setxattrRequest;
}

void setxattrRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_volume_name()) {
      if (volume_name_ != &::google::protobuf::internal::kEmptyString) {
        volume_name_->clear();
      }
    }
    if (has_path()) {
      if (path_ != &::google::protobuf::internal::kEmptyString) {
        path_->clear();
      }
    }
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_value()) {
      if (value_ != &::google::protobuf::internal::kEmptyString) {
        value_->clear();
      }
    }
    if (has_value_bytes_string()) {
      if (value_bytes_string_ != &::google::protobuf::internal::kEmptyString) {
        value_bytes_string_->clear();
      }
    }
    flags_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool setxattrRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string volume_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_volume_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->volume_name().data(), this->volume_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_path;
        break;
      }

      // required string path = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->path().data(), this->path().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // required string name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_value;
        break;
      }

      // required string value = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->value().data(), this->value().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_flags;
        break;
      }

      // required fixed32 flags = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_flags:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &flags_)));
          set_has_flags();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_value_bytes_string;
        break;
      }

      // optional bytes value_bytes_string = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_value_bytes_string:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_value_bytes_string()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void setxattrRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string volume_name = 1;
  if (has_volume_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->volume_name().data(), this->volume_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->volume_name(), output);
  }

  // required string path = 2;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->path(), output);
  }

  // required string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->name(), output);
  }

  // required string value = 4;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->value(), output);
  }

  // required fixed32 flags = 5;
  if (has_flags()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(5, this->flags(), output);
  }

  // optional bytes value_bytes_string = 6;
  if (has_value_bytes_string()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      6, this->value_bytes_string(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* setxattrRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string volume_name = 1;
  if (has_volume_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->volume_name().data(), this->volume_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->volume_name(), target);
  }

  // required string path = 2;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->path(), target);
  }

  // required string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  // required string value = 4;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->value(), target);
  }

  // required fixed32 flags = 5;
  if (has_flags()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(5, this->flags(), target);
  }

  // optional bytes value_bytes_string = 6;
  if (has_value_bytes_string()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->value_bytes_string(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int setxattrRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string volume_name = 1;
    if (has_volume_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->volume_name());
    }

    // required string path = 2;
    if (has_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->path());
    }

    // required string name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required string value = 4;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->value());
    }

    // optional bytes value_bytes_string = 6;
    if (has_value_bytes_string()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->value_bytes_string());
    }

    // required fixed32 flags = 5;
    if (has_flags()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void setxattrRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const setxattrRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const setxattrRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void setxattrRequest::MergeFrom(const setxattrRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_volume_name()) {
      set_volume_name(from.volume_name());
    }
    if (from.has_path()) {
      set_path(from.path());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
    if (from.has_value_bytes_string()) {
      set_value_bytes_string(from.value_bytes_string());
    }
    if (from.has_flags()) {
      set_flags(from.flags());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void setxattrRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void setxattrRequest::CopyFrom(const setxattrRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool setxattrRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000002f) != 0x0000002f) return false;

  return true;
}

void setxattrRequest::Swap(setxattrRequest* other) {
  if (other != this) {
    std::swap(volume_name_, other->volume_name_);
    std::swap(path_, other->path_);
    std::swap(name_, other->name_);
    std::swap(value_, other->value_);
    std::swap(value_bytes_string_, other->value_bytes_string_);
    std::swap(flags_, other->flags_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata setxattrRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = setxattrRequest_descriptor_;
  metadata.reflection = setxattrRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int statvfsRequest::kVolumeNameFieldNumber;
const int statvfsRequest::kKnownEtagFieldNumber;
#endif  // !_MSC_VER

statvfsRequest::statvfsRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void statvfsRequest::InitAsDefaultInstance() {
}

statvfsRequest::statvfsRequest(const statvfsRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void statvfsRequest::SharedCtor() {
  _cached_size_ = 0;
  volume_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  known_etag_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

statvfsRequest::~statvfsRequest() {
  SharedDtor();
}

void statvfsRequest::SharedDtor() {
  if (volume_name_ != &::google::protobuf::internal::kEmptyString) {
    delete volume_name_;
  }
  if (this != default_instance_) {
  }
}

void statvfsRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* statvfsRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return statvfsRequest_descriptor_;
}

const statvfsRequest& statvfsRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_xtreemfs_2fMRC_2eproto();
  return *default_instance_;
}

statvfsRequest* statvfsRequest::default_instance_ = NULL;

statvfsRequest* statvfsRequest::New() const {
  return new statvfsRequest;
}

void statvfsRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_volume_name()) {
      if (volume_name_ != &::google::protobuf::internal::kEmptyString) {
        volume_name_->clear();
      }
    }
    known_etag_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool statvfsRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string volume_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_volume_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->volume_name().data(), this->volume_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(41)) goto parse_known_etag;
        break;
      }

      // required fixed64 known_etag = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_known_etag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &known_etag_)));
          set_has_known_etag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void statvfsRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string volume_name = 1;
  if (has_volume_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->volume_name().data(), this->volume_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->volume_name(), output);
  }

  // required fixed64 known_etag = 5;
  if (has_known_etag()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(5, this->known_etag(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* statvfsRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string volume_name = 1;
  if (has_volume_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->volume_name().data(), this->volume_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->volume_name(), target);
  }

  // required fixed64 known_etag = 5;
  if (has_known_etag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(5, this->known_etag(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int statvfsRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string volume_name = 1;
    if (has_volume_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->volume_name());
    }

    // required fixed64 known_etag = 5;
    if (has_known_etag()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void statvfsRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const statvfsRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const statvfsRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void statvfsRequest::MergeFrom(const statvfsRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_volume_name()) {
      set_volume_name(from.volume_name());
    }
    if (from.has_known_etag()) {
      set_known_etag(from.known_etag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void statvfsRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void statvfsRequest::CopyFrom(const statvfsRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool statvfsRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void statvfsRequest::Swap(statvfsRequest* other) {
  if (other != this) {
    std::swap(volume_name_, other->volume_name_);
    std::swap(known_etag_, other->known_etag_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata statvfsRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = statvfsRequest_descriptor_;
  metadata.reflection = statvfsRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int symlinkRequest::kVolumeNameFieldNumber;
const int symlinkRequest::kTargetPathFieldNumber;
const int symlinkRequest::kLinkPathFieldNumber;
#endif  // !_MSC_VER

symlinkRequest::symlinkRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void symlinkRequest::InitAsDefaultInstance() {
}

symlinkRequest::symlinkRequest(const symlinkRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void symlinkRequest::SharedCtor() {
  _cached_size_ = 0;
  volume_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  target_path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  link_path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

symlinkRequest::~symlinkRequest() {
  SharedDtor();
}

void symlinkRequest::SharedDtor() {
  if (volume_name_ != &::google::protobuf::internal::kEmptyString) {
    delete volume_name_;
  }
  if (target_path_ != &::google::protobuf::internal::kEmptyString) {
    delete target_path_;
  }
  if (link_path_ != &::google::protobuf::internal::kEmptyString) {
    delete link_path_;
  }
  if (this != default_instance_) {
  }
}

void symlinkRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* symlinkRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return symlinkRequest_descriptor_;
}

const symlinkRequest& symlinkRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_xtreemfs_2fMRC_2eproto();
  return *default_instance_;
}

symlinkRequest* symlinkRequest::default_instance_ = NULL;

symlinkRequest* symlinkRequest::New() const {
  return new symlinkRequest;
}

void symlinkRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_volume_name()) {
      if (volume_name_ != &::google::protobuf::internal::kEmptyString) {
        volume_name_->clear();
      }
    }
    if (has_target_path()) {
      if (target_path_ != &::google::protobuf::internal::kEmptyString) {
        target_path_->clear();
      }
    }
    if (has_link_path()) {
      if (link_path_ != &::google::protobuf::internal::kEmptyString) {
        link_path_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool symlinkRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string volume_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_volume_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->volume_name().data(), this->volume_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_target_path;
        break;
      }

      // required string target_path = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_target_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_target_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->target_path().data(), this->target_path().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_link_path;
        break;
      }

      // required string link_path = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_link_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_link_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->link_path().data(), this->link_path().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void symlinkRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string volume_name = 1;
  if (has_volume_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->volume_name().data(), this->volume_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->volume_name(), output);
  }

  // required string target_path = 2;
  if (has_target_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->target_path().data(), this->target_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->target_path(), output);
  }

  // required string link_path = 3;
  if (has_link_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->link_path().data(), this->link_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->link_path(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* symlinkRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string volume_name = 1;
  if (has_volume_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->volume_name().data(), this->volume_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->volume_name(), target);
  }

  // required string target_path = 2;
  if (has_target_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->target_path().data(), this->target_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->target_path(), target);
  }

  // required string link_path = 3;
  if (has_link_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->link_path().data(), this->link_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->link_path(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int symlinkRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string volume_name = 1;
    if (has_volume_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->volume_name());
    }

    // required string target_path = 2;
    if (has_target_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->target_path());
    }

    // required string link_path = 3;
    if (has_link_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->link_path());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void symlinkRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const symlinkRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const symlinkRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void symlinkRequest::MergeFrom(const symlinkRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_volume_name()) {
      set_volume_name(from.volume_name());
    }
    if (from.has_target_path()) {
      set_target_path(from.target_path());
    }
    if (from.has_link_path()) {
      set_link_path(from.link_path());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void symlinkRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void symlinkRequest::CopyFrom(const symlinkRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool symlinkRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void symlinkRequest::Swap(symlinkRequest* other) {
  if (other != this) {
    std::swap(volume_name_, other->volume_name_);
    std::swap(target_path_, other->target_path_);
    std::swap(link_path_, other->link_path_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata symlinkRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = symlinkRequest_descriptor_;
  metadata.reflection = symlinkRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int unlinkRequest::kVolumeNameFieldNumber;
const int unlinkRequest::kPathFieldNumber;
#endif  // !_MSC_VER

unlinkRequest::unlinkRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void unlinkRequest::InitAsDefaultInstance() {
}

unlinkRequest::unlinkRequest(const unlinkRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void unlinkRequest::SharedCtor() {
  _cached_size_ = 0;
  volume_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

unlinkRequest::~unlinkRequest() {
  SharedDtor();
}

void unlinkRequest::SharedDtor() {
  if (volume_name_ != &::google::protobuf::internal::kEmptyString) {
    delete volume_name_;
  }
  if (path_ != &::google::protobuf::internal::kEmptyString) {
    delete path_;
  }
  if (this != default_instance_) {
  }
}

void unlinkRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* unlinkRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return unlinkRequest_descriptor_;
}

const unlinkRequest& unlinkRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_xtreemfs_2fMRC_2eproto();
  return *default_instance_;
}

unlinkRequest* unlinkRequest::default_instance_ = NULL;

unlinkRequest* unlinkRequest::New() const {
  return new unlinkRequest;
}

void unlinkRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_volume_name()) {
      if (volume_name_ != &::google::protobuf::internal::kEmptyString) {
        volume_name_->clear();
      }
    }
    if (has_path()) {
      if (path_ != &::google::protobuf::internal::kEmptyString) {
        path_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool unlinkRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string volume_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_volume_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->volume_name().data(), this->volume_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_path;
        break;
      }

      // required string path = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->path().data(), this->path().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void unlinkRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string volume_name = 1;
  if (has_volume_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->volume_name().data(), this->volume_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->volume_name(), output);
  }

  // required string path = 2;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->path(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* unlinkRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string volume_name = 1;
  if (has_volume_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->volume_name().data(), this->volume_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->volume_name(), target);
  }

  // required string path = 2;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->path(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int unlinkRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string volume_name = 1;
    if (has_volume_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->volume_name());
    }

    // required string path = 2;
    if (has_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->path());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void unlinkRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const unlinkRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const unlinkRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void unlinkRequest::MergeFrom(const unlinkRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_volume_name()) {
      set_volume_name(from.volume_name());
    }
    if (from.has_path()) {
      set_path(from.path());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void unlinkRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void unlinkRequest::CopyFrom(const unlinkRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool unlinkRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void unlinkRequest::Swap(unlinkRequest* other) {
  if (other != this) {
    std::swap(volume_name_, other->volume_name_);
    std::swap(path_, other->path_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata unlinkRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = unlinkRequest_descriptor_;
  metadata.reflection = unlinkRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int unlinkResponse::kTimestampSFieldNumber;
const int unlinkResponse::kCredsFieldNumber;
#endif  // !_MSC_VER

unlinkResponse::unlinkResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void unlinkResponse::InitAsDefaultInstance() {
  creds_ = const_cast< ::xtreemfs::pbrpc::FileCredentials*>(&::xtreemfs::pbrpc::FileCredentials::default_instance());
}

unlinkResponse::unlinkResponse(const unlinkResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void unlinkResponse::SharedCtor() {
  _cached_size_ = 0;
  timestamp_s_ = 0u;
  creds_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

unlinkResponse::~unlinkResponse() {
  SharedDtor();
}

void unlinkResponse::SharedDtor() {
  if (this != default_instance_) {
    delete creds_;
  }
}

void unlinkResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* unlinkResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return unlinkResponse_descriptor_;
}

const unlinkResponse& unlinkResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_xtreemfs_2fMRC_2eproto();
  return *default_instance_;
}

unlinkResponse* unlinkResponse::default_instance_ = NULL;

unlinkResponse* unlinkResponse::New() const {
  return new unlinkResponse;
}

void unlinkResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    timestamp_s_ = 0u;
    if (has_creds()) {
      if (creds_ != NULL) creds_->::xtreemfs::pbrpc::FileCredentials::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool unlinkResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed32 timestamp_s = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &timestamp_s_)));
          set_has_timestamp_s();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_creds;
        break;
      }

      // optional .xtreemfs.pbrpc.FileCredentials creds = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_creds:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_creds()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void unlinkResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed32 timestamp_s = 1;
  if (has_timestamp_s()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(1, this->timestamp_s(), output);
  }

  // optional .xtreemfs.pbrpc.FileCredentials creds = 2;
  if (has_creds()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->creds(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* unlinkResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed32 timestamp_s = 1;
  if (has_timestamp_s()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(1, this->timestamp_s(), target);
  }

  // optional .xtreemfs.pbrpc.FileCredentials creds = 2;
  if (has_creds()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->creds(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int unlinkResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed32 timestamp_s = 1;
    if (has_timestamp_s()) {
      total_size += 1 + 4;
    }

    // optional .xtreemfs.pbrpc.FileCredentials creds = 2;
    if (has_creds()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->creds());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void unlinkResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const unlinkResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const unlinkResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void unlinkResponse::MergeFrom(const unlinkResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_timestamp_s()) {
      set_timestamp_s(from.timestamp_s());
    }
    if (from.has_creds()) {
      mutable_creds()->::xtreemfs::pbrpc::FileCredentials::MergeFrom(from.creds());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void unlinkResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void unlinkResponse::CopyFrom(const unlinkResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool unlinkResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_creds()) {
    if (!this->creds().IsInitialized()) return false;
  }
  return true;
}

void unlinkResponse::Swap(unlinkResponse* other) {
  if (other != this) {
    std::swap(timestamp_s_, other->timestamp_s_);
    std::swap(creds_, other->creds_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata unlinkResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = unlinkResponse_descriptor_;
  metadata.reflection = unlinkResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int accessRequest::kVolumeNameFieldNumber;
const int accessRequest::kPathFieldNumber;
const int accessRequest::kFlagsFieldNumber;
#endif  // !_MSC_VER

accessRequest::accessRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void accessRequest::InitAsDefaultInstance() {
}

accessRequest::accessRequest(const accessRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void accessRequest::SharedCtor() {
  _cached_size_ = 0;
  volume_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  flags_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

accessRequest::~accessRequest() {
  SharedDtor();
}

void accessRequest::SharedDtor() {
  if (volume_name_ != &::google::protobuf::internal::kEmptyString) {
    delete volume_name_;
  }
  if (path_ != &::google::protobuf::internal::kEmptyString) {
    delete path_;
  }
  if (this != default_instance_) {
  }
}

void accessRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* accessRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return accessRequest_descriptor_;
}

const accessRequest& accessRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_xtreemfs_2fMRC_2eproto();
  return *default_instance_;
}

accessRequest* accessRequest::default_instance_ = NULL;

accessRequest* accessRequest::New() const {
  return new accessRequest;
}

void accessRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_volume_name()) {
      if (volume_name_ != &::google::protobuf::internal::kEmptyString) {
        volume_name_->clear();
      }
    }
    if (has_path()) {
      if (path_ != &::google::protobuf::internal::kEmptyString) {
        path_->clear();
      }
    }
    flags_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool accessRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string volume_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_volume_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->volume_name().data(), this->volume_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_path;
        break;
      }

      // required string path = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->path().data(), this->path().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_flags;
        break;
      }

      // required fixed32 flags = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_flags:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &flags_)));
          set_has_flags();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void accessRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string volume_name = 1;
  if (has_volume_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->volume_name().data(), this->volume_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->volume_name(), output);
  }

  // required string path = 2;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->path(), output);
  }

  // required fixed32 flags = 3;
  if (has_flags()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(3, this->flags(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* accessRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string volume_name = 1;
  if (has_volume_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->volume_name().data(), this->volume_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->volume_name(), target);
  }

  // required string path = 2;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->path(), target);
  }

  // required fixed32 flags = 3;
  if (has_flags()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(3, this->flags(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int accessRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string volume_name = 1;
    if (has_volume_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->volume_name());
    }

    // required string path = 2;
    if (has_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->path());
    }

    // required fixed32 flags = 3;
    if (has_flags()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void accessRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const accessRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const accessRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void accessRequest::MergeFrom(const accessRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_volume_name()) {
      set_volume_name(from.volume_name());
    }
    if (from.has_path()) {
      set_path(from.path());
    }
    if (from.has_flags()) {
      set_flags(from.flags());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void accessRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void accessRequest::CopyFrom(const accessRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool accessRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void accessRequest::Swap(accessRequest* other) {
  if (other != this) {
    std::swap(volume_name_, other->volume_name_);
    std::swap(path_, other->path_);
    std::swap(flags_, other->flags_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata accessRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = accessRequest_descriptor_;
  metadata.reflection = accessRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int xtreemfs_check_file_existsRequest::kVolumeIdFieldNumber;
const int xtreemfs_check_file_existsRequest::kFileIdsFieldNumber;
const int xtreemfs_check_file_existsRequest::kOsdUuidFieldNumber;
#endif  // !_MSC_VER

xtreemfs_check_file_existsRequest::xtreemfs_check_file_existsRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void xtreemfs_check_file_existsRequest::InitAsDefaultInstance() {
}

xtreemfs_check_file_existsRequest::xtreemfs_check_file_existsRequest(const xtreemfs_check_file_existsRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void xtreemfs_check_file_existsRequest::SharedCtor() {
  _cached_size_ = 0;
  volume_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  osd_uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

xtreemfs_check_file_existsRequest::~xtreemfs_check_file_existsRequest() {
  SharedDtor();
}

void xtreemfs_check_file_existsRequest::SharedDtor() {
  if (volume_id_ != &::google::protobuf::internal::kEmptyString) {
    delete volume_id_;
  }
  if (osd_uuid_ != &::google::protobuf::internal::kEmptyString) {
    delete osd_uuid_;
  }
  if (this != default_instance_) {
  }
}

void xtreemfs_check_file_existsRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* xtreemfs_check_file_existsRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return xtreemfs_check_file_existsRequest_descriptor_;
}

const xtreemfs_check_file_existsRequest& xtreemfs_check_file_existsRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_xtreemfs_2fMRC_2eproto();
  return *default_instance_;
}

xtreemfs_check_file_existsRequest* xtreemfs_check_file_existsRequest::default_instance_ = NULL;

xtreemfs_check_file_existsRequest* xtreemfs_check_file_existsRequest::New() const {
  return new xtreemfs_check_file_existsRequest;
}

void xtreemfs_check_file_existsRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_volume_id()) {
      if (volume_id_ != &::google::protobuf::internal::kEmptyString) {
        volume_id_->clear();
      }
    }
    if (has_osd_uuid()) {
      if (osd_uuid_ != &::google::protobuf::internal::kEmptyString) {
        osd_uuid_->clear();
      }
    }
  }
  file_ids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool xtreemfs_check_file_existsRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string volume_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_volume_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->volume_id().data(), this->volume_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_file_ids;
        break;
      }

      // repeated string file_ids = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_file_ids:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_file_ids()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->file_ids(this->file_ids_size() - 1).data(),
            this->file_ids(this->file_ids_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_file_ids;
        if (input->ExpectTag(26)) goto parse_osd_uuid;
        break;
      }

      // required string osd_uuid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_osd_uuid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_osd_uuid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->osd_uuid().data(), this->osd_uuid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void xtreemfs_check_file_existsRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string volume_id = 1;
  if (has_volume_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->volume_id().data(), this->volume_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->volume_id(), output);
  }

  // repeated string file_ids = 2;
  for (int i = 0; i < this->file_ids_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->file_ids(i).data(), this->file_ids(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->file_ids(i), output);
  }

  // required string osd_uuid = 3;
  if (has_osd_uuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->osd_uuid().data(), this->osd_uuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->osd_uuid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* xtreemfs_check_file_existsRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string volume_id = 1;
  if (has_volume_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->volume_id().data(), this->volume_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->volume_id(), target);
  }

  // repeated string file_ids = 2;
  for (int i = 0; i < this->file_ids_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->file_ids(i).data(), this->file_ids(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->file_ids(i), target);
  }

  // required string osd_uuid = 3;
  if (has_osd_uuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->osd_uuid().data(), this->osd_uuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->osd_uuid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int xtreemfs_check_file_existsRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string volume_id = 1;
    if (has_volume_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->volume_id());
    }

    // required string osd_uuid = 3;
    if (has_osd_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->osd_uuid());
    }

  }
  // repeated string file_ids = 2;
  total_size += 1 * this->file_ids_size();
  for (int i = 0; i < this->file_ids_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->file_ids(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void xtreemfs_check_file_existsRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const xtreemfs_check_file_existsRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const xtreemfs_check_file_existsRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void xtreemfs_check_file_existsRequest::MergeFrom(const xtreemfs_check_file_existsRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  file_ids_.MergeFrom(from.file_ids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_volume_id()) {
      set_volume_id(from.volume_id());
    }
    if (from.has_osd_uuid()) {
      set_osd_uuid(from.osd_uuid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void xtreemfs_check_file_existsRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void xtreemfs_check_file_existsRequest::CopyFrom(const xtreemfs_check_file_existsRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool xtreemfs_check_file_existsRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000005) != 0x00000005) return false;

  return true;
}

void xtreemfs_check_file_existsRequest::Swap(xtreemfs_check_file_existsRequest* other) {
  if (other != this) {
    std::swap(volume_id_, other->volume_id_);
    file_ids_.Swap(&other->file_ids_);
    std::swap(osd_uuid_, other->osd_uuid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata xtreemfs_check_file_existsRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = xtreemfs_check_file_existsRequest_descriptor_;
  metadata.reflection = xtreemfs_check_file_existsRequest_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* xtreemfs_check_file_existsResponse_FILE_STATE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return xtreemfs_check_file_existsResponse_FILE_STATE_descriptor_;
}
bool xtreemfs_check_file_existsResponse_FILE_STATE_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const xtreemfs_check_file_existsResponse_FILE_STATE xtreemfs_check_file_existsResponse::DELETED;
const xtreemfs_check_file_existsResponse_FILE_STATE xtreemfs_check_file_existsResponse::REGISTERED;
const xtreemfs_check_file_existsResponse_FILE_STATE xtreemfs_check_file_existsResponse::ABANDONED;
const xtreemfs_check_file_existsResponse_FILE_STATE xtreemfs_check_file_existsResponse::FILE_STATE_MIN;
const xtreemfs_check_file_existsResponse_FILE_STATE xtreemfs_check_file_existsResponse::FILE_STATE_MAX;
const int xtreemfs_check_file_existsResponse::FILE_STATE_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int xtreemfs_check_file_existsResponse::kVolumeExistsFieldNumber;
const int xtreemfs_check_file_existsResponse::kFileStatesFieldNumber;
#endif  // !_MSC_VER

xtreemfs_check_file_existsResponse::xtreemfs_check_file_existsResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void xtreemfs_check_file_existsResponse::InitAsDefaultInstance() {
}

xtreemfs_check_file_existsResponse::xtreemfs_check_file_existsResponse(const xtreemfs_check_file_existsResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void xtreemfs_check_file_existsResponse::SharedCtor() {
  _cached_size_ = 0;
  volume_exists_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

xtreemfs_check_file_existsResponse::~xtreemfs_check_file_existsResponse() {
  SharedDtor();
}

void xtreemfs_check_file_existsResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void xtreemfs_check_file_existsResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* xtreemfs_check_file_existsResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return xtreemfs_check_file_existsResponse_descriptor_;
}

const xtreemfs_check_file_existsResponse& xtreemfs_check_file_existsResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_xtreemfs_2fMRC_2eproto();
  return *default_instance_;
}

xtreemfs_check_file_existsResponse* xtreemfs_check_file_existsResponse::default_instance_ = NULL;

xtreemfs_check_file_existsResponse* xtreemfs_check_file_existsResponse::New() const {
  return new xtreemfs_check_file_existsResponse;
}

void xtreemfs_check_file_existsResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    volume_exists_ = false;
  }
  file_states_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool xtreemfs_check_file_existsResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool volume_exists = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &volume_exists_)));
          set_has_volume_exists();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_file_states;
        break;
      }

      // repeated .xtreemfs.pbrpc.xtreemfs_check_file_existsResponse.FILE_STATE file_states = 2 [packed = true];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_file_states:
          ::google::protobuf::uint32 length;
          DO_(input->ReadVarint32(&length));
          ::google::protobuf::io::CodedInputStream::Limit limit = input->PushLimit(length);
          while (input->BytesUntilLimit() > 0) {
            int value;
            DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
            if (::xtreemfs::pbrpc::xtreemfs_check_file_existsResponse_FILE_STATE_IsValid(value)) {
              add_file_states(static_cast< ::xtreemfs::pbrpc::xtreemfs_check_file_existsResponse_FILE_STATE >(value));
            }
          }
          input->PopLimit(limit);
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::xtreemfs::pbrpc::xtreemfs_check_file_existsResponse_FILE_STATE_IsValid(value)) {
            add_file_states(static_cast< ::xtreemfs::pbrpc::xtreemfs_check_file_existsResponse_FILE_STATE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void xtreemfs_check_file_existsResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool volume_exists = 1;
  if (has_volume_exists()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->volume_exists(), output);
  }

  // repeated .xtreemfs.pbrpc.xtreemfs_check_file_existsResponse.FILE_STATE file_states = 2 [packed = true];
  if (this->file_states_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      output);
    output->WriteVarint32(_file_states_cached_byte_size_);
  }
  for (int i = 0; i < this->file_states_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnumNoTag(
      this->file_states(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* xtreemfs_check_file_existsResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool volume_exists = 1;
  if (has_volume_exists()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->volume_exists(), target);
  }

  // repeated .xtreemfs.pbrpc.xtreemfs_check_file_existsResponse.FILE_STATE file_states = 2 [packed = true];
  if (this->file_states_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(    _file_states_cached_byte_size_, target);
  }
  for (int i = 0; i < this->file_states_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumNoTagToArray(
      this->file_states(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int xtreemfs_check_file_existsResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool volume_exists = 1;
    if (has_volume_exists()) {
      total_size += 1 + 1;
    }

  }
  // repeated .xtreemfs.pbrpc.xtreemfs_check_file_existsResponse.FILE_STATE file_states = 2 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->file_states_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->file_states(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _file_states_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void xtreemfs_check_file_existsResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const xtreemfs_check_file_existsResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const xtreemfs_check_file_existsResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void xtreemfs_check_file_existsResponse::MergeFrom(const xtreemfs_check_file_existsResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  file_states_.MergeFrom(from.file_states_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_volume_exists()) {
      set_volume_exists(from.volume_exists());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void xtreemfs_check_file_existsResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void xtreemfs_check_file_existsResponse::CopyFrom(const xtreemfs_check_file_existsResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool xtreemfs_check_file_existsResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void xtreemfs_check_file_existsResponse::Swap(xtreemfs_check_file_existsResponse* other) {
  if (other != this) {
    std::swap(volume_exists_, other->volume_exists_);
    file_states_.Swap(&other->file_states_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata xtreemfs_check_file_existsResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = xtreemfs_check_file_existsResponse_descriptor_;
  metadata.reflection = xtreemfs_check_file_existsResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int xtreemfs_dump_restore_databaseRequest::kDumpFileFieldNumber;
#endif  // !_MSC_VER

xtreemfs_dump_restore_databaseRequest::xtreemfs_dump_restore_databaseRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void xtreemfs_dump_restore_databaseRequest::InitAsDefaultInstance() {
}

xtreemfs_dump_restore_databaseRequest::xtreemfs_dump_restore_databaseRequest(const xtreemfs_dump_restore_databaseRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void xtreemfs_dump_restore_databaseRequest::SharedCtor() {
  _cached_size_ = 0;
  dump_file_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

xtreemfs_dump_restore_databaseRequest::~xtreemfs_dump_restore_databaseRequest() {
  SharedDtor();
}

void xtreemfs_dump_restore_databaseRequest::SharedDtor() {
  if (dump_file_ != &::google::protobuf::internal::kEmptyString) {
    delete dump_file_;
  }
  if (this != default_instance_) {
  }
}

void xtreemfs_dump_restore_databaseRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* xtreemfs_dump_restore_databaseRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return xtreemfs_dump_restore_databaseRequest_descriptor_;
}

const xtreemfs_dump_restore_databaseRequest& xtreemfs_dump_restore_databaseRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_xtreemfs_2fMRC_2eproto();
  return *default_instance_;
}

xtreemfs_dump_restore_databaseRequest* xtreemfs_dump_restore_databaseRequest::default_instance_ = NULL;

xtreemfs_dump_restore_databaseRequest* xtreemfs_dump_restore_databaseRequest::New() const {
  return new xtreemfs_dump_restore_databaseRequest;
}

void xtreemfs_dump_restore_databaseRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_dump_file()) {
      if (dump_file_ != &::google::protobuf::internal::kEmptyString) {
        dump_file_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool xtreemfs_dump_restore_databaseRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string dump_file = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dump_file()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->dump_file().data(), this->dump_file().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void xtreemfs_dump_restore_databaseRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string dump_file = 1;
  if (has_dump_file()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dump_file().data(), this->dump_file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->dump_file(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* xtreemfs_dump_restore_databaseRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string dump_file = 1;
  if (has_dump_file()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dump_file().data(), this->dump_file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->dump_file(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int xtreemfs_dump_restore_databaseRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string dump_file = 1;
    if (has_dump_file()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->dump_file());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void xtreemfs_dump_restore_databaseRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const xtreemfs_dump_restore_databaseRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const xtreemfs_dump_restore_databaseRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void xtreemfs_dump_restore_databaseRequest::MergeFrom(const xtreemfs_dump_restore_databaseRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dump_file()) {
      set_dump_file(from.dump_file());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void xtreemfs_dump_restore_databaseRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void xtreemfs_dump_restore_databaseRequest::CopyFrom(const xtreemfs_dump_restore_databaseRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool xtreemfs_dump_restore_databaseRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void xtreemfs_dump_restore_databaseRequest::Swap(xtreemfs_dump_restore_databaseRequest* other) {
  if (other != this) {
    std::swap(dump_file_, other->dump_file_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata xtreemfs_dump_restore_databaseRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = xtreemfs_dump_restore_databaseRequest_descriptor_;
  metadata.reflection = xtreemfs_dump_restore_databaseRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int xtreemfs_get_suitable_osdsRequest::kFileIdFieldNumber;
const int xtreemfs_get_suitable_osdsRequest::kPathFieldNumber;
const int xtreemfs_get_suitable_osdsRequest::kVolumeNameFieldNumber;
const int xtreemfs_get_suitable_osdsRequest::kNumOsdsFieldNumber;
#endif  // !_MSC_VER

xtreemfs_get_suitable_osdsRequest::xtreemfs_get_suitable_osdsRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void xtreemfs_get_suitable_osdsRequest::InitAsDefaultInstance() {
}

xtreemfs_get_suitable_osdsRequest::xtreemfs_get_suitable_osdsRequest(const xtreemfs_get_suitable_osdsRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void xtreemfs_get_suitable_osdsRequest::SharedCtor() {
  _cached_size_ = 0;
  file_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  volume_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  num_osds_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

xtreemfs_get_suitable_osdsRequest::~xtreemfs_get_suitable_osdsRequest() {
  SharedDtor();
}

void xtreemfs_get_suitable_osdsRequest::SharedDtor() {
  if (file_id_ != &::google::protobuf::internal::kEmptyString) {
    delete file_id_;
  }
  if (path_ != &::google::protobuf::internal::kEmptyString) {
    delete path_;
  }
  if (volume_name_ != &::google::protobuf::internal::kEmptyString) {
    delete volume_name_;
  }
  if (this != default_instance_) {
  }
}

void xtreemfs_get_suitable_osdsRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* xtreemfs_get_suitable_osdsRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return xtreemfs_get_suitable_osdsRequest_descriptor_;
}

const xtreemfs_get_suitable_osdsRequest& xtreemfs_get_suitable_osdsRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_xtreemfs_2fMRC_2eproto();
  return *default_instance_;
}

xtreemfs_get_suitable_osdsRequest* xtreemfs_get_suitable_osdsRequest::default_instance_ = NULL;

xtreemfs_get_suitable_osdsRequest* xtreemfs_get_suitable_osdsRequest::New() const {
  return new xtreemfs_get_suitable_osdsRequest;
}

void xtreemfs_get_suitable_osdsRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_file_id()) {
      if (file_id_ != &::google::protobuf::internal::kEmptyString) {
        file_id_->clear();
      }
    }
    if (has_path()) {
      if (path_ != &::google::protobuf::internal::kEmptyString) {
        path_->clear();
      }
    }
    if (has_volume_name()) {
      if (volume_name_ != &::google::protobuf::internal::kEmptyString) {
        volume_name_->clear();
      }
    }
    num_osds_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool xtreemfs_get_suitable_osdsRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string file_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_file_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->file_id().data(), this->file_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_num_osds;
        break;
      }

      // required fixed32 num_osds = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_num_osds:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &num_osds_)));
          set_has_num_osds();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_path;
        break;
      }

      // optional string path = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->path().data(), this->path().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_volume_name;
        break;
      }

      // optional string volume_name = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_volume_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_volume_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->volume_name().data(), this->volume_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void xtreemfs_get_suitable_osdsRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string file_id = 1;
  if (has_file_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->file_id().data(), this->file_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->file_id(), output);
  }

  // required fixed32 num_osds = 2;
  if (has_num_osds()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(2, this->num_osds(), output);
  }

  // optional string path = 3;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->path(), output);
  }

  // optional string volume_name = 4;
  if (has_volume_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->volume_name().data(), this->volume_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->volume_name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* xtreemfs_get_suitable_osdsRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string file_id = 1;
  if (has_file_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->file_id().data(), this->file_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->file_id(), target);
  }

  // required fixed32 num_osds = 2;
  if (has_num_osds()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(2, this->num_osds(), target);
  }

  // optional string path = 3;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->path(), target);
  }

  // optional string volume_name = 4;
  if (has_volume_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->volume_name().data(), this->volume_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->volume_name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int xtreemfs_get_suitable_osdsRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string file_id = 1;
    if (has_file_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->file_id());
    }

    // optional string path = 3;
    if (has_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->path());
    }

    // optional string volume_name = 4;
    if (has_volume_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->volume_name());
    }

    // required fixed32 num_osds = 2;
    if (has_num_osds()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void xtreemfs_get_suitable_osdsRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const xtreemfs_get_suitable_osdsRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const xtreemfs_get_suitable_osdsRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void xtreemfs_get_suitable_osdsRequest::MergeFrom(const xtreemfs_get_suitable_osdsRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_file_id()) {
      set_file_id(from.file_id());
    }
    if (from.has_path()) {
      set_path(from.path());
    }
    if (from.has_volume_name()) {
      set_volume_name(from.volume_name());
    }
    if (from.has_num_osds()) {
      set_num_osds(from.num_osds());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void xtreemfs_get_suitable_osdsRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void xtreemfs_get_suitable_osdsRequest::CopyFrom(const xtreemfs_get_suitable_osdsRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool xtreemfs_get_suitable_osdsRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000008) != 0x00000008) return false;

  return true;
}

void xtreemfs_get_suitable_osdsRequest::Swap(xtreemfs_get_suitable_osdsRequest* other) {
  if (other != this) {
    std::swap(file_id_, other->file_id_);
    std::swap(path_, other->path_);
    std::swap(volume_name_, other->volume_name_);
    std::swap(num_osds_, other->num_osds_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata xtreemfs_get_suitable_osdsRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = xtreemfs_get_suitable_osdsRequest_descriptor_;
  metadata.reflection = xtreemfs_get_suitable_osdsRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int xtreemfs_get_suitable_osdsResponse::kOsdUuidsFieldNumber;
#endif  // !_MSC_VER

xtreemfs_get_suitable_osdsResponse::xtreemfs_get_suitable_osdsResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void xtreemfs_get_suitable_osdsResponse::InitAsDefaultInstance() {
}

xtreemfs_get_suitable_osdsResponse::xtreemfs_get_suitable_osdsResponse(const xtreemfs_get_suitable_osdsResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void xtreemfs_get_suitable_osdsResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

xtreemfs_get_suitable_osdsResponse::~xtreemfs_get_suitable_osdsResponse() {
  SharedDtor();
}

void xtreemfs_get_suitable_osdsResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void xtreemfs_get_suitable_osdsResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* xtreemfs_get_suitable_osdsResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return xtreemfs_get_suitable_osdsResponse_descriptor_;
}

const xtreemfs_get_suitable_osdsResponse& xtreemfs_get_suitable_osdsResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_xtreemfs_2fMRC_2eproto();
  return *default_instance_;
}

xtreemfs_get_suitable_osdsResponse* xtreemfs_get_suitable_osdsResponse::default_instance_ = NULL;

xtreemfs_get_suitable_osdsResponse* xtreemfs_get_suitable_osdsResponse::New() const {
  return new xtreemfs_get_suitable_osdsResponse;
}

void xtreemfs_get_suitable_osdsResponse::Clear() {
  osd_uuids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool xtreemfs_get_suitable_osdsResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string osd_uuids = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_osd_uuids:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_osd_uuids()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->osd_uuids(this->osd_uuids_size() - 1).data(),
            this->osd_uuids(this->osd_uuids_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_osd_uuids;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void xtreemfs_get_suitable_osdsResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated string osd_uuids = 1;
  for (int i = 0; i < this->osd_uuids_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->osd_uuids(i).data(), this->osd_uuids(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->osd_uuids(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* xtreemfs_get_suitable_osdsResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated string osd_uuids = 1;
  for (int i = 0; i < this->osd_uuids_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->osd_uuids(i).data(), this->osd_uuids(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->osd_uuids(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int xtreemfs_get_suitable_osdsResponse::ByteSize() const {
  int total_size = 0;

  // repeated string osd_uuids = 1;
  total_size += 1 * this->osd_uuids_size();
  for (int i = 0; i < this->osd_uuids_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->osd_uuids(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void xtreemfs_get_suitable_osdsResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const xtreemfs_get_suitable_osdsResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const xtreemfs_get_suitable_osdsResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void xtreemfs_get_suitable_osdsResponse::MergeFrom(const xtreemfs_get_suitable_osdsResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  osd_uuids_.MergeFrom(from.osd_uuids_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void xtreemfs_get_suitable_osdsResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void xtreemfs_get_suitable_osdsResponse::CopyFrom(const xtreemfs_get_suitable_osdsResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool xtreemfs_get_suitable_osdsResponse::IsInitialized() const {

  return true;
}

void xtreemfs_get_suitable_osdsResponse::Swap(xtreemfs_get_suitable_osdsResponse* other) {
  if (other != this) {
    osd_uuids_.Swap(&other->osd_uuids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata xtreemfs_get_suitable_osdsResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = xtreemfs_get_suitable_osdsResponse_descriptor_;
  metadata.reflection = xtreemfs_get_suitable_osdsResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int timestampResponse::kTimestampSFieldNumber;
#endif  // !_MSC_VER

timestampResponse::timestampResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void timestampResponse::InitAsDefaultInstance() {
}

timestampResponse::timestampResponse(const timestampResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void timestampResponse::SharedCtor() {
  _cached_size_ = 0;
  timestamp_s_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

timestampResponse::~timestampResponse() {
  SharedDtor();
}

void timestampResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void timestampResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* timestampResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return timestampResponse_descriptor_;
}

const timestampResponse& timestampResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_xtreemfs_2fMRC_2eproto();
  return *default_instance_;
}

timestampResponse* timestampResponse::default_instance_ = NULL;

timestampResponse* timestampResponse::New() const {
  return new timestampResponse;
}

void timestampResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    timestamp_s_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool timestampResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed32 timestamp_s = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &timestamp_s_)));
          set_has_timestamp_s();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void timestampResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed32 timestamp_s = 1;
  if (has_timestamp_s()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(1, this->timestamp_s(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* timestampResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed32 timestamp_s = 1;
  if (has_timestamp_s()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(1, this->timestamp_s(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int timestampResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed32 timestamp_s = 1;
    if (has_timestamp_s()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void timestampResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const timestampResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const timestampResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void timestampResponse::MergeFrom(const timestampResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_timestamp_s()) {
      set_timestamp_s(from.timestamp_s());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void timestampResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void timestampResponse::CopyFrom(const timestampResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool timestampResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void timestampResponse::Swap(timestampResponse* other) {
  if (other != this) {
    std::swap(timestamp_s_, other->timestamp_s_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata timestampResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = timestampResponse_descriptor_;
  metadata.reflection = timestampResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int stringMessage::kAStringFieldNumber;
#endif  // !_MSC_VER

stringMessage::stringMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stringMessage::InitAsDefaultInstance() {
}

stringMessage::stringMessage(const stringMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stringMessage::SharedCtor() {
  _cached_size_ = 0;
  a_string_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stringMessage::~stringMessage() {
  SharedDtor();
}

void stringMessage::SharedDtor() {
  if (a_string_ != &::google::protobuf::internal::kEmptyString) {
    delete a_string_;
  }
  if (this != default_instance_) {
  }
}

void stringMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stringMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stringMessage_descriptor_;
}

const stringMessage& stringMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_xtreemfs_2fMRC_2eproto();
  return *default_instance_;
}

stringMessage* stringMessage::default_instance_ = NULL;

stringMessage* stringMessage::New() const {
  return new stringMessage;
}

void stringMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_a_string()) {
      if (a_string_ != &::google::protobuf::internal::kEmptyString) {
        a_string_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stringMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string a_string = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_a_string()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->a_string().data(), this->a_string().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stringMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string a_string = 1;
  if (has_a_string()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->a_string().data(), this->a_string().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->a_string(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stringMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string a_string = 1;
  if (has_a_string()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->a_string().data(), this->a_string().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->a_string(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stringMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string a_string = 1;
    if (has_a_string()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->a_string());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stringMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stringMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stringMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stringMessage::MergeFrom(const stringMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_a_string()) {
      set_a_string(from.a_string());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stringMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stringMessage::CopyFrom(const stringMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stringMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void stringMessage::Swap(stringMessage* other) {
  if (other != this) {
    std::swap(a_string_, other->a_string_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stringMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stringMessage_descriptor_;
  metadata.reflection = stringMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int xtreemfs_listdirRequest::kPathFieldNumber;
#endif  // !_MSC_VER

xtreemfs_listdirRequest::xtreemfs_listdirRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void xtreemfs_listdirRequest::InitAsDefaultInstance() {
}

xtreemfs_listdirRequest::xtreemfs_listdirRequest(const xtreemfs_listdirRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void xtreemfs_listdirRequest::SharedCtor() {
  _cached_size_ = 0;
  path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

xtreemfs_listdirRequest::~xtreemfs_listdirRequest() {
  SharedDtor();
}

void xtreemfs_listdirRequest::SharedDtor() {
  if (path_ != &::google::protobuf::internal::kEmptyString) {
    delete path_;
  }
  if (this != default_instance_) {
  }
}

void xtreemfs_listdirRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* xtreemfs_listdirRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return xtreemfs_listdirRequest_descriptor_;
}

const xtreemfs_listdirRequest& xtreemfs_listdirRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_xtreemfs_2fMRC_2eproto();
  return *default_instance_;
}

xtreemfs_listdirRequest* xtreemfs_listdirRequest::default_instance_ = NULL;

xtreemfs_listdirRequest* xtreemfs_listdirRequest::New() const {
  return new xtreemfs_listdirRequest;
}

void xtreemfs_listdirRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_path()) {
      if (path_ != &::google::protobuf::internal::kEmptyString) {
        path_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool xtreemfs_listdirRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string path = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->path().data(), this->path().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void xtreemfs_listdirRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string path = 1;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->path(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* xtreemfs_listdirRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string path = 1;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->path(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int xtreemfs_listdirRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string path = 1;
    if (has_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->path());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void xtreemfs_listdirRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const xtreemfs_listdirRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const xtreemfs_listdirRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void xtreemfs_listdirRequest::MergeFrom(const xtreemfs_listdirRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_path()) {
      set_path(from.path());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void xtreemfs_listdirRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void xtreemfs_listdirRequest::CopyFrom(const xtreemfs_listdirRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool xtreemfs_listdirRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void xtreemfs_listdirRequest::Swap(xtreemfs_listdirRequest* other) {
  if (other != this) {
    std::swap(path_, other->path_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata xtreemfs_listdirRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = xtreemfs_listdirRequest_descriptor_;
  metadata.reflection = xtreemfs_listdirRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int xtreemfs_listdirResponse::kNamesFieldNumber;
#endif  // !_MSC_VER

xtreemfs_listdirResponse::xtreemfs_listdirResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void xtreemfs_listdirResponse::InitAsDefaultInstance() {
}

xtreemfs_listdirResponse::xtreemfs_listdirResponse(const xtreemfs_listdirResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void xtreemfs_listdirResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

xtreemfs_listdirResponse::~xtreemfs_listdirResponse() {
  SharedDtor();
}

void xtreemfs_listdirResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void xtreemfs_listdirResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* xtreemfs_listdirResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return xtreemfs_listdirResponse_descriptor_;
}

const xtreemfs_listdirResponse& xtreemfs_listdirResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_xtreemfs_2fMRC_2eproto();
  return *default_instance_;
}

xtreemfs_listdirResponse* xtreemfs_listdirResponse::default_instance_ = NULL;

xtreemfs_listdirResponse* xtreemfs_listdirResponse::New() const {
  return new xtreemfs_listdirResponse;
}

void xtreemfs_listdirResponse::Clear() {
  names_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool xtreemfs_listdirResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string names = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_names:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_names()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->names(this->names_size() - 1).data(),
            this->names(this->names_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_names;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void xtreemfs_listdirResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated string names = 1;
  for (int i = 0; i < this->names_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->names(i).data(), this->names(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->names(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* xtreemfs_listdirResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated string names = 1;
  for (int i = 0; i < this->names_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->names(i).data(), this->names(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->names(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int xtreemfs_listdirResponse::ByteSize() const {
  int total_size = 0;

  // repeated string names = 1;
  total_size += 1 * this->names_size();
  for (int i = 0; i < this->names_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->names(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void xtreemfs_listdirResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const xtreemfs_listdirResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const xtreemfs_listdirResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void xtreemfs_listdirResponse::MergeFrom(const xtreemfs_listdirResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  names_.MergeFrom(from.names_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void xtreemfs_listdirResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void xtreemfs_listdirResponse::CopyFrom(const xtreemfs_listdirResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool xtreemfs_listdirResponse::IsInitialized() const {

  return true;
}

void xtreemfs_listdirResponse::Swap(xtreemfs_listdirResponse* other) {
  if (other != this) {
    names_.Swap(&other->names_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata xtreemfs_listdirResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = xtreemfs_listdirResponse_descriptor_;
  metadata.reflection = xtreemfs_listdirResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int xtreemfs_replica_addRequest::kFileIdFieldNumber;
const int xtreemfs_replica_addRequest::kPathFieldNumber;
const int xtreemfs_replica_addRequest::kVolumeNameFieldNumber;
const int xtreemfs_replica_addRequest::kNewReplicaFieldNumber;
#endif  // !_MSC_VER

xtreemfs_replica_addRequest::xtreemfs_replica_addRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void xtreemfs_replica_addRequest::InitAsDefaultInstance() {
  new_replica_ = const_cast< ::xtreemfs::pbrpc::Replica*>(&::xtreemfs::pbrpc::Replica::default_instance());
}

xtreemfs_replica_addRequest::xtreemfs_replica_addRequest(const xtreemfs_replica_addRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void xtreemfs_replica_addRequest::SharedCtor() {
  _cached_size_ = 0;
  file_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  volume_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  new_replica_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

xtreemfs_replica_addRequest::~xtreemfs_replica_addRequest() {
  SharedDtor();
}

void xtreemfs_replica_addRequest::SharedDtor() {
  if (file_id_ != &::google::protobuf::internal::kEmptyString) {
    delete file_id_;
  }
  if (path_ != &::google::protobuf::internal::kEmptyString) {
    delete path_;
  }
  if (volume_name_ != &::google::protobuf::internal::kEmptyString) {
    delete volume_name_;
  }
  if (this != default_instance_) {
    delete new_replica_;
  }
}

void xtreemfs_replica_addRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* xtreemfs_replica_addRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return xtreemfs_replica_addRequest_descriptor_;
}

const xtreemfs_replica_addRequest& xtreemfs_replica_addRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_xtreemfs_2fMRC_2eproto();
  return *default_instance_;
}

xtreemfs_replica_addRequest* xtreemfs_replica_addRequest::default_instance_ = NULL;

xtreemfs_replica_addRequest* xtreemfs_replica_addRequest::New() const {
  return new xtreemfs_replica_addRequest;
}

void xtreemfs_replica_addRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_file_id()) {
      if (file_id_ != &::google::protobuf::internal::kEmptyString) {
        file_id_->clear();
      }
    }
    if (has_path()) {
      if (path_ != &::google::protobuf::internal::kEmptyString) {
        path_->clear();
      }
    }
    if (has_volume_name()) {
      if (volume_name_ != &::google::protobuf::internal::kEmptyString) {
        volume_name_->clear();
      }
    }
    if (has_new_replica()) {
      if (new_replica_ != NULL) new_replica_->::xtreemfs::pbrpc::Replica::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool xtreemfs_replica_addRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string file_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_file_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->file_id().data(), this->file_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_new_replica;
        break;
      }

      // required .xtreemfs.pbrpc.Replica new_replica = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_new_replica:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_new_replica()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_path;
        break;
      }

      // optional string path = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->path().data(), this->path().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_volume_name;
        break;
      }

      // optional string volume_name = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_volume_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_volume_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->volume_name().data(), this->volume_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void xtreemfs_replica_addRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string file_id = 1;
  if (has_file_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->file_id().data(), this->file_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->file_id(), output);
  }

  // required .xtreemfs.pbrpc.Replica new_replica = 2;
  if (has_new_replica()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->new_replica(), output);
  }

  // optional string path = 3;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->path(), output);
  }

  // optional string volume_name = 4;
  if (has_volume_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->volume_name().data(), this->volume_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->volume_name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* xtreemfs_replica_addRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string file_id = 1;
  if (has_file_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->file_id().data(), this->file_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->file_id(), target);
  }

  // required .xtreemfs.pbrpc.Replica new_replica = 2;
  if (has_new_replica()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->new_replica(), target);
  }

  // optional string path = 3;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->path(), target);
  }

  // optional string volume_name = 4;
  if (has_volume_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->volume_name().data(), this->volume_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->volume_name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int xtreemfs_replica_addRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string file_id = 1;
    if (has_file_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->file_id());
    }

    // optional string path = 3;
    if (has_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->path());
    }

    // optional string volume_name = 4;
    if (has_volume_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->volume_name());
    }

    // required .xtreemfs.pbrpc.Replica new_replica = 2;
    if (has_new_replica()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->new_replica());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void xtreemfs_replica_addRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const xtreemfs_replica_addRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const xtreemfs_replica_addRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void xtreemfs_replica_addRequest::MergeFrom(const xtreemfs_replica_addRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_file_id()) {
      set_file_id(from.file_id());
    }
    if (from.has_path()) {
      set_path(from.path());
    }
    if (from.has_volume_name()) {
      set_volume_name(from.volume_name());
    }
    if (from.has_new_replica()) {
      mutable_new_replica()->::xtreemfs::pbrpc::Replica::MergeFrom(from.new_replica());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void xtreemfs_replica_addRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void xtreemfs_replica_addRequest::CopyFrom(const xtreemfs_replica_addRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool xtreemfs_replica_addRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000008) != 0x00000008) return false;

  if (has_new_replica()) {
    if (!this->new_replica().IsInitialized()) return false;
  }
  return true;
}

void xtreemfs_replica_addRequest::Swap(xtreemfs_replica_addRequest* other) {
  if (other != this) {
    std::swap(file_id_, other->file_id_);
    std::swap(path_, other->path_);
    std::swap(volume_name_, other->volume_name_);
    std::swap(new_replica_, other->new_replica_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata xtreemfs_replica_addRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = xtreemfs_replica_addRequest_descriptor_;
  metadata.reflection = xtreemfs_replica_addRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int xtreemfs_replica_listRequest::kFileIdFieldNumber;
const int xtreemfs_replica_listRequest::kPathFieldNumber;
const int xtreemfs_replica_listRequest::kVolumeNameFieldNumber;
#endif  // !_MSC_VER

xtreemfs_replica_listRequest::xtreemfs_replica_listRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void xtreemfs_replica_listRequest::InitAsDefaultInstance() {
}

xtreemfs_replica_listRequest::xtreemfs_replica_listRequest(const xtreemfs_replica_listRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void xtreemfs_replica_listRequest::SharedCtor() {
  _cached_size_ = 0;
  file_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  volume_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

xtreemfs_replica_listRequest::~xtreemfs_replica_listRequest() {
  SharedDtor();
}

void xtreemfs_replica_listRequest::SharedDtor() {
  if (file_id_ != &::google::protobuf::internal::kEmptyString) {
    delete file_id_;
  }
  if (path_ != &::google::protobuf::internal::kEmptyString) {
    delete path_;
  }
  if (volume_name_ != &::google::protobuf::internal::kEmptyString) {
    delete volume_name_;
  }
  if (this != default_instance_) {
  }
}

void xtreemfs_replica_listRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* xtreemfs_replica_listRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return xtreemfs_replica_listRequest_descriptor_;
}

const xtreemfs_replica_listRequest& xtreemfs_replica_listRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_xtreemfs_2fMRC_2eproto();
  return *default_instance_;
}

xtreemfs_replica_listRequest* xtreemfs_replica_listRequest::default_instance_ = NULL;

xtreemfs_replica_listRequest* xtreemfs_replica_listRequest::New() const {
  return new xtreemfs_replica_listRequest;
}

void xtreemfs_replica_listRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_file_id()) {
      if (file_id_ != &::google::protobuf::internal::kEmptyString) {
        file_id_->clear();
      }
    }
    if (has_path()) {
      if (path_ != &::google::protobuf::internal::kEmptyString) {
        path_->clear();
      }
    }
    if (has_volume_name()) {
      if (volume_name_ != &::google::protobuf::internal::kEmptyString) {
        volume_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool xtreemfs_replica_listRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string file_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_file_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->file_id().data(), this->file_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_path;
        break;
      }

      // optional string path = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->path().data(), this->path().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_volume_name;
        break;
      }

      // optional string volume_name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_volume_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_volume_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->volume_name().data(), this->volume_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void xtreemfs_replica_listRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string file_id = 1;
  if (has_file_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->file_id().data(), this->file_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->file_id(), output);
  }

  // optional string path = 2;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->path(), output);
  }

  // optional string volume_name = 3;
  if (has_volume_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->volume_name().data(), this->volume_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->volume_name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* xtreemfs_replica_listRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string file_id = 1;
  if (has_file_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->file_id().data(), this->file_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->file_id(), target);
  }

  // optional string path = 2;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->path(), target);
  }

  // optional string volume_name = 3;
  if (has_volume_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->volume_name().data(), this->volume_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->volume_name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int xtreemfs_replica_listRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string file_id = 1;
    if (has_file_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->file_id());
    }

    // optional string path = 2;
    if (has_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->path());
    }

    // optional string volume_name = 3;
    if (has_volume_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->volume_name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void xtreemfs_replica_listRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const xtreemfs_replica_listRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const xtreemfs_replica_listRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void xtreemfs_replica_listRequest::MergeFrom(const xtreemfs_replica_listRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_file_id()) {
      set_file_id(from.file_id());
    }
    if (from.has_path()) {
      set_path(from.path());
    }
    if (from.has_volume_name()) {
      set_volume_name(from.volume_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void xtreemfs_replica_listRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void xtreemfs_replica_listRequest::CopyFrom(const xtreemfs_replica_listRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool xtreemfs_replica_listRequest::IsInitialized() const {

  return true;
}

void xtreemfs_replica_listRequest::Swap(xtreemfs_replica_listRequest* other) {
  if (other != this) {
    std::swap(file_id_, other->file_id_);
    std::swap(path_, other->path_);
    std::swap(volume_name_, other->volume_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata xtreemfs_replica_listRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = xtreemfs_replica_listRequest_descriptor_;
  metadata.reflection = xtreemfs_replica_listRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int xtreemfs_get_xlocsetRequest::kFileIdFieldNumber;
const int xtreemfs_get_xlocsetRequest::kPathFieldNumber;
const int xtreemfs_get_xlocsetRequest::kVolumeNameFieldNumber;
const int xtreemfs_get_xlocsetRequest::kXcapFieldNumber;
#endif  // !_MSC_VER

xtreemfs_get_xlocsetRequest::xtreemfs_get_xlocsetRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void xtreemfs_get_xlocsetRequest::InitAsDefaultInstance() {
  xcap_ = const_cast< ::xtreemfs::pbrpc::XCap*>(&::xtreemfs::pbrpc::XCap::default_instance());
}

xtreemfs_get_xlocsetRequest::xtreemfs_get_xlocsetRequest(const xtreemfs_get_xlocsetRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void xtreemfs_get_xlocsetRequest::SharedCtor() {
  _cached_size_ = 0;
  file_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  volume_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  xcap_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

xtreemfs_get_xlocsetRequest::~xtreemfs_get_xlocsetRequest() {
  SharedDtor();
}

void xtreemfs_get_xlocsetRequest::SharedDtor() {
  if (file_id_ != &::google::protobuf::internal::kEmptyString) {
    delete file_id_;
  }
  if (path_ != &::google::protobuf::internal::kEmptyString) {
    delete path_;
  }
  if (volume_name_ != &::google::protobuf::internal::kEmptyString) {
    delete volume_name_;
  }
  if (this != default_instance_) {
    delete xcap_;
  }
}

void xtreemfs_get_xlocsetRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* xtreemfs_get_xlocsetRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return xtreemfs_get_xlocsetRequest_descriptor_;
}

const xtreemfs_get_xlocsetRequest& xtreemfs_get_xlocsetRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_xtreemfs_2fMRC_2eproto();
  return *default_instance_;
}

xtreemfs_get_xlocsetRequest* xtreemfs_get_xlocsetRequest::default_instance_ = NULL;

xtreemfs_get_xlocsetRequest* xtreemfs_get_xlocsetRequest::New() const {
  return new xtreemfs_get_xlocsetRequest;
}

void xtreemfs_get_xlocsetRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_file_id()) {
      if (file_id_ != &::google::protobuf::internal::kEmptyString) {
        file_id_->clear();
      }
    }
    if (has_path()) {
      if (path_ != &::google::protobuf::internal::kEmptyString) {
        path_->clear();
      }
    }
    if (has_volume_name()) {
      if (volume_name_ != &::google::protobuf::internal::kEmptyString) {
        volume_name_->clear();
      }
    }
    if (has_xcap()) {
      if (xcap_ != NULL) xcap_->::xtreemfs::pbrpc::XCap::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool xtreemfs_get_xlocsetRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string file_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_file_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->file_id().data(), this->file_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_path;
        break;
      }

      // optional string path = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->path().data(), this->path().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_volume_name;
        break;
      }

      // optional string volume_name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_volume_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_volume_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->volume_name().data(), this->volume_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_xcap;
        break;
      }

      // optional .xtreemfs.pbrpc.XCap xcap = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_xcap:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_xcap()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void xtreemfs_get_xlocsetRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string file_id = 1;
  if (has_file_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->file_id().data(), this->file_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->file_id(), output);
  }

  // optional string path = 2;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->path(), output);
  }

  // optional string volume_name = 3;
  if (has_volume_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->volume_name().data(), this->volume_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->volume_name(), output);
  }

  // optional .xtreemfs.pbrpc.XCap xcap = 4;
  if (has_xcap()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->xcap(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* xtreemfs_get_xlocsetRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string file_id = 1;
  if (has_file_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->file_id().data(), this->file_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->file_id(), target);
  }

  // optional string path = 2;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->path(), target);
  }

  // optional string volume_name = 3;
  if (has_volume_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->volume_name().data(), this->volume_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->volume_name(), target);
  }

  // optional .xtreemfs.pbrpc.XCap xcap = 4;
  if (has_xcap()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->xcap(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int xtreemfs_get_xlocsetRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string file_id = 1;
    if (has_file_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->file_id());
    }

    // optional string path = 2;
    if (has_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->path());
    }

    // optional string volume_name = 3;
    if (has_volume_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->volume_name());
    }

    // optional .xtreemfs.pbrpc.XCap xcap = 4;
    if (has_xcap()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->xcap());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void xtreemfs_get_xlocsetRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const xtreemfs_get_xlocsetRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const xtreemfs_get_xlocsetRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void xtreemfs_get_xlocsetRequest::MergeFrom(const xtreemfs_get_xlocsetRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_file_id()) {
      set_file_id(from.file_id());
    }
    if (from.has_path()) {
      set_path(from.path());
    }
    if (from.has_volume_name()) {
      set_volume_name(from.volume_name());
    }
    if (from.has_xcap()) {
      mutable_xcap()->::xtreemfs::pbrpc::XCap::MergeFrom(from.xcap());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void xtreemfs_get_xlocsetRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void xtreemfs_get_xlocsetRequest::CopyFrom(const xtreemfs_get_xlocsetRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool xtreemfs_get_xlocsetRequest::IsInitialized() const {

  if (has_xcap()) {
    if (!this->xcap().IsInitialized()) return false;
  }
  return true;
}

void xtreemfs_get_xlocsetRequest::Swap(xtreemfs_get_xlocsetRequest* other) {
  if (other != this) {
    std::swap(file_id_, other->file_id_);
    std::swap(path_, other->path_);
    std::swap(volume_name_, other->volume_name_);
    std::swap(xcap_, other->xcap_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata xtreemfs_get_xlocsetRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = xtreemfs_get_xlocsetRequest_descriptor_;
  metadata.reflection = xtreemfs_get_xlocsetRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int xtreemfs_replica_removeRequest::kFileIdFieldNumber;
const int xtreemfs_replica_removeRequest::kPathFieldNumber;
const int xtreemfs_replica_removeRequest::kVolumeNameFieldNumber;
const int xtreemfs_replica_removeRequest::kOsdUuidFieldNumber;
#endif  // !_MSC_VER

xtreemfs_replica_removeRequest::xtreemfs_replica_removeRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void xtreemfs_replica_removeRequest::InitAsDefaultInstance() {
}

xtreemfs_replica_removeRequest::xtreemfs_replica_removeRequest(const xtreemfs_replica_removeRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void xtreemfs_replica_removeRequest::SharedCtor() {
  _cached_size_ = 0;
  file_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  volume_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  osd_uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

xtreemfs_replica_removeRequest::~xtreemfs_replica_removeRequest() {
  SharedDtor();
}

void xtreemfs_replica_removeRequest::SharedDtor() {
  if (file_id_ != &::google::protobuf::internal::kEmptyString) {
    delete file_id_;
  }
  if (path_ != &::google::protobuf::internal::kEmptyString) {
    delete path_;
  }
  if (volume_name_ != &::google::protobuf::internal::kEmptyString) {
    delete volume_name_;
  }
  if (osd_uuid_ != &::google::protobuf::internal::kEmptyString) {
    delete osd_uuid_;
  }
  if (this != default_instance_) {
  }
}

void xtreemfs_replica_removeRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* xtreemfs_replica_removeRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return xtreemfs_replica_removeRequest_descriptor_;
}

const xtreemfs_replica_removeRequest& xtreemfs_replica_removeRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_xtreemfs_2fMRC_2eproto();
  return *default_instance_;
}

xtreemfs_replica_removeRequest* xtreemfs_replica_removeRequest::default_instance_ = NULL;

xtreemfs_replica_removeRequest* xtreemfs_replica_removeRequest::New() const {
  return new xtreemfs_replica_removeRequest;
}

void xtreemfs_replica_removeRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_file_id()) {
      if (file_id_ != &::google::protobuf::internal::kEmptyString) {
        file_id_->clear();
      }
    }
    if (has_path()) {
      if (path_ != &::google::protobuf::internal::kEmptyString) {
        path_->clear();
      }
    }
    if (has_volume_name()) {
      if (volume_name_ != &::google::protobuf::internal::kEmptyString) {
        volume_name_->clear();
      }
    }
    if (has_osd_uuid()) {
      if (osd_uuid_ != &::google::protobuf::internal::kEmptyString) {
        osd_uuid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool xtreemfs_replica_removeRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string file_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_file_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->file_id().data(), this->file_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_osd_uuid;
        break;
      }

      // required string osd_uuid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_osd_uuid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_osd_uuid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->osd_uuid().data(), this->osd_uuid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_path;
        break;
      }

      // optional string path = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->path().data(), this->path().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_volume_name;
        break;
      }

      // optional string volume_name = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_volume_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_volume_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->volume_name().data(), this->volume_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void xtreemfs_replica_removeRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string file_id = 1;
  if (has_file_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->file_id().data(), this->file_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->file_id(), output);
  }

  // required string osd_uuid = 2;
  if (has_osd_uuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->osd_uuid().data(), this->osd_uuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->osd_uuid(), output);
  }

  // optional string path = 3;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->path(), output);
  }

  // optional string volume_name = 4;
  if (has_volume_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->volume_name().data(), this->volume_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->volume_name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* xtreemfs_replica_removeRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string file_id = 1;
  if (has_file_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->file_id().data(), this->file_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->file_id(), target);
  }

  // required string osd_uuid = 2;
  if (has_osd_uuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->osd_uuid().data(), this->osd_uuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->osd_uuid(), target);
  }

  // optional string path = 3;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->path(), target);
  }

  // optional string volume_name = 4;
  if (has_volume_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->volume_name().data(), this->volume_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->volume_name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int xtreemfs_replica_removeRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string file_id = 1;
    if (has_file_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->file_id());
    }

    // optional string path = 3;
    if (has_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->path());
    }

    // optional string volume_name = 4;
    if (has_volume_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->volume_name());
    }

    // required string osd_uuid = 2;
    if (has_osd_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->osd_uuid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void xtreemfs_replica_removeRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const xtreemfs_replica_removeRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const xtreemfs_replica_removeRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void xtreemfs_replica_removeRequest::MergeFrom(const xtreemfs_replica_removeRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_file_id()) {
      set_file_id(from.file_id());
    }
    if (from.has_path()) {
      set_path(from.path());
    }
    if (from.has_volume_name()) {
      set_volume_name(from.volume_name());
    }
    if (from.has_osd_uuid()) {
      set_osd_uuid(from.osd_uuid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void xtreemfs_replica_removeRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void xtreemfs_replica_removeRequest::CopyFrom(const xtreemfs_replica_removeRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool xtreemfs_replica_removeRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000008) != 0x00000008) return false;

  return true;
}

void xtreemfs_replica_removeRequest::Swap(xtreemfs_replica_removeRequest* other) {
  if (other != this) {
    std::swap(file_id_, other->file_id_);
    std::swap(path_, other->path_);
    std::swap(volume_name_, other->volume_name_);
    std::swap(osd_uuid_, other->osd_uuid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata xtreemfs_replica_removeRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = xtreemfs_replica_removeRequest_descriptor_;
  metadata.reflection = xtreemfs_replica_removeRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int xtreemfs_restore_fileRequest::kFilePathFieldNumber;
const int xtreemfs_restore_fileRequest::kFileIdFieldNumber;
const int xtreemfs_restore_fileRequest::kFileSizeFieldNumber;
const int xtreemfs_restore_fileRequest::kOsdUuidFieldNumber;
const int xtreemfs_restore_fileRequest::kStripeSizeFieldNumber;
#endif  // !_MSC_VER

xtreemfs_restore_fileRequest::xtreemfs_restore_fileRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void xtreemfs_restore_fileRequest::InitAsDefaultInstance() {
}

xtreemfs_restore_fileRequest::xtreemfs_restore_fileRequest(const xtreemfs_restore_fileRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void xtreemfs_restore_fileRequest::SharedCtor() {
  _cached_size_ = 0;
  file_path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  file_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  file_size_ = GOOGLE_ULONGLONG(0);
  osd_uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  stripe_size_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

xtreemfs_restore_fileRequest::~xtreemfs_restore_fileRequest() {
  SharedDtor();
}

void xtreemfs_restore_fileRequest::SharedDtor() {
  if (file_path_ != &::google::protobuf::internal::kEmptyString) {
    delete file_path_;
  }
  if (file_id_ != &::google::protobuf::internal::kEmptyString) {
    delete file_id_;
  }
  if (osd_uuid_ != &::google::protobuf::internal::kEmptyString) {
    delete osd_uuid_;
  }
  if (this != default_instance_) {
  }
}

void xtreemfs_restore_fileRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* xtreemfs_restore_fileRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return xtreemfs_restore_fileRequest_descriptor_;
}

const xtreemfs_restore_fileRequest& xtreemfs_restore_fileRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_xtreemfs_2fMRC_2eproto();
  return *default_instance_;
}

xtreemfs_restore_fileRequest* xtreemfs_restore_fileRequest::default_instance_ = NULL;

xtreemfs_restore_fileRequest* xtreemfs_restore_fileRequest::New() const {
  return new xtreemfs_restore_fileRequest;
}

void xtreemfs_restore_fileRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_file_path()) {
      if (file_path_ != &::google::protobuf::internal::kEmptyString) {
        file_path_->clear();
      }
    }
    if (has_file_id()) {
      if (file_id_ != &::google::protobuf::internal::kEmptyString) {
        file_id_->clear();
      }
    }
    file_size_ = GOOGLE_ULONGLONG(0);
    if (has_osd_uuid()) {
      if (osd_uuid_ != &::google::protobuf::internal::kEmptyString) {
        osd_uuid_->clear();
      }
    }
    stripe_size_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool xtreemfs_restore_fileRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string file_path = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_file_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->file_path().data(), this->file_path().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_file_id;
        break;
      }

      // required string file_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_file_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_file_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->file_id().data(), this->file_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_file_size;
        break;
      }

      // required fixed64 file_size = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_file_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &file_size_)));
          set_has_file_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_osd_uuid;
        break;
      }

      // required string osd_uuid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_osd_uuid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_osd_uuid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->osd_uuid().data(), this->osd_uuid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_stripe_size;
        break;
      }

      // required fixed32 stripe_size = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_stripe_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &stripe_size_)));
          set_has_stripe_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void xtreemfs_restore_fileRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string file_path = 1;
  if (has_file_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->file_path().data(), this->file_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->file_path(), output);
  }

  // required string file_id = 2;
  if (has_file_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->file_id().data(), this->file_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->file_id(), output);
  }

  // required fixed64 file_size = 3;
  if (has_file_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(3, this->file_size(), output);
  }

  // required string osd_uuid = 4;
  if (has_osd_uuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->osd_uuid().data(), this->osd_uuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->osd_uuid(), output);
  }

  // required fixed32 stripe_size = 5;
  if (has_stripe_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(5, this->stripe_size(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* xtreemfs_restore_fileRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string file_path = 1;
  if (has_file_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->file_path().data(), this->file_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->file_path(), target);
  }

  // required string file_id = 2;
  if (has_file_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->file_id().data(), this->file_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->file_id(), target);
  }

  // required fixed64 file_size = 3;
  if (has_file_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(3, this->file_size(), target);
  }

  // required string osd_uuid = 4;
  if (has_osd_uuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->osd_uuid().data(), this->osd_uuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->osd_uuid(), target);
  }

  // required fixed32 stripe_size = 5;
  if (has_stripe_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(5, this->stripe_size(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int xtreemfs_restore_fileRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string file_path = 1;
    if (has_file_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->file_path());
    }

    // required string file_id = 2;
    if (has_file_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->file_id());
    }

    // required fixed64 file_size = 3;
    if (has_file_size()) {
      total_size += 1 + 8;
    }

    // required string osd_uuid = 4;
    if (has_osd_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->osd_uuid());
    }

    // required fixed32 stripe_size = 5;
    if (has_stripe_size()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void xtreemfs_restore_fileRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const xtreemfs_restore_fileRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const xtreemfs_restore_fileRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void xtreemfs_restore_fileRequest::MergeFrom(const xtreemfs_restore_fileRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_file_path()) {
      set_file_path(from.file_path());
    }
    if (from.has_file_id()) {
      set_file_id(from.file_id());
    }
    if (from.has_file_size()) {
      set_file_size(from.file_size());
    }
    if (from.has_osd_uuid()) {
      set_osd_uuid(from.osd_uuid());
    }
    if (from.has_stripe_size()) {
      set_stripe_size(from.stripe_size());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void xtreemfs_restore_fileRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void xtreemfs_restore_fileRequest::CopyFrom(const xtreemfs_restore_fileRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool xtreemfs_restore_fileRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void xtreemfs_restore_fileRequest::Swap(xtreemfs_restore_fileRequest* other) {
  if (other != this) {
    std::swap(file_path_, other->file_path_);
    std::swap(file_id_, other->file_id_);
    std::swap(file_size_, other->file_size_);
    std::swap(osd_uuid_, other->osd_uuid_);
    std::swap(stripe_size_, other->stripe_size_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata xtreemfs_restore_fileRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = xtreemfs_restore_fileRequest_descriptor_;
  metadata.reflection = xtreemfs_restore_fileRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int xtreemfs_rmvolRequest::kVolumeNameFieldNumber;
#endif  // !_MSC_VER

xtreemfs_rmvolRequest::xtreemfs_rmvolRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void xtreemfs_rmvolRequest::InitAsDefaultInstance() {
}

xtreemfs_rmvolRequest::xtreemfs_rmvolRequest(const xtreemfs_rmvolRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void xtreemfs_rmvolRequest::SharedCtor() {
  _cached_size_ = 0;
  volume_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

xtreemfs_rmvolRequest::~xtreemfs_rmvolRequest() {
  SharedDtor();
}

void xtreemfs_rmvolRequest::SharedDtor() {
  if (volume_name_ != &::google::protobuf::internal::kEmptyString) {
    delete volume_name_;
  }
  if (this != default_instance_) {
  }
}

void xtreemfs_rmvolRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* xtreemfs_rmvolRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return xtreemfs_rmvolRequest_descriptor_;
}

const xtreemfs_rmvolRequest& xtreemfs_rmvolRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_xtreemfs_2fMRC_2eproto();
  return *default_instance_;
}

xtreemfs_rmvolRequest* xtreemfs_rmvolRequest::default_instance_ = NULL;

xtreemfs_rmvolRequest* xtreemfs_rmvolRequest::New() const {
  return new xtreemfs_rmvolRequest;
}

void xtreemfs_rmvolRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_volume_name()) {
      if (volume_name_ != &::google::protobuf::internal::kEmptyString) {
        volume_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool xtreemfs_rmvolRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string volume_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_volume_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->volume_name().data(), this->volume_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void xtreemfs_rmvolRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string volume_name = 1;
  if (has_volume_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->volume_name().data(), this->volume_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->volume_name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* xtreemfs_rmvolRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string volume_name = 1;
  if (has_volume_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->volume_name().data(), this->volume_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->volume_name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int xtreemfs_rmvolRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string volume_name = 1;
    if (has_volume_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->volume_name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void xtreemfs_rmvolRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const xtreemfs_rmvolRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const xtreemfs_rmvolRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void xtreemfs_rmvolRequest::MergeFrom(const xtreemfs_rmvolRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_volume_name()) {
      set_volume_name(from.volume_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void xtreemfs_rmvolRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void xtreemfs_rmvolRequest::CopyFrom(const xtreemfs_rmvolRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool xtreemfs_rmvolRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void xtreemfs_rmvolRequest::Swap(xtreemfs_rmvolRequest* other) {
  if (other != this) {
    std::swap(volume_name_, other->volume_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata xtreemfs_rmvolRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = xtreemfs_rmvolRequest_descriptor_;
  metadata.reflection = xtreemfs_rmvolRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int xtreemfs_update_file_sizeRequest::kXcapFieldNumber;
const int xtreemfs_update_file_sizeRequest::kOsdWriteResponseFieldNumber;
const int xtreemfs_update_file_sizeRequest::kCloseFileFieldNumber;
const int xtreemfs_update_file_sizeRequest::kCoordinatesFieldNumber;
#endif  // !_MSC_VER

xtreemfs_update_file_sizeRequest::xtreemfs_update_file_sizeRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void xtreemfs_update_file_sizeRequest::InitAsDefaultInstance() {
  xcap_ = const_cast< ::xtreemfs::pbrpc::XCap*>(&::xtreemfs::pbrpc::XCap::default_instance());
  osd_write_response_ = const_cast< ::xtreemfs::pbrpc::OSDWriteResponse*>(&::xtreemfs::pbrpc::OSDWriteResponse::default_instance());
  coordinates_ = const_cast< ::xtreemfs::pbrpc::VivaldiCoordinates*>(&::xtreemfs::pbrpc::VivaldiCoordinates::default_instance());
}

xtreemfs_update_file_sizeRequest::xtreemfs_update_file_sizeRequest(const xtreemfs_update_file_sizeRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void xtreemfs_update_file_sizeRequest::SharedCtor() {
  _cached_size_ = 0;
  xcap_ = NULL;
  osd_write_response_ = NULL;
  close_file_ = false;
  coordinates_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

xtreemfs_update_file_sizeRequest::~xtreemfs_update_file_sizeRequest() {
  SharedDtor();
}

void xtreemfs_update_file_sizeRequest::SharedDtor() {
  if (this != default_instance_) {
    delete xcap_;
    delete osd_write_response_;
    delete coordinates_;
  }
}

void xtreemfs_update_file_sizeRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* xtreemfs_update_file_sizeRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return xtreemfs_update_file_sizeRequest_descriptor_;
}

const xtreemfs_update_file_sizeRequest& xtreemfs_update_file_sizeRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_xtreemfs_2fMRC_2eproto();
  return *default_instance_;
}

xtreemfs_update_file_sizeRequest* xtreemfs_update_file_sizeRequest::default_instance_ = NULL;

xtreemfs_update_file_sizeRequest* xtreemfs_update_file_sizeRequest::New() const {
  return new xtreemfs_update_file_sizeRequest;
}

void xtreemfs_update_file_sizeRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_xcap()) {
      if (xcap_ != NULL) xcap_->::xtreemfs::pbrpc::XCap::Clear();
    }
    if (has_osd_write_response()) {
      if (osd_write_response_ != NULL) osd_write_response_->::xtreemfs::pbrpc::OSDWriteResponse::Clear();
    }
    close_file_ = false;
    if (has_coordinates()) {
      if (coordinates_ != NULL) coordinates_->::xtreemfs::pbrpc::VivaldiCoordinates::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool xtreemfs_update_file_sizeRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .xtreemfs.pbrpc.XCap xcap = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_xcap()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_osd_write_response;
        break;
      }

      // required .xtreemfs.pbrpc.OSDWriteResponse osd_write_response = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_osd_write_response:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_osd_write_response()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_close_file;
        break;
      }

      // optional bool close_file = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_close_file:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &close_file_)));
          set_has_close_file();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_coordinates;
        break;
      }

      // optional .xtreemfs.pbrpc.VivaldiCoordinates coordinates = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_coordinates:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_coordinates()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void xtreemfs_update_file_sizeRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .xtreemfs.pbrpc.XCap xcap = 1;
  if (has_xcap()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->xcap(), output);
  }

  // required .xtreemfs.pbrpc.OSDWriteResponse osd_write_response = 2;
  if (has_osd_write_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->osd_write_response(), output);
  }

  // optional bool close_file = 3;
  if (has_close_file()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->close_file(), output);
  }

  // optional .xtreemfs.pbrpc.VivaldiCoordinates coordinates = 4;
  if (has_coordinates()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->coordinates(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* xtreemfs_update_file_sizeRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .xtreemfs.pbrpc.XCap xcap = 1;
  if (has_xcap()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->xcap(), target);
  }

  // required .xtreemfs.pbrpc.OSDWriteResponse osd_write_response = 2;
  if (has_osd_write_response()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->osd_write_response(), target);
  }

  // optional bool close_file = 3;
  if (has_close_file()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->close_file(), target);
  }

  // optional .xtreemfs.pbrpc.VivaldiCoordinates coordinates = 4;
  if (has_coordinates()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->coordinates(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int xtreemfs_update_file_sizeRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .xtreemfs.pbrpc.XCap xcap = 1;
    if (has_xcap()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->xcap());
    }

    // required .xtreemfs.pbrpc.OSDWriteResponse osd_write_response = 2;
    if (has_osd_write_response()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->osd_write_response());
    }

    // optional bool close_file = 3;
    if (has_close_file()) {
      total_size += 1 + 1;
    }

    // optional .xtreemfs.pbrpc.VivaldiCoordinates coordinates = 4;
    if (has_coordinates()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->coordinates());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void xtreemfs_update_file_sizeRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const xtreemfs_update_file_sizeRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const xtreemfs_update_file_sizeRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void xtreemfs_update_file_sizeRequest::MergeFrom(const xtreemfs_update_file_sizeRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_xcap()) {
      mutable_xcap()->::xtreemfs::pbrpc::XCap::MergeFrom(from.xcap());
    }
    if (from.has_osd_write_response()) {
      mutable_osd_write_response()->::xtreemfs::pbrpc::OSDWriteResponse::MergeFrom(from.osd_write_response());
    }
    if (from.has_close_file()) {
      set_close_file(from.close_file());
    }
    if (from.has_coordinates()) {
      mutable_coordinates()->::xtreemfs::pbrpc::VivaldiCoordinates::MergeFrom(from.coordinates());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void xtreemfs_update_file_sizeRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void xtreemfs_update_file_sizeRequest::CopyFrom(const xtreemfs_update_file_sizeRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool xtreemfs_update_file_sizeRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_xcap()) {
    if (!this->xcap().IsInitialized()) return false;
  }
  if (has_coordinates()) {
    if (!this->coordinates().IsInitialized()) return false;
  }
  return true;
}

void xtreemfs_update_file_sizeRequest::Swap(xtreemfs_update_file_sizeRequest* other) {
  if (other != this) {
    std::swap(xcap_, other->xcap_);
    std::swap(osd_write_response_, other->osd_write_response_);
    std::swap(close_file_, other->close_file_);
    std::swap(coordinates_, other->coordinates_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata xtreemfs_update_file_sizeRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = xtreemfs_update_file_sizeRequest_descriptor_;
  metadata.reflection = xtreemfs_update_file_sizeRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int xtreemfs_set_replica_update_policyRequest::kFileIdFieldNumber;
const int xtreemfs_set_replica_update_policyRequest::kUpdatePolicyFieldNumber;
#endif  // !_MSC_VER

xtreemfs_set_replica_update_policyRequest::xtreemfs_set_replica_update_policyRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void xtreemfs_set_replica_update_policyRequest::InitAsDefaultInstance() {
}

xtreemfs_set_replica_update_policyRequest::xtreemfs_set_replica_update_policyRequest(const xtreemfs_set_replica_update_policyRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void xtreemfs_set_replica_update_policyRequest::SharedCtor() {
  _cached_size_ = 0;
  file_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  update_policy_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

xtreemfs_set_replica_update_policyRequest::~xtreemfs_set_replica_update_policyRequest() {
  SharedDtor();
}

void xtreemfs_set_replica_update_policyRequest::SharedDtor() {
  if (file_id_ != &::google::protobuf::internal::kEmptyString) {
    delete file_id_;
  }
  if (update_policy_ != &::google::protobuf::internal::kEmptyString) {
    delete update_policy_;
  }
  if (this != default_instance_) {
  }
}

void xtreemfs_set_replica_update_policyRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* xtreemfs_set_replica_update_policyRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return xtreemfs_set_replica_update_policyRequest_descriptor_;
}

const xtreemfs_set_replica_update_policyRequest& xtreemfs_set_replica_update_policyRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_xtreemfs_2fMRC_2eproto();
  return *default_instance_;
}

xtreemfs_set_replica_update_policyRequest* xtreemfs_set_replica_update_policyRequest::default_instance_ = NULL;

xtreemfs_set_replica_update_policyRequest* xtreemfs_set_replica_update_policyRequest::New() const {
  return new xtreemfs_set_replica_update_policyRequest;
}

void xtreemfs_set_replica_update_policyRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_file_id()) {
      if (file_id_ != &::google::protobuf::internal::kEmptyString) {
        file_id_->clear();
      }
    }
    if (has_update_policy()) {
      if (update_policy_ != &::google::protobuf::internal::kEmptyString) {
        update_policy_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool xtreemfs_set_replica_update_policyRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string file_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_file_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->file_id().data(), this->file_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_update_policy;
        break;
      }

      // required string update_policy = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_update_policy:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_update_policy()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->update_policy().data(), this->update_policy().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void xtreemfs_set_replica_update_policyRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string file_id = 1;
  if (has_file_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->file_id().data(), this->file_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->file_id(), output);
  }

  // required string update_policy = 2;
  if (has_update_policy()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->update_policy().data(), this->update_policy().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->update_policy(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* xtreemfs_set_replica_update_policyRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string file_id = 1;
  if (has_file_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->file_id().data(), this->file_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->file_id(), target);
  }

  // required string update_policy = 2;
  if (has_update_policy()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->update_policy().data(), this->update_policy().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->update_policy(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int xtreemfs_set_replica_update_policyRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string file_id = 1;
    if (has_file_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->file_id());
    }

    // required string update_policy = 2;
    if (has_update_policy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->update_policy());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void xtreemfs_set_replica_update_policyRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const xtreemfs_set_replica_update_policyRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const xtreemfs_set_replica_update_policyRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void xtreemfs_set_replica_update_policyRequest::MergeFrom(const xtreemfs_set_replica_update_policyRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_file_id()) {
      set_file_id(from.file_id());
    }
    if (from.has_update_policy()) {
      set_update_policy(from.update_policy());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void xtreemfs_set_replica_update_policyRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void xtreemfs_set_replica_update_policyRequest::CopyFrom(const xtreemfs_set_replica_update_policyRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool xtreemfs_set_replica_update_policyRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void xtreemfs_set_replica_update_policyRequest::Swap(xtreemfs_set_replica_update_policyRequest* other) {
  if (other != this) {
    std::swap(file_id_, other->file_id_);
    std::swap(update_policy_, other->update_policy_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata xtreemfs_set_replica_update_policyRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = xtreemfs_set_replica_update_policyRequest_descriptor_;
  metadata.reflection = xtreemfs_set_replica_update_policyRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int xtreemfs_set_replica_update_policyResponse::kOldUpdatePolicyFieldNumber;
#endif  // !_MSC_VER

xtreemfs_set_replica_update_policyResponse::xtreemfs_set_replica_update_policyResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void xtreemfs_set_replica_update_policyResponse::InitAsDefaultInstance() {
}

xtreemfs_set_replica_update_policyResponse::xtreemfs_set_replica_update_policyResponse(const xtreemfs_set_replica_update_policyResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void xtreemfs_set_replica_update_policyResponse::SharedCtor() {
  _cached_size_ = 0;
  old_update_policy_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

xtreemfs_set_replica_update_policyResponse::~xtreemfs_set_replica_update_policyResponse() {
  SharedDtor();
}

void xtreemfs_set_replica_update_policyResponse::SharedDtor() {
  if (old_update_policy_ != &::google::protobuf::internal::kEmptyString) {
    delete old_update_policy_;
  }
  if (this != default_instance_) {
  }
}

void xtreemfs_set_replica_update_policyResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* xtreemfs_set_replica_update_policyResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return xtreemfs_set_replica_update_policyResponse_descriptor_;
}

const xtreemfs_set_replica_update_policyResponse& xtreemfs_set_replica_update_policyResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_xtreemfs_2fMRC_2eproto();
  return *default_instance_;
}

xtreemfs_set_replica_update_policyResponse* xtreemfs_set_replica_update_policyResponse::default_instance_ = NULL;

xtreemfs_set_replica_update_policyResponse* xtreemfs_set_replica_update_policyResponse::New() const {
  return new xtreemfs_set_replica_update_policyResponse;
}

void xtreemfs_set_replica_update_policyResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_old_update_policy()) {
      if (old_update_policy_ != &::google::protobuf::internal::kEmptyString) {
        old_update_policy_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool xtreemfs_set_replica_update_policyResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string old_update_policy = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_old_update_policy()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->old_update_policy().data(), this->old_update_policy().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void xtreemfs_set_replica_update_policyResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string old_update_policy = 1;
  if (has_old_update_policy()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->old_update_policy().data(), this->old_update_policy().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->old_update_policy(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* xtreemfs_set_replica_update_policyResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string old_update_policy = 1;
  if (has_old_update_policy()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->old_update_policy().data(), this->old_update_policy().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->old_update_policy(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int xtreemfs_set_replica_update_policyResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string old_update_policy = 1;
    if (has_old_update_policy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->old_update_policy());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void xtreemfs_set_replica_update_policyResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const xtreemfs_set_replica_update_policyResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const xtreemfs_set_replica_update_policyResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void xtreemfs_set_replica_update_policyResponse::MergeFrom(const xtreemfs_set_replica_update_policyResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_old_update_policy()) {
      set_old_update_policy(from.old_update_policy());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void xtreemfs_set_replica_update_policyResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void xtreemfs_set_replica_update_policyResponse::CopyFrom(const xtreemfs_set_replica_update_policyResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool xtreemfs_set_replica_update_policyResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void xtreemfs_set_replica_update_policyResponse::Swap(xtreemfs_set_replica_update_policyResponse* other) {
  if (other != this) {
    std::swap(old_update_policy_, other->old_update_policy_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata xtreemfs_set_replica_update_policyResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = xtreemfs_set_replica_update_policyResponse_descriptor_;
  metadata.reflection = xtreemfs_set_replica_update_policyResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int xtreemfs_set_read_only_xattrRequest::kFileIdFieldNumber;
const int xtreemfs_set_read_only_xattrRequest::kValueFieldNumber;
#endif  // !_MSC_VER

xtreemfs_set_read_only_xattrRequest::xtreemfs_set_read_only_xattrRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void xtreemfs_set_read_only_xattrRequest::InitAsDefaultInstance() {
}

xtreemfs_set_read_only_xattrRequest::xtreemfs_set_read_only_xattrRequest(const xtreemfs_set_read_only_xattrRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void xtreemfs_set_read_only_xattrRequest::SharedCtor() {
  _cached_size_ = 0;
  file_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  value_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

xtreemfs_set_read_only_xattrRequest::~xtreemfs_set_read_only_xattrRequest() {
  SharedDtor();
}

void xtreemfs_set_read_only_xattrRequest::SharedDtor() {
  if (file_id_ != &::google::protobuf::internal::kEmptyString) {
    delete file_id_;
  }
  if (this != default_instance_) {
  }
}

void xtreemfs_set_read_only_xattrRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* xtreemfs_set_read_only_xattrRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return xtreemfs_set_read_only_xattrRequest_descriptor_;
}

const xtreemfs_set_read_only_xattrRequest& xtreemfs_set_read_only_xattrRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_xtreemfs_2fMRC_2eproto();
  return *default_instance_;
}

xtreemfs_set_read_only_xattrRequest* xtreemfs_set_read_only_xattrRequest::default_instance_ = NULL;

xtreemfs_set_read_only_xattrRequest* xtreemfs_set_read_only_xattrRequest::New() const {
  return new xtreemfs_set_read_only_xattrRequest;
}

void xtreemfs_set_read_only_xattrRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_file_id()) {
      if (file_id_ != &::google::protobuf::internal::kEmptyString) {
        file_id_->clear();
      }
    }
    value_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool xtreemfs_set_read_only_xattrRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string file_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_file_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->file_id().data(), this->file_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_value;
        break;
      }

      // required bool value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void xtreemfs_set_read_only_xattrRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string file_id = 1;
  if (has_file_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->file_id().data(), this->file_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->file_id(), output);
  }

  // required bool value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* xtreemfs_set_read_only_xattrRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string file_id = 1;
  if (has_file_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->file_id().data(), this->file_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->file_id(), target);
  }

  // required bool value = 2;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int xtreemfs_set_read_only_xattrRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string file_id = 1;
    if (has_file_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->file_id());
    }

    // required bool value = 2;
    if (has_value()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void xtreemfs_set_read_only_xattrRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const xtreemfs_set_read_only_xattrRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const xtreemfs_set_read_only_xattrRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void xtreemfs_set_read_only_xattrRequest::MergeFrom(const xtreemfs_set_read_only_xattrRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_file_id()) {
      set_file_id(from.file_id());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void xtreemfs_set_read_only_xattrRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void xtreemfs_set_read_only_xattrRequest::CopyFrom(const xtreemfs_set_read_only_xattrRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool xtreemfs_set_read_only_xattrRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void xtreemfs_set_read_only_xattrRequest::Swap(xtreemfs_set_read_only_xattrRequest* other) {
  if (other != this) {
    std::swap(file_id_, other->file_id_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata xtreemfs_set_read_only_xattrRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = xtreemfs_set_read_only_xattrRequest_descriptor_;
  metadata.reflection = xtreemfs_set_read_only_xattrRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int xtreemfs_set_read_only_xattrResponse::kWasSetFieldNumber;
#endif  // !_MSC_VER

xtreemfs_set_read_only_xattrResponse::xtreemfs_set_read_only_xattrResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void xtreemfs_set_read_only_xattrResponse::InitAsDefaultInstance() {
}

xtreemfs_set_read_only_xattrResponse::xtreemfs_set_read_only_xattrResponse(const xtreemfs_set_read_only_xattrResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void xtreemfs_set_read_only_xattrResponse::SharedCtor() {
  _cached_size_ = 0;
  was_set_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

xtreemfs_set_read_only_xattrResponse::~xtreemfs_set_read_only_xattrResponse() {
  SharedDtor();
}

void xtreemfs_set_read_only_xattrResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void xtreemfs_set_read_only_xattrResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* xtreemfs_set_read_only_xattrResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return xtreemfs_set_read_only_xattrResponse_descriptor_;
}

const xtreemfs_set_read_only_xattrResponse& xtreemfs_set_read_only_xattrResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_xtreemfs_2fMRC_2eproto();
  return *default_instance_;
}

xtreemfs_set_read_only_xattrResponse* xtreemfs_set_read_only_xattrResponse::default_instance_ = NULL;

xtreemfs_set_read_only_xattrResponse* xtreemfs_set_read_only_xattrResponse::New() const {
  return new xtreemfs_set_read_only_xattrResponse;
}

void xtreemfs_set_read_only_xattrResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    was_set_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool xtreemfs_set_read_only_xattrResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool was_set = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &was_set_)));
          set_has_was_set();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void xtreemfs_set_read_only_xattrResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool was_set = 1;
  if (has_was_set()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->was_set(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* xtreemfs_set_read_only_xattrResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool was_set = 1;
  if (has_was_set()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->was_set(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int xtreemfs_set_read_only_xattrResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool was_set = 1;
    if (has_was_set()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void xtreemfs_set_read_only_xattrResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const xtreemfs_set_read_only_xattrResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const xtreemfs_set_read_only_xattrResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void xtreemfs_set_read_only_xattrResponse::MergeFrom(const xtreemfs_set_read_only_xattrResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_was_set()) {
      set_was_set(from.was_set());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void xtreemfs_set_read_only_xattrResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void xtreemfs_set_read_only_xattrResponse::CopyFrom(const xtreemfs_set_read_only_xattrResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool xtreemfs_set_read_only_xattrResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void xtreemfs_set_read_only_xattrResponse::Swap(xtreemfs_set_read_only_xattrResponse* other) {
  if (other != this) {
    std::swap(was_set_, other->was_set_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata xtreemfs_set_read_only_xattrResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = xtreemfs_set_read_only_xattrResponse_descriptor_;
  metadata.reflection = xtreemfs_set_read_only_xattrResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int xtreemfs_get_file_credentialsRequest::kFileIdFieldNumber;
#endif  // !_MSC_VER

xtreemfs_get_file_credentialsRequest::xtreemfs_get_file_credentialsRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void xtreemfs_get_file_credentialsRequest::InitAsDefaultInstance() {
}

xtreemfs_get_file_credentialsRequest::xtreemfs_get_file_credentialsRequest(const xtreemfs_get_file_credentialsRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void xtreemfs_get_file_credentialsRequest::SharedCtor() {
  _cached_size_ = 0;
  file_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

xtreemfs_get_file_credentialsRequest::~xtreemfs_get_file_credentialsRequest() {
  SharedDtor();
}

void xtreemfs_get_file_credentialsRequest::SharedDtor() {
  if (file_id_ != &::google::protobuf::internal::kEmptyString) {
    delete file_id_;
  }
  if (this != default_instance_) {
  }
}

void xtreemfs_get_file_credentialsRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* xtreemfs_get_file_credentialsRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return xtreemfs_get_file_credentialsRequest_descriptor_;
}

const xtreemfs_get_file_credentialsRequest& xtreemfs_get_file_credentialsRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_xtreemfs_2fMRC_2eproto();
  return *default_instance_;
}

xtreemfs_get_file_credentialsRequest* xtreemfs_get_file_credentialsRequest::default_instance_ = NULL;

xtreemfs_get_file_credentialsRequest* xtreemfs_get_file_credentialsRequest::New() const {
  return new xtreemfs_get_file_credentialsRequest;
}

void xtreemfs_get_file_credentialsRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_file_id()) {
      if (file_id_ != &::google::protobuf::internal::kEmptyString) {
        file_id_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool xtreemfs_get_file_credentialsRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string file_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_file_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->file_id().data(), this->file_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void xtreemfs_get_file_credentialsRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string file_id = 1;
  if (has_file_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->file_id().data(), this->file_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->file_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* xtreemfs_get_file_credentialsRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string file_id = 1;
  if (has_file_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->file_id().data(), this->file_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->file_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int xtreemfs_get_file_credentialsRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string file_id = 1;
    if (has_file_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->file_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void xtreemfs_get_file_credentialsRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const xtreemfs_get_file_credentialsRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const xtreemfs_get_file_credentialsRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void xtreemfs_get_file_credentialsRequest::MergeFrom(const xtreemfs_get_file_credentialsRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_file_id()) {
      set_file_id(from.file_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void xtreemfs_get_file_credentialsRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void xtreemfs_get_file_credentialsRequest::CopyFrom(const xtreemfs_get_file_credentialsRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool xtreemfs_get_file_credentialsRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void xtreemfs_get_file_credentialsRequest::Swap(xtreemfs_get_file_credentialsRequest* other) {
  if (other != this) {
    std::swap(file_id_, other->file_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata xtreemfs_get_file_credentialsRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = xtreemfs_get_file_credentialsRequest_descriptor_;
  metadata.reflection = xtreemfs_get_file_credentialsRequest_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pbrpc
}  // namespace xtreemfs

// @@protoc_insertion_point(global_scope)
